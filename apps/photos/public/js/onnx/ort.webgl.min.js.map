{"version":3,"file":"ort.webgl.min.js","mappings":"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AG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IA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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/../common/dist/cjs/backend-impl.js","webpack://ort/../common/dist/cjs/backend.js","webpack://ort/../common/dist/cjs/env-impl.js","webpack://ort/../common/dist/cjs/env.js","webpack://ort/../common/dist/cjs/index.js","webpack://ort/../common/dist/cjs/inference-session-impl.js","webpack://ort/../common/dist/cjs/inference-session.js","webpack://ort/../common/dist/cjs/onnx-value.js","webpack://ort/../common/dist/cjs/tensor-conversion-impl.js","webpack://ort/../common/dist/cjs/tensor-factory-impl.js","webpack://ort/../common/dist/cjs/tensor-impl.js","webpack://ort/../common/dist/cjs/tensor-utils-impl.js","webpack://ort/../common/dist/cjs/tensor.js","webpack://ort/../common/dist/cjs/version.js","webpack://ort/./node_modules/long/umd/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nenv.versions.web = version;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n              nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.16.3';\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBackend = exports.registerBackend = void 0;\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nconst registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\nexports.registerBackend = registerBackend;\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nconst resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\nexports.resolveBackend = resolveBackend;\n//# sourceMappingURL=backend-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerBackend = void 0;\nvar backend_impl_js_1 = require(\"./backend-impl.js\");\nObject.defineProperty(exports, \"registerBackend\", { enumerable: true, get: function () { return backend_impl_js_1.registerBackend; } });\n//# sourceMappingURL=backend.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst version_js_1 = require(\"./version.js\");\nlet logLevelValue = 'warning';\nexports.env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version_js_1.version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(exports.env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst env_impl_js_1 = require(\"./env-impl.js\");\n/**\n * Represent a set of flags as a global singleton.\n */\nexports.env = env_impl_js_1.env;\n//# sourceMappingURL=env.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n__exportStar(require(\"./backend.js\"), exports);\n__exportStar(require(\"./env.js\"), exports);\n__exportStar(require(\"./inference-session.js\"), exports);\n__exportStar(require(\"./tensor.js\"), exports);\n__exportStar(require(\"./onnx-value.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst backend_impl_js_1 = require(\"./backend-impl.js\");\nconst tensor_js_1 = require(\"./tensor.js\");\nclass InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof tensor_js_1.Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof tensor_js_1.Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new tensor_js_1.Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await (0, backend_impl_js_1.resolveBackend)(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\nexports.InferenceSession = InferenceSession;\n//# sourceMappingURL=inference-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst inference_session_impl_js_1 = require(\"./inference-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.InferenceSession = inference_session_impl_js_1.InferenceSession;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=onnx-value.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorToImageData = exports.tensorToDataURL = void 0;\n/**\n * implementation of Tensor.toDataURL()\n */\nconst tensorToDataURL = (tensor, options) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        return canvas.toDataURL();\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\nexports.tensorToDataURL = tensorToDataURL;\n/**\n * implementation of Tensor.toImageData()\n */\nconst tensorToImageData = (tensor, options) => {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\nexports.tensorToImageData = tensorToImageData;\n//# sourceMappingURL=tensor-conversion-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorFromImage = exports.bufferToTensor = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nconst bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ?\n        (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n        'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new tensor_js_1.Tensor('float32', float32Data, [1, 4, height, width]) :\n        new tensor_js_1.Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\nexports.bufferToTensor = bufferToTensor;\n/**\n * implementation of Tensor.fromImage().\n */\nconst tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = tempCanvas.getContext('2d');\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\nexports.tensorFromImage = tensorFromImage;\n//# sourceMappingURL=tensor-factory-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_conversion_impl_js_1 = require(\"./tensor-conversion-impl.js\");\nconst tensor_factory_impl_js_1 = require(\"./tensor-factory-impl.js\");\nconst tensor_utils_impl_js_1 = require(\"./tensor-utils-impl.js\");\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\nclass Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    if (arg0 === 'float16') {\n                        // Throw error here because when user try to use number array as data,\n                        // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                        // Uint16Array.from(arg1) which generates wrong data.\n                        throw new TypeError('Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n                    }\n                    else if (arg0 === 'uint64' || arg0 === 'int64') {\n                        // use 'as any' here because:\n                        // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                        // see https://github.com/microsoft/TypeScript/issues/17002\n                        // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()' does\n                        // not accept parameter mapFn.\n                        // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                        // type.\n                        // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1, BigInt);\n                    }\n                    else {\n                        // assume 'arg1' is of type \"readonly number[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1);\n                    }\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    static async fromImage(image, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);\n    }\n    toImageData(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);\n    }\n}\nexports.Tensor = Tensor;\n//# sourceMappingURL=tensor-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorReshape = exports.calculateSize = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexports.calculateSize = calculateSize;\n/**\n * implementation of Tensor.reshape()\n */\nconst tensorReshape = (tensor, dims) => new tensor_js_1.Tensor(tensor.type, tensor.data, dims);\nexports.tensorReshape = tensorReshape;\n//# sourceMappingURL=tensor-utils-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.Tensor = tensor_impl_js_1.Tensor;\n//# sourceMappingURL=tensor.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexports.version = '1.16.3';\n//# sourceMappingURL=version.js.map","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","async","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","registerBackend","env","versions","web","version","AttributeWithCacheKeyImpl","constructor","attribute","Object","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","length","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","Math","ceil","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","handler","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","min","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","resolve","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","Promise","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","Number","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","BigInt64Array","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","isInteger","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","message","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","defineProperty","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","fn","arguments","pending","apply","b64","s64","parts","chunk","fromCharCode","invalidEncoding","charCodeAt","test","EventEmitter","_listeners","on","evt","off","listeners","emit","args","f32","f8b","le","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","alloc","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","guid","EMPTY","isGuid","validator","gen","createEmpty","raw","out","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","writable","enumerable","configurable","pool","isNode","global","window","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","backends","backendsSortedByPriority","priority","currentBackend","backendHints","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","backend_impl_js_1","version_js_1","logLevelValue","wasm","webgpu","common","env_impl_js_1","__createBinding","m","k2","desc","getOwnPropertyDescriptor","__exportStar","tensor_js_1","fetches","isFetchesEmpty","isFetches","arg1Keys","results","returnValue","filePathOrUint8Array","SharedArrayBuffer","isSafeInteger","executionProviders","inference_session_impl_js_1","tensorToImageData","tensorToDataURL","pixels2DContext","tensorLayout","inputformat","norm","normMean","normBias","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","R","G","A","fillStyle","fillRect","toDataURL","image","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","tensorFromImage","bufferToTensor","outputformat","tensorFormat","float32Data","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","bufferToTensorOptions","resizedHeight","resizedWidth","drawImage","getImageData","newImage","Image","crossOrigin","onload","img","tempCanvas","putImageData","tensor_conversion_impl_js_1","tensor_factory_impl_js_1","tensor_utils_impl_js_1","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","BigUint64Array","checkBigInt","typedArrayConstructor","BigInt","firstElementType","mappedType","calculateSize","toImageData","tensorReshape","tensor_impl_js_1","default","WebAssembly","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}