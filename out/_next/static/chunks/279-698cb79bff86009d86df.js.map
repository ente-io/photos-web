{"version":3,"file":"static/chunks/279-698cb79bff86009d86df.js","mappings":"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","sources":["webpack://_N_E/./src/components/SubmitButton.tsx","webpack://_N_E/./src/services/userService.ts","webpack://_N_E/./src/types.ts","webpack://_N_E/./src/utils/common/key.ts","webpack://_N_E/./src/utils/crypto/index.ts","webpack://_N_E/./src/utils/storage/localForage.ts","webpack://_N_E/./src/utils/storage/sessionStorage.ts"],"sourcesContent":["import React from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\n\ninterface Props {\n    loading: boolean;\n    buttonText: string;\n    inline?: any;\n    disabled?: boolean;\n}\nconst SubmitButton = ({ loading, buttonText, inline, disabled }: Props) => (\n    <Button\n        className=\"submitButton\"\n        variant=\"outline-success\"\n        type=\"submit\"\n        block={!inline}\n        disabled={loading || disabled}\n        style={{ padding: '6px 1em' }}>\n        {loading ? (\n            <Spinner\n                as=\"span\"\n                animation=\"border\"\n                style={{\n                    width: '22px',\n                    height: '22px',\n                    borderWidth: '0.20em',\n                    color: '#51cd7c',\n                }}\n            />\n        ) : (\n            buttonText\n        )}\n    </Button>\n);\n\nexport default SubmitButton;\n","import { KeyAttributes, PAGES } from 'types';\nimport { getEndpoint } from 'utils/common/apiUtil';\nimport { clearKeys } from 'utils/storage/sessionStorage';\nimport router from 'next/router';\nimport { clearData, getData, LS_KEYS } from 'utils/storage/localStorage';\nimport localForage from 'utils/storage/localForage';\nimport { getToken } from 'utils/common/key';\nimport HTTPService from './HTTPService';\nimport { B64EncryptionResult } from 'utils/crypto';\nimport { logError } from 'utils/sentry';\nimport { Subscription } from './billingService';\n\nexport interface UpdatedKey {\n    kekSalt: string;\n    encryptedKey: string;\n    keyDecryptionNonce: string;\n    memLimit: number;\n    opsLimit: number;\n}\n\nexport interface RecoveryKey {\n    masterKeyEncryptedWithRecoveryKey: string;\n    masterKeyDecryptionNonce: string;\n    recoveryKeyEncryptedWithMasterKey: string;\n    recoveryKeyDecryptionNonce: string;\n}\nconst ENDPOINT = getEndpoint();\n\nconst HAS_SET_KEYS = 'hasSetKeys';\n\nexport const FIX_CREATION_TIME_VISIBLE_TO_USER_IDS = [1, 125, 243, 341];\n\nexport interface User {\n    id: number;\n    name: string;\n    email: string;\n    token: string;\n    encryptedToken: string;\n    isTwoFactorEnabled: boolean;\n    twoFactorSessionID: string;\n}\nexport interface EmailVerificationResponse {\n    id: number;\n    keyAttributes?: KeyAttributes;\n    encryptedToken?: string;\n    token?: string;\n    twoFactorSessionID: string;\n}\n\nexport interface TwoFactorVerificationResponse {\n    id: number;\n    keyAttributes: KeyAttributes;\n    encryptedToken?: string;\n    token?: string;\n}\n\nexport interface TwoFactorSecret {\n    secretCode: string;\n    qrCode: string;\n}\n\nexport interface TwoFactorRecoveryResponse {\n    encryptedSecret: string;\n    secretDecryptionNonce: string;\n}\n\nexport interface UserDetails {\n    email: string;\n    usage: number;\n    fileCount: number;\n    sharedCollectionCount: number;\n    subscription: Subscription;\n}\n\nexport const getOtt = (email: string) =>\n    HTTPService.get(`${ENDPOINT}/users/ott`, {\n        email,\n        client: 'web',\n    });\nexport const getPublicKey = async (email: string) => {\n    const token = getToken();\n\n    const resp = await HTTPService.get(\n        `${ENDPOINT}/users/public-key`,\n        { email },\n        {\n            'X-Auth-Token': token,\n        }\n    );\n    return resp.data.publicKey;\n};\n\nexport const getPaymentToken = async () => {\n    const token = getToken();\n\n    const resp = await HTTPService.get(\n        `${ENDPOINT}/users/payment-token`,\n        null,\n        {\n            'X-Auth-Token': token,\n        }\n    );\n    return resp.data['paymentToken'];\n};\n\nexport const verifyOtt = (email: string, ott: string) =>\n    HTTPService.post(`${ENDPOINT}/users/verify-email`, { email, ott });\n\nexport const putAttributes = (token: string, keyAttributes: KeyAttributes) =>\n    HTTPService.put(`${ENDPOINT}/users/attributes`, { keyAttributes }, null, {\n        'X-Auth-Token': token,\n    });\n\nexport const setKeys = (token: string, updatedKey: UpdatedKey) =>\n    HTTPService.put(`${ENDPOINT}/users/keys`, updatedKey, null, {\n        'X-Auth-Token': token,\n    });\n\nexport const setRecoveryKey = (token: string, recoveryKey: RecoveryKey) =>\n    HTTPService.put(`${ENDPOINT}/users/recovery-key`, recoveryKey, null, {\n        'X-Auth-Token': token,\n    });\n\nexport const logoutUser = async () => {\n    // ignore server logout result as logoutUser can be triggered before sign up or on token expiry\n    await _logout();\n    clearKeys();\n    clearData();\n    await caches.delete('thumbs');\n    await clearFiles();\n    router.push(PAGES.ROOT);\n};\n\nexport const clearFiles = async () => {\n    await localForage.clear();\n};\n\nexport const isTokenValid = async () => {\n    try {\n        if (!getToken()) {\n            return false;\n        }\n        const resp = await HTTPService.get(\n            `${ENDPOINT}/users/session-validity/v2`,\n            null,\n            {\n                'X-Auth-Token': getToken(),\n            }\n        );\n        try {\n            if (resp.data[HAS_SET_KEYS] === undefined) {\n                throw Error('resp.data.hasSetKey undefined');\n            }\n            if (!resp.data['hasSetKeys']) {\n                try {\n                    await putAttributes(\n                        getToken(),\n                        getData(LS_KEYS.ORIGINAL_KEY_ATTRIBUTES)\n                    );\n                } catch (e) {\n                    logError(e, 'put attribute failed');\n                }\n            }\n        } catch (e) {\n            logError(e, 'hasSetKeys not set in session validity response');\n        }\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nexport const setupTwoFactor = async () => {\n    const resp = await HTTPService.post(\n        `${ENDPOINT}/users/two-factor/setup`,\n        null,\n        null,\n        {\n            'X-Auth-Token': getToken(),\n        }\n    );\n    return resp.data as TwoFactorSecret;\n};\n\nexport const enableTwoFactor = async (\n    code: string,\n    recoveryEncryptedTwoFactorSecret: B64EncryptionResult\n) => {\n    await HTTPService.post(\n        `${ENDPOINT}/users/two-factor/enable`,\n        {\n            code,\n            encryptedTwoFactorSecret:\n                recoveryEncryptedTwoFactorSecret.encryptedData,\n            twoFactorSecretDecryptionNonce:\n                recoveryEncryptedTwoFactorSecret.nonce,\n        },\n        null,\n        {\n            'X-Auth-Token': getToken(),\n        }\n    );\n};\n\nexport const verifyTwoFactor = async (code: string, sessionID: string) => {\n    const resp = await HTTPService.post(\n        `${ENDPOINT}/users/two-factor/verify`,\n        {\n            code,\n            sessionID,\n        },\n        null\n    );\n    return resp.data as TwoFactorVerificationResponse;\n};\n\nexport const recoverTwoFactor = async (sessionID: string) => {\n    const resp = await HTTPService.get(`${ENDPOINT}/users/two-factor/recover`, {\n        sessionID,\n    });\n    return resp.data as TwoFactorRecoveryResponse;\n};\n\nexport const removeTwoFactor = async (sessionID: string, secret: string) => {\n    const resp = await HTTPService.post(`${ENDPOINT}/users/two-factor/remove`, {\n        sessionID,\n        secret,\n    });\n    return resp.data as TwoFactorVerificationResponse;\n};\n\nexport const disableTwoFactor = async () => {\n    await HTTPService.post(`${ENDPOINT}/users/two-factor/disable`, null, null, {\n        'X-Auth-Token': getToken(),\n    });\n};\n\nexport const getTwoFactorStatus = async () => {\n    const resp = await HTTPService.get(\n        `${ENDPOINT}/users/two-factor/status`,\n        null,\n        {\n            'X-Auth-Token': getToken(),\n        }\n    );\n    return resp.data['status'];\n};\n\nexport const _logout = async () => {\n    if (!getToken()) return true;\n    try {\n        await HTTPService.post(`${ENDPOINT}/users/logout`, null, null, {\n            'X-Auth-Token': getToken(),\n        });\n        return true;\n    } catch (e) {\n        logError(e, '/users/logout failed');\n        return false;\n    }\n};\n\nexport const getOTTForEmailChange = async (email: string) => {\n    if (!getToken()) {\n        return null;\n    }\n    await HTTPService.get(`${ENDPOINT}/users/ott`, {\n        email,\n        client: 'web',\n        purpose: 'change',\n    });\n};\n\nexport const changeEmail = async (email: string, ott: string) => {\n    if (!getToken()) {\n        return null;\n    }\n    await HTTPService.post(\n        `${ENDPOINT}/users/change-email`,\n        {\n            email,\n            ott,\n        },\n        null,\n        {\n            'X-Auth-Token': getToken(),\n        }\n    );\n};\n\nexport const getUserDetails = async (): Promise<UserDetails> => {\n    const token = getToken();\n\n    const resp = await HTTPService.get(`${ENDPOINT}/users/details`, null, {\n        'X-Auth-Token': token,\n    });\n    return resp.data['details'];\n};\n","export interface KeyAttributes {\n    kekSalt: string;\n    encryptedKey: string;\n    keyDecryptionNonce: string;\n    opsLimit: number;\n    memLimit: number;\n    publicKey: string;\n    encryptedSecretKey: string;\n    secretKeyDecryptionNonce: string;\n    masterKeyEncryptedWithRecoveryKey: string;\n    masterKeyDecryptionNonce: string;\n    recoveryKeyEncryptedWithMasterKey: string;\n    recoveryKeyDecryptionNonce: string;\n}\n\nexport const ENCRYPTION_CHUNK_SIZE = 4 * 1024 * 1024;\nexport const GAP_BTW_TILES = 4;\nexport const DATE_CONTAINER_HEIGHT = 48;\nexport const IMAGE_CONTAINER_MAX_HEIGHT = 200;\nexport const IMAGE_CONTAINER_MAX_WIDTH =\n    IMAGE_CONTAINER_MAX_HEIGHT - GAP_BTW_TILES;\nexport const MIN_COLUMNS = 4;\nexport const SPACE_BTW_DATES = 44;\n\nexport enum PAGES {\n    CHANGE_EMAIL = '/change-email',\n    CHANGE_PASSWORD = '/change-password',\n    CREDENTIALS = '/credentials',\n    GALLERY = '/gallery',\n    GENERATE = '/generate',\n    LOGIN = '/login',\n    RECOVER = '/recover',\n    SIGNUP = '/signup',\n    TWO_FACTOR_SETUP = '/two-factor/setup',\n    TWO_FACTOR_VERIFY = '/two-factor/verify',\n    TWO_FACTOR_RECOVER = '/two-factor/recover',\n    VERIFY = '/verify',\n    ROOT = '/',\n}\n","import { B64EncryptionResult } from 'utils/crypto';\nimport CryptoWorker from 'utils/crypto';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport { getKey, SESSION_KEYS } from 'utils/storage/sessionStorage';\nimport { CustomError } from './errorUtil';\n\nexport const getActualKey = async () => {\n    try {\n        const encryptionKeyAttributes: B64EncryptionResult = getKey(\n            SESSION_KEYS.ENCRYPTION_KEY\n        );\n\n        const cryptoWorker = await new CryptoWorker();\n        const key: string = await cryptoWorker.decryptB64(\n            encryptionKeyAttributes.encryptedData,\n            encryptionKeyAttributes.nonce,\n            encryptionKeyAttributes.key\n        );\n        return key;\n    } catch (e) {\n        throw new Error(CustomError.KEY_MISSING);\n    }\n};\n\nexport const getStripePublishableKey = () =>\n    process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY ??\n    'pk_live_51HAhqDK59oeucIMOiTI6MDDM2UWUbCAJXJCGsvjJhiO8nYJz38rQq5T4iyQLDMKxqEDUfU5Hopuj4U5U4dff23oT00fHvZeodC';\n\nexport const getToken = () => getData(LS_KEYS.USER)?.token;\n","import { KEK } from 'pages/generate';\nimport { KeyAttributes } from 'types';\nimport * as Comlink from 'comlink';\nimport { runningInBrowser } from 'utils/common';\nimport { SESSION_KEYS, setKey } from 'utils/storage/sessionStorage';\nimport { getData, LS_KEYS, setData } from 'utils/storage/localStorage';\nimport { getActualKey, getToken } from 'utils/common/key';\nimport { setRecoveryKey } from 'services/userService';\nimport { logError } from 'utils/sentry';\n\nexport interface ComlinkWorker {\n    comlink: any;\n    worker: Worker;\n}\n\nexport interface B64EncryptionResult {\n    encryptedData: string;\n    key: string;\n    nonce: string;\n}\n\nexport const getDedicatedCryptoWorker = (): ComlinkWorker => {\n    if (runningInBrowser()) {\n        const worker = new Worker(\n            new URL('worker/crypto.worker.js', import.meta.url),\n            { name: 'ente-worker' }\n        );\n        const comlink = Comlink.wrap(worker);\n        return { comlink, worker };\n    }\n};\nconst CryptoWorker: any = getDedicatedCryptoWorker()?.comlink;\n\nexport async function generateKeyAttributes(\n    passphrase: string\n): Promise<{ keyAttributes: KeyAttributes; masterKey: string }> {\n    const cryptoWorker = await new CryptoWorker();\n    const masterKey: string = await cryptoWorker.generateEncryptionKey();\n    const recoveryKey: string = await cryptoWorker.generateEncryptionKey();\n    const kekSalt: string = await cryptoWorker.generateSaltToDeriveKey();\n    const kek = await cryptoWorker.deriveSensitiveKey(passphrase, kekSalt);\n\n    const masterKeyEncryptedWithKek: B64EncryptionResult =\n        await cryptoWorker.encryptToB64(masterKey, kek.key);\n    const masterKeyEncryptedWithRecoveryKey: B64EncryptionResult =\n        await cryptoWorker.encryptToB64(masterKey, recoveryKey);\n    const recoveryKeyEncryptedWithMasterKey: B64EncryptionResult =\n        await cryptoWorker.encryptToB64(recoveryKey, masterKey);\n\n    const keyPair = await cryptoWorker.generateKeyPair();\n    const encryptedKeyPairAttributes: B64EncryptionResult =\n        await cryptoWorker.encryptToB64(keyPair.privateKey, masterKey);\n\n    const keyAttributes: KeyAttributes = {\n        kekSalt,\n        encryptedKey: masterKeyEncryptedWithKek.encryptedData,\n        keyDecryptionNonce: masterKeyEncryptedWithKek.nonce,\n        publicKey: keyPair.publicKey,\n        encryptedSecretKey: encryptedKeyPairAttributes.encryptedData,\n        secretKeyDecryptionNonce: encryptedKeyPairAttributes.nonce,\n        opsLimit: kek.opsLimit,\n        memLimit: kek.memLimit,\n        masterKeyEncryptedWithRecoveryKey:\n            masterKeyEncryptedWithRecoveryKey.encryptedData,\n        masterKeyDecryptionNonce: masterKeyEncryptedWithRecoveryKey.nonce,\n        recoveryKeyEncryptedWithMasterKey:\n            recoveryKeyEncryptedWithMasterKey.encryptedData,\n        recoveryKeyDecryptionNonce: recoveryKeyEncryptedWithMasterKey.nonce,\n    };\n\n    return { keyAttributes, masterKey };\n}\n\nexport async function generateAndSaveIntermediateKeyAttributes(\n    passphrase,\n    existingKeyAttributes,\n    key\n): Promise<KeyAttributes> {\n    const cryptoWorker = await new CryptoWorker();\n    const intermediateKekSalt: string =\n        await cryptoWorker.generateSaltToDeriveKey();\n    const intermediateKek: KEK = await cryptoWorker.deriveIntermediateKey(\n        passphrase,\n        intermediateKekSalt\n    );\n    const encryptedKeyAttributes: B64EncryptionResult =\n        await cryptoWorker.encryptToB64(key, intermediateKek.key);\n\n    const intermediateKeyAttributes = Object.assign(existingKeyAttributes, {\n        kekSalt: intermediateKekSalt,\n        encryptedKey: encryptedKeyAttributes.encryptedData,\n        keyDecryptionNonce: encryptedKeyAttributes.nonce,\n        opsLimit: intermediateKek.opsLimit,\n        memLimit: intermediateKek.memLimit,\n    });\n    setData(LS_KEYS.KEY_ATTRIBUTES, intermediateKeyAttributes);\n    return intermediateKeyAttributes;\n}\n\nexport const SaveKeyInSessionStore = async (\n    keyType: SESSION_KEYS,\n    key: string\n) => {\n    const cryptoWorker = await new CryptoWorker();\n    const sessionKeyAttributes = await cryptoWorker.encryptToB64(key);\n    setKey(keyType, sessionKeyAttributes);\n};\n\nexport const getRecoveryKey = async () => {\n    let recoveryKey = null;\n    try {\n        const cryptoWorker = await new CryptoWorker();\n\n        const keyAttributes: KeyAttributes = getData(LS_KEYS.KEY_ATTRIBUTES);\n        const {\n            recoveryKeyEncryptedWithMasterKey,\n            recoveryKeyDecryptionNonce,\n        } = keyAttributes;\n        const masterKey = await getActualKey();\n        if (recoveryKeyEncryptedWithMasterKey) {\n            recoveryKey = await cryptoWorker.decryptB64(\n                recoveryKeyEncryptedWithMasterKey,\n                recoveryKeyDecryptionNonce,\n                masterKey\n            );\n        } else {\n            recoveryKey = await createNewRecoveryKey();\n        }\n        recoveryKey = await cryptoWorker.toHex(recoveryKey);\n        return recoveryKey;\n    } catch (e) {\n        logError(e, 'getRecoveryKey failed');\n    }\n};\n\nasync function createNewRecoveryKey() {\n    const masterKey = await getActualKey();\n    const existingAttributes = getData(LS_KEYS.KEY_ATTRIBUTES);\n\n    const cryptoWorker = await new CryptoWorker();\n\n    const recoveryKey = await cryptoWorker.generateEncryptionKey();\n    const encryptedMasterKey: B64EncryptionResult =\n        await cryptoWorker.encryptToB64(masterKey, recoveryKey);\n    const encryptedRecoveryKey: B64EncryptionResult =\n        await cryptoWorker.encryptToB64(recoveryKey, masterKey);\n    const recoveryKeyAttributes = {\n        masterKeyEncryptedWithRecoveryKey: encryptedMasterKey.encryptedData,\n        masterKeyDecryptionNonce: encryptedMasterKey.nonce,\n        recoveryKeyEncryptedWithMasterKey: encryptedRecoveryKey.encryptedData,\n        recoveryKeyDecryptionNonce: encryptedRecoveryKey.nonce,\n    };\n    await setRecoveryKey(getToken(), recoveryKeyAttributes);\n\n    const updatedKeyAttributes = Object.assign(\n        existingAttributes,\n        recoveryKeyAttributes\n    );\n    setData(LS_KEYS.KEY_ATTRIBUTES, updatedKeyAttributes);\n\n    return recoveryKey;\n}\nexport async function decryptAndStoreToken(masterKey: string) {\n    const cryptoWorker = await new CryptoWorker();\n    const user = getData(LS_KEYS.USER);\n    const keyAttributes = getData(LS_KEYS.KEY_ATTRIBUTES);\n    let decryptedToken = null;\n    const { encryptedToken } = user;\n    if (encryptedToken && encryptedToken.length > 0) {\n        const secretKey = await cryptoWorker.decryptB64(\n            keyAttributes.encryptedSecretKey,\n            keyAttributes.secretKeyDecryptionNonce,\n            masterKey\n        );\n        const URLUnsafeB64DecryptedToken = await cryptoWorker.boxSealOpen(\n            encryptedToken,\n            keyAttributes.publicKey,\n            secretKey\n        );\n        const decryptedTokenBytes = await cryptoWorker.fromB64(\n            URLUnsafeB64DecryptedToken\n        );\n        decryptedToken = await cryptoWorker.toURLSafeB64(decryptedTokenBytes);\n        setData(LS_KEYS.USER, {\n            ...user,\n            token: decryptedToken,\n            encryptedToken: null,\n        });\n    }\n}\n\nexport async function encryptWithRecoveryKey(key: string) {\n    const cryptoWorker = await new CryptoWorker();\n    const hexRecoveryKey = await getRecoveryKey();\n    const recoveryKey = await cryptoWorker.fromHex(hexRecoveryKey);\n    const encryptedKey: B64EncryptionResult = await cryptoWorker.encryptToB64(\n        key,\n        recoveryKey\n    );\n    return encryptedKey;\n}\nexport default CryptoWorker;\n","import { runningInBrowser } from 'utils/common';\n\nimport localForage from 'localforage';\n\nif (runningInBrowser()) {\n    localForage.config({\n        driver: localForage.INDEXEDDB,\n        name: 'ente-files',\n        version: 1.0,\n        storeName: 'files',\n    });\n}\nexport default localForage;\n","export enum SESSION_KEYS {\n    ENCRYPTION_KEY = 'encryptionKey',\n}\n\nexport const setKey = (key: SESSION_KEYS, value: object) => {\n    if (typeof sessionStorage === 'undefined') {\n        return null;\n    }\n    sessionStorage.setItem(key, JSON.stringify(value));\n};\n\nexport const getKey = (key: SESSION_KEYS) => {\n    if (typeof sessionStorage === 'undefined') {\n        return null;\n    }\n    return JSON.parse(sessionStorage.getItem(key));\n};\n\nexport const clearKeys = () => {\n    if (typeof sessionStorage === 'undefined') {\n        return null;\n    }\n    sessionStorage.clear();\n};\n"],"names":["loading","buttonText","inline","disabled","className","variant","type","block","style","padding","as","animation","width","height","borderWidth","color","ENDPOINT","getEndpoint","FIX_CREATION_TIME_VISIBLE_TO_USER_IDS","getOtt","email","HTTPService","client","getPublicKey","token","getToken","resp","data","publicKey","getPaymentToken","verifyOtt","ott","putAttributes","keyAttributes","setKeys","updatedKey","setRecoveryKey","recoveryKey","logoutUser","_logout","clearKeys","clearData","caches","clearFiles","router","PAGES","localForage","isTokenValid","undefined","Error","getData","LS_KEYS","logError","setupTwoFactor","enableTwoFactor","code","recoveryEncryptedTwoFactorSecret","encryptedTwoFactorSecret","encryptedData","twoFactorSecretDecryptionNonce","nonce","verifyTwoFactor","sessionID","recoverTwoFactor","removeTwoFactor","secret","disableTwoFactor","getTwoFactorStatus","getOTTForEmailChange","purpose","changeEmail","getUserDetails","ENCRYPTION_CHUNK_SIZE","GAP_BTW_TILES","DATE_CONTAINER_HEIGHT","IMAGE_CONTAINER_MAX_HEIGHT","IMAGE_CONTAINER_MAX_WIDTH","MIN_COLUMNS","SPACE_BTW_DATES","getActualKey","encryptionKeyAttributes","getKey","SESSION_KEYS","CryptoWorker","cryptoWorker","decryptB64","key","CustomError","getDedicatedCryptoWorker","runningInBrowser","worker","Worker","URL","name","comlink","Comlink","generateKeyAttributes","passphrase","generateEncryptionKey","masterKey","generateSaltToDeriveKey","kekSalt","deriveSensitiveKey","kek","encryptToB64","masterKeyEncryptedWithKek","masterKeyEncryptedWithRecoveryKey","recoveryKeyEncryptedWithMasterKey","generateKeyPair","keyPair","privateKey","encryptedKeyPairAttributes","encryptedKey","keyDecryptionNonce","encryptedSecretKey","secretKeyDecryptionNonce","opsLimit","memLimit","masterKeyDecryptionNonce","recoveryKeyDecryptionNonce","generateAndSaveIntermediateKeyAttributes","existingKeyAttributes","intermediateKekSalt","deriveIntermediateKey","intermediateKek","encryptedKeyAttributes","intermediateKeyAttributes","Object","assign","setData","SaveKeyInSessionStore","keyType","sessionKeyAttributes","setKey","getRecoveryKey","createNewRecoveryKey","toHex","existingAttributes","encryptedMasterKey","encryptedRecoveryKey","recoveryKeyAttributes","updatedKeyAttributes","decryptAndStoreToken","user","decryptedToken","encryptedToken","length","secretKey","boxSealOpen","URLUnsafeB64DecryptedToken","fromB64","decryptedTokenBytes","toURLSafeB64","encryptWithRecoveryKey","hexRecoveryKey","fromHex","driver","version","storeName","value","sessionStorage","setItem","JSON","stringify","parse","getItem","clear"],"sourceRoot":""}