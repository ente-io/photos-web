{"version":3,"file":"static/chunks/pages/index-7ccf66d1a06bfa1adbcd.js","mappings":"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","sources":["webpack://_N_E/./src/components/Login.tsx","webpack://_N_E/./src/components/LogoImg.tsx","webpack://_N_E/./src/components/MessageDialog.tsx","webpack://_N_E/./src/components/SignUp.tsx","webpack://_N_E/./src/components/IncognitoWarning.tsx","webpack://_N_E/./src/pages/index.tsx","webpack://_N_E/./src/utils/storage/index.ts","webpack://_N_E/"],"sourcesContent":["import Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport constants from 'utils/strings/constants';\nimport { Formik, FormikHelpers } from 'formik';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport * as Yup from 'yup';\nimport { getOtt } from 'services/userService';\nimport { setData, LS_KEYS, getData } from 'utils/storage/localStorage';\nimport SubmitButton from 'components/SubmitButton';\nimport Button from 'react-bootstrap/Button';\nimport LogoImg from './LogoImg';\nimport { PAGES } from 'types';\n\ninterface formValues {\n    email: string;\n}\n\ninterface LoginProps {\n    signUp: () => void;\n}\n\nexport default function Login(props: LoginProps) {\n    const router = useRouter();\n    const [waiting, setWaiting] = useState(false);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const main = async () => {\n            router.prefetch(PAGES.VERIFY);\n            const user = getData(LS_KEYS.USER);\n            if (user?.email) {\n                await router.push(PAGES.VERIFY);\n            }\n            setLoading(false);\n        };\n        main();\n    }, []);\n\n    const loginUser = async (\n        { email }: formValues,\n        { setFieldError }: FormikHelpers<formValues>\n    ) => {\n        try {\n            setWaiting(true);\n            await getOtt(email);\n            setData(LS_KEYS.USER, { email });\n            router.push(PAGES.VERIFY);\n        } catch (e) {\n            setFieldError('email', `${constants.UNKNOWN_ERROR} ${e.message}`);\n        }\n        setWaiting(false);\n    };\n    const inputElement = useRef(null);\n    useEffect(() => {\n        setTimeout(() => {\n            inputElement.current?.focus();\n        }, 250);\n    }, []);\n\n    return (\n        <>\n            <Card.Title style={{ marginBottom: '32px' }}>\n                <LogoImg src=\"/icon.svg\" />\n                {constants.LOGIN}\n            </Card.Title>\n            <Formik<formValues>\n                initialValues={{ email: '' }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .email(constants.EMAIL_ERROR)\n                        .required(constants.REQUIRED),\n                })}\n                validateOnChange={false}\n                validateOnBlur={false}\n                onSubmit={loginUser}>\n                {({ values, errors, touched, handleChange, handleSubmit }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Control\n                                ref={inputElement}\n                                type=\"email\"\n                                placeholder={constants.ENTER_EMAIL}\n                                value={values.email}\n                                onChange={handleChange('email')}\n                                isInvalid={Boolean(\n                                    touched.email && errors.email\n                                )}\n                                autoFocus\n                                disabled={loading}\n                            />\n                            <FormControl.Feedback type=\"invalid\">\n                                {errors.email}\n                            </FormControl.Feedback>\n                        </Form.Group>\n                        <SubmitButton\n                            buttonText={constants.LOGIN}\n                            loading={waiting}\n                        />\n                        <br />\n                        <Button\n                            block\n                            variant=\"link\"\n                            className=\"text-center\"\n                            onClick={props.signUp}>\n                            {constants.NO_ACCOUNT}\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n}\n","import styled from 'styled-components';\n\nexport default styled.img`\n    height: 25px;\n    vertical-align: bottom;\n    padding-right: 15px;\n    border-right: 2px solid #aaa;\n    margin-right: 15px;\n`;\n","import React from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport constants from 'utils/strings/constants';\n\nexport interface MessageAttributes {\n    title?: string;\n    staticBackdrop?: boolean;\n    nonClosable?: boolean;\n    content?: any;\n    close?: { text?: string; variant?: string; action?: () => void };\n    proceed?: {\n        text: string;\n        action: () => void;\n        variant: string;\n        disabled?: boolean;\n    };\n}\n\nexport type SetDialogMessage = React.Dispatch<\n    React.SetStateAction<MessageAttributes>\n>;\ntype Props = React.PropsWithChildren<{\n    show: boolean;\n    onHide: () => void;\n    attributes: MessageAttributes;\n    size?: 'sm' | 'lg' | 'xl';\n}>;\nexport default function MessageDialog({\n    attributes,\n    children,\n    ...props\n}: Props) {\n    if (!attributes) {\n        return <Modal />;\n    }\n    return (\n        <Modal\n            {...props}\n            onHide={attributes.nonClosable ? () => null : props.onHide}\n            centered\n            backdrop={attributes.staticBackdrop ? 'static' : true}>\n            <Modal.Header\n                style={{ borderBottom: 'none' }}\n                closeButton={!attributes.nonClosable}>\n                {attributes.title && (\n                    <Modal.Title>{attributes.title}</Modal.Title>\n                )}\n            </Modal.Header>\n            {(children || attributes?.content) && (\n                <Modal.Body style={{ borderTop: '1px solid #444' }}>\n                    {children || (\n                        <p style={{ fontSize: '1.25rem', marginBottom: 0 }}>\n                            {attributes.content}\n                        </p>\n                    )}\n                </Modal.Body>\n            )}\n            {(attributes.close || attributes.proceed) && (\n                <Modal.Footer style={{ borderTop: 'none' }}>\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                        }}>\n                        {attributes.close && (\n                            <Button\n                                variant={`outline-${\n                                    attributes.close?.variant ?? 'secondary'\n                                }`}\n                                onClick={() => {\n                                    attributes.close.action &&\n                                        attributes.close?.action();\n                                    props.onHide();\n                                }}\n                                style={{\n                                    padding: '6px 3em',\n                                    margin: '0 20px',\n                                    marginBottom: '20px',\n                                    flex: 1,\n                                    whiteSpace: 'nowrap',\n                                }}>\n                                {attributes.close?.text ?? constants.OK}\n                            </Button>\n                        )}\n                        {attributes.proceed && (\n                            <Button\n                                variant={`outline-${\n                                    attributes.proceed?.variant ?? 'primary'\n                                }`}\n                                onClick={() => {\n                                    attributes.proceed.action();\n                                    props.onHide();\n                                }}\n                                style={{\n                                    padding: '6px 3em',\n                                    margin: '0 20px',\n                                    marginBottom: '20px',\n                                    flex: 1,\n                                    whiteSpace: 'nowrap',\n                                }}\n                                disabled={attributes.proceed.disabled}>\n                                {attributes.proceed.text}\n                            </Button>\n                        )}\n                    </div>\n                </Modal.Footer>\n            )}\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport constants from 'utils/strings/constants';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport { getOtt } from 'services/userService';\nimport Card from 'react-bootstrap/Card';\nimport { setData, LS_KEYS } from 'utils/storage/localStorage';\nimport { useRouter } from 'next/router';\nimport SubmitButton from 'components/SubmitButton';\nimport { Button } from 'react-bootstrap';\nimport {\n    generateAndSaveIntermediateKeyAttributes,\n    generateKeyAttributes,\n    SaveKeyInSessionStore,\n} from 'utils/crypto';\nimport { setJustSignedUp } from 'utils/storage';\nimport LogoImg from './LogoImg';\nimport { logError } from 'utils/sentry';\nimport { SESSION_KEYS } from 'utils/storage/sessionStorage';\nimport { PAGES } from 'types';\n\ninterface FormValues {\n    email: string;\n    passphrase: string;\n    confirm: string;\n}\n\ninterface SignUpProps {\n    login: () => void;\n}\n\nexport default function SignUp(props: SignUpProps) {\n    const router = useRouter();\n    const [acceptTerms, setAcceptTerms] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const registerUser = async (\n        { email, passphrase, confirm }: FormValues,\n        { setFieldError }: FormikHelpers<FormValues>\n    ) => {\n        setLoading(true);\n        try {\n            try {\n                setData(LS_KEYS.USER, { email });\n                await getOtt(email);\n            } catch (e) {\n                setFieldError(\n                    'confirm',\n                    `${constants.UNKNOWN_ERROR} ${e.message}`\n                );\n                throw e;\n            }\n            try {\n                if (passphrase === confirm) {\n                    const { keyAttributes, masterKey } =\n                        await generateKeyAttributes(passphrase);\n                    setData(LS_KEYS.ORIGINAL_KEY_ATTRIBUTES, keyAttributes);\n                    await generateAndSaveIntermediateKeyAttributes(\n                        passphrase,\n                        keyAttributes,\n                        masterKey\n                    );\n\n                    await SaveKeyInSessionStore(\n                        SESSION_KEYS.ENCRYPTION_KEY,\n                        masterKey\n                    );\n                    setJustSignedUp(true);\n                    router.push(PAGES.VERIFY);\n                } else {\n                    setFieldError('confirm', constants.PASSPHRASE_MATCH_ERROR);\n                }\n            } catch (e) {\n                setFieldError(\n                    'passphrase',\n                    constants.PASSWORD_GENERATION_FAILED\n                );\n                throw e;\n            }\n        } catch (err) {\n            logError(err, 'signup failed');\n        }\n        setLoading(false);\n    };\n\n    return (\n        <>\n            <Card.Title style={{ marginBottom: '32px' }}>\n                <LogoImg src=\"/icon.svg\" />\n                {constants.SIGN_UP}\n            </Card.Title>\n            <Formik<FormValues>\n                initialValues={{\n                    email: '',\n                    passphrase: '',\n                    confirm: '',\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .email(constants.EMAIL_ERROR)\n                        .required(constants.REQUIRED),\n                    passphrase: Yup.string().required(constants.REQUIRED),\n                    confirm: Yup.string().required(constants.REQUIRED),\n                })}\n                validateOnChange={false}\n                validateOnBlur={false}\n                onSubmit={registerUser}>\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleSubmit,\n                }): JSX.Element => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group controlId=\"registrationForm.email\">\n                            <Form.Control\n                                type=\"email\"\n                                placeholder={constants.ENTER_EMAIL}\n                                value={values.email}\n                                onChange={handleChange('email')}\n                                isInvalid={Boolean(\n                                    touched.email && errors.email\n                                )}\n                                autoFocus\n                                disabled={loading}\n                            />\n                            <FormControl.Feedback type=\"invalid\">\n                                {errors.email}\n                            </FormControl.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder={constants.PASSPHRASE_HINT}\n                                value={values.passphrase}\n                                onChange={handleChange('passphrase')}\n                                isInvalid={Boolean(\n                                    touched.passphrase && errors.passphrase\n                                )}\n                                disabled={loading}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {errors.passphrase}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder={constants.RE_ENTER_PASSPHRASE}\n                                value={values.confirm}\n                                onChange={handleChange('confirm')}\n                                isInvalid={Boolean(\n                                    touched.confirm && errors.confirm\n                                )}\n                                disabled={loading}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {errors.confirm}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group\n                            style={{\n                                marginBottom: '0',\n                                textAlign: 'left',\n                            }}\n                            controlId=\"formBasicCheckbox-1\">\n                            <Form.Check\n                                checked={acceptTerms}\n                                onChange={(e) =>\n                                    setAcceptTerms(e.target.checked)\n                                }\n                                type=\"checkbox\"\n                                label={constants.TERMS_AND_CONDITIONS()}\n                            />\n                        </Form.Group>\n                        <br />\n                        <SubmitButton\n                            buttonText={constants.SUBMIT}\n                            loading={loading}\n                            disabled={!acceptTerms}\n                        />\n                        <br />\n                        <Button block variant=\"link\" onClick={props.login}>\n                            {constants.ACCOUNT_EXISTS}\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n}\n","import React from 'react';\nimport constants from 'utils/strings/constants';\nimport MessageDialog from './MessageDialog';\n\nexport default function IncognitoWarning() {\n    return (\n        <MessageDialog\n            show={true}\n            onHide={() => null}\n            attributes={{\n                title: constants.LOCAL_STORAGE_NOT_ACCESSIBLE,\n                staticBackdrop: true,\n                nonClosable: true,\n            }}>\n            <div>{constants.LOCAL_STORAGE_NOT_ACCESSIBLE_MESSAGE}</div>\n        </MessageDialog>\n    );\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\nimport Button from 'react-bootstrap/Button';\nimport styled from 'styled-components';\nimport { AppContext } from './_app';\nimport Login from 'components/Login';\nimport { useRouter } from 'next/router';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport EnteSpinner from 'components/EnteSpinner';\nimport SignUp from 'components/SignUp';\nimport constants from 'utils/strings/constants';\nimport localForage from 'utils/storage/localForage';\nimport IncognitoWarning from 'components/IncognitoWarning';\nimport { logError } from 'utils/sentry';\nimport { PAGES } from 'types';\n\nconst Container = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    justify-content: center;\n    background-color: #000;\n\n    @media (max-width: 1024px) {\n        flex-direction: column;\n    }\n`;\n\nconst SlideContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n\n    @media (max-width: 1024px) {\n        flex-grow: 0;\n    }\n`;\n\nconst DesktopBox = styled.div`\n    flex: 1;\n    height: 100%;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #242424;\n\n    @media (max-width: 1024px) {\n        display: none;\n    }\n`;\n\nconst MobileBox = styled.div`\n    display: none;\n\n    @media (max-width: 1024px) {\n        display: flex;\n        flex-direction: column;\n        padding: 40px 10px;\n    }\n`;\n\nconst SideBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    min-width: 320px;\n`;\n\nconst TextContainer = styled.div`\n    padding: 20px;\n    max-width: 300px;\n    margin: 0 auto;\n`;\n\nconst UpperText = styled(TextContainer)`\n    font-size: 24px;\n    max-width: 100%;\n    margin-bottom: 20px;\n`;\n\nconst FeatureText = styled.div`\n    color: #51cd7c;\n    font-weight: bold;\n    padding-top: 20px;\n    font-size: 24px;\n`;\n\nconst Img = styled.img`\n    height: 250px;\n    object-fit: contain;\n\n    @media (max-width: 400px) {\n        height: 180px;\n    }\n`;\n\nexport default function LandingPage() {\n    const router = useRouter();\n    const appContext = useContext(AppContext);\n    const [loading, setLoading] = useState(true);\n    const [showLogin, setShowLogin] = useState(true);\n    const [blockUsage, setBlockUsage] = useState(false);\n    useEffect(() => {\n        const main = async () => {\n            const user = getData(LS_KEYS.USER);\n            if (user?.email) {\n                await router.push(PAGES.VERIFY);\n            }\n            try {\n                await localForage.ready();\n            } catch (e) {\n                logError(e, 'usage in incognito mode tried');\n                setBlockUsage(true);\n            }\n            setLoading(false);\n        };\n        main();\n        appContext.showNavBar(false);\n    }, []);\n\n    const signUp = () => setShowLogin(false);\n    const login = () => setShowLogin(true);\n\n    return (\n        <Container>\n            {loading ? (\n                <EnteSpinner />\n            ) : (\n                <>\n                    <SlideContainer>\n                        <UpperText>{constants.HERO_HEADER()}</UpperText>\n                        <Carousel controls={false}>\n                            <Carousel.Item>\n                                <Img src=\"/images/slide-1.png\" />\n                                <FeatureText>\n                                    {constants.HERO_SLIDE_1_TITLE}\n                                </FeatureText>\n                                <TextContainer>\n                                    {constants.HERO_SLIDE_1}\n                                </TextContainer>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <Img src=\"/images/slide-2.png\" />\n                                <FeatureText>\n                                    {constants.HERO_SLIDE_2_TITLE}\n                                </FeatureText>\n                                <TextContainer>\n                                    {constants.HERO_SLIDE_2}\n                                </TextContainer>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <Img src=\"/images/slide-3.png\" />\n                                <FeatureText>\n                                    {constants.HERO_SLIDE_3_TITLE}\n                                </FeatureText>\n                                <TextContainer>\n                                    {constants.HERO_SLIDE_3}\n                                </TextContainer>\n                            </Carousel.Item>\n                        </Carousel>\n                    </SlideContainer>\n                    <MobileBox>\n                        <Button\n                            variant=\"outline-success\"\n                            size=\"lg\"\n                            style={{ padding: '10px 50px' }}\n                            onClick={() => router.push(PAGES.SIGNUP)}>\n                            {constants.SIGN_UP}\n                        </Button>\n                        <br />\n                        <Button\n                            variant=\"link\"\n                            size=\"lg\"\n                            style={{ color: '#fff', padding: '10px 50px' }}\n                            onClick={() => router.push(PAGES.LOGIN)}>\n                            {constants.LOGIN}\n                        </Button>\n                    </MobileBox>\n                    <DesktopBox>\n                        <SideBox>\n                            {showLogin ? (\n                                <Login signUp={signUp} />\n                            ) : (\n                                <SignUp login={login} />\n                            )}\n                        </SideBox>\n                    </DesktopBox>\n                    {blockUsage && <IncognitoWarning />}\n                </>\n            )}\n        </Container>\n    );\n}\n","import { getData, LS_KEYS, setData } from './localStorage';\n\nexport const isFirstLogin = () =>\n    getData(LS_KEYS.IS_FIRST_LOGIN)?.status ?? false;\n\nexport function setIsFirstLogin(status) {\n    setData(LS_KEYS.IS_FIRST_LOGIN, { status });\n}\n\nexport const justSignedUp = () =>\n    getData(LS_KEYS.JUST_SIGNED_UP)?.status ?? false;\n\nexport function setJustSignedUp(status) {\n    setData(LS_KEYS.JUST_SIGNED_UP, { status });\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n  "],"names":["Login","props","router","useRouter","useState","waiting","setWaiting","loading","setLoading","useEffect","prefetch","PAGES","user","getData","LS_KEYS","email","push","main","loginUser","setFieldError","getOtt","setData","constants","message","inputElement","useRef","setTimeout","current","focus","style","marginBottom","src","initialValues","validationSchema","Yup","shape","required","validateOnChange","validateOnBlur","onSubmit","values","errors","touched","handleChange","handleSubmit","noValidate","controlId","ref","type","placeholder","value","onChange","isInvalid","Boolean","autoFocus","disabled","buttonText","block","variant","className","onClick","signUp","styled","MessageDialog","attributes","children","onHide","nonClosable","centered","backdrop","staticBackdrop","borderBottom","closeButton","title","content","borderTop","fontSize","close","proceed","display","flexWrap","action","padding","margin","flex","whiteSpace","text","SignUp","acceptTerms","setAcceptTerms","registerUser","passphrase","confirm","generateKeyAttributes","keyAttributes","masterKey","generateAndSaveIntermediateKeyAttributes","SaveKeyInSessionStore","SESSION_KEYS","setJustSignedUp","logError","textAlign","checked","e","target","label","login","IncognitoWarning","show","Container","SlideContainer","DesktopBox","MobileBox","SideBox","TextContainer","UpperText","FeatureText","Img","LandingPage","appContext","useContext","AppContext","showLogin","setShowLogin","blockUsage","setBlockUsage","localForage","showNavBar","EnteSpinner","Carousel","controls","Button","size","color","isFirstLogin","status","setIsFirstLogin","justSignedUp","window","__NEXT_P"],"sourceRoot":""}