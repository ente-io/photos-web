{"version":3,"file":"static/chunks/pages/verify-f24002f122eec9e54d42.js","mappings":"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","sources":["webpack://_N_E/./src/components/LogoImg.tsx","webpack://_N_E/./src/pages/verify/index.tsx","webpack://_N_E/./src/utils/storage/index.ts","webpack://_N_E/?52ab"],"sourcesContent":["import styled from 'styled-components';\n\nexport default styled.img`\n    height: 25px;\n    vertical-align: bottom;\n    padding-right: 15px;\n    border-right: 2px solid #aaa;\n    margin-right: 15px;\n`;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Container from 'components/Container';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport constants from 'utils/strings/constants';\nimport { LS_KEYS, getData, setData } from 'utils/storage/localStorage';\nimport { useRouter } from 'next/router';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport {\n    verifyOtt,\n    getOtt,\n    logoutUser,\n    clearFiles,\n    EmailVerificationResponse,\n    User,\n    putAttributes,\n} from 'services/userService';\nimport { setIsFirstLogin } from 'utils/storage';\nimport SubmitButton from 'components/SubmitButton';\nimport { clearKeys } from 'utils/storage/sessionStorage';\nimport { AppContext } from 'pages/_app';\nimport LogoImg from 'components/LogoImg';\nimport { KeyAttributes, PAGES } from 'types';\n\ninterface formValues {\n    ott: string;\n}\n\nexport default function Verify() {\n    const [email, setEmail] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [resend, setResend] = useState(0);\n    const router = useRouter();\n    const appContext = useContext(AppContext);\n\n    useEffect(() => {\n        const main = async () => {\n            router.prefetch(PAGES.TWO_FACTOR_VERIFY);\n            router.prefetch(PAGES.CREDENTIALS);\n            router.prefetch(PAGES.GENERATE);\n            const user: User = getData(LS_KEYS.USER);\n            const keyAttributes: KeyAttributes = getData(\n                LS_KEYS.KEY_ATTRIBUTES\n            );\n            if (!user?.email) {\n                router.push(PAGES.ROOT);\n            } else if (\n                keyAttributes?.encryptedKey &&\n                (user.token || user.encryptedToken)\n            ) {\n                router.push(PAGES.CREDENTIALS);\n            } else {\n                setEmail(user.email);\n            }\n        };\n        main();\n        appContext.showNavBar(false);\n    }, []);\n\n    const onSubmit = async (\n        { ott }: formValues,\n        { setFieldError }: FormikHelpers<formValues>\n    ) => {\n        try {\n            setLoading(true);\n            const resp = await verifyOtt(email, ott);\n            const {\n                keyAttributes,\n                encryptedToken,\n                token,\n                id,\n                twoFactorSessionID,\n            } = resp.data as EmailVerificationResponse;\n            if (twoFactorSessionID) {\n                setData(LS_KEYS.USER, {\n                    email,\n                    twoFactorSessionID,\n                    isTwoFactorEnabled: true,\n                });\n                setIsFirstLogin(true);\n                router.push(PAGES.TWO_FACTOR_VERIFY);\n            } else {\n                setData(LS_KEYS.USER, {\n                    email,\n                    token,\n                    encryptedToken,\n                    id,\n                    isTwoFactorEnabled: false,\n                });\n                if (keyAttributes) {\n                    setData(LS_KEYS.KEY_ATTRIBUTES, keyAttributes);\n                    setData(LS_KEYS.ORIGINAL_KEY_ATTRIBUTES, keyAttributes);\n                } else if (getData(LS_KEYS.ORIGINAL_KEY_ATTRIBUTES)) {\n                    await putAttributes(\n                        token,\n                        getData(LS_KEYS.ORIGINAL_KEY_ATTRIBUTES)\n                    );\n                }\n                clearFiles();\n                setIsFirstLogin(true);\n                if (keyAttributes?.encryptedKey) {\n                    clearKeys();\n                    router.push(PAGES.CREDENTIALS);\n                } else {\n                    router.push(PAGES.GENERATE);\n                }\n            }\n        } catch (e) {\n            if (e?.status === 401) {\n                setFieldError('ott', constants.INVALID_CODE);\n            } else if (e?.status === 410) {\n                setFieldError('ott', constants.EXPIRED_CODE);\n            } else {\n                setFieldError('ott', `${constants.UNKNOWN_ERROR} ${e.message}`);\n            }\n        }\n        setLoading(false);\n    };\n\n    const resendEmail = async () => {\n        setResend(1);\n        await getOtt(email);\n        setResend(2);\n        setTimeout(() => setResend(0), 3000);\n    };\n\n    if (!email) {\n        return null;\n    }\n\n    return (\n        <Container>\n            <Card style={{ minWidth: '300px' }} className=\"text-center\">\n                <Card.Body style={{ padding: '40px 30px' }}>\n                    <Card.Title style={{ marginBottom: '32px' }}>\n                        <LogoImg src=\"/icon.svg\" />\n                        {constants.VERIFY_EMAIL}\n                    </Card.Title>\n                    {constants.EMAIL_SENT({ email })}\n                    {constants.CHECK_INBOX}\n                    <br />\n                    <br />\n                    <Formik<formValues>\n                        initialValues={{ ott: '' }}\n                        validationSchema={Yup.object().shape({\n                            ott: Yup.string().required(constants.REQUIRED),\n                        })}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        onSubmit={onSubmit}>\n                        {({\n                            values,\n                            touched,\n                            errors,\n                            handleChange,\n                            handleSubmit,\n                        }) => (\n                            <Form noValidate onSubmit={handleSubmit}>\n                                <Form.Group>\n                                    <Form.Control\n                                        className=\"text-center\"\n                                        type=\"text\"\n                                        value={values.ott}\n                                        onChange={handleChange('ott')}\n                                        isInvalid={Boolean(\n                                            touched.ott && errors.ott\n                                        )}\n                                        placeholder={constants.ENTER_OTT}\n                                        disabled={loading}\n                                        autoFocus\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.ott}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <SubmitButton\n                                    buttonText={constants.VERIFY}\n                                    loading={loading}\n                                />\n                                <div style={{ marginTop: '24px' }}>\n                                    {resend === 0 && (\n                                        <a href=\"#\" onClick={resendEmail}>\n                                            {constants.RESEND_MAIL}\n                                        </a>\n                                    )}\n                                    {resend === 1 && (\n                                        <span>{constants.SENDING}</span>\n                                    )}\n                                    {resend === 2 && (\n                                        <span>{constants.SENT}</span>\n                                    )}\n                                    <div style={{ marginTop: '8px' }}>\n                                        <a href=\"#\" onClick={logoutUser}>\n                                            {constants.CHANGE_EMAIL}\n                                        </a>\n                                    </div>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n                </Card.Body>\n            </Card>\n        </Container>\n    );\n}\n","import { getData, LS_KEYS, setData } from './localStorage';\n\nexport const isFirstLogin = () =>\n    getData(LS_KEYS.IS_FIRST_LOGIN)?.status ?? false;\n\nexport function setIsFirstLogin(status) {\n    setData(LS_KEYS.IS_FIRST_LOGIN, { status });\n}\n\nexport const justSignedUp = () =>\n    getData(LS_KEYS.JUST_SIGNED_UP)?.status ?? false;\n\nexport function setJustSignedUp(status) {\n    setData(LS_KEYS.JUST_SIGNED_UP, { status });\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/verify\",\n      function () {\n        return require(\"private-next-pages/verify/index.tsx\");\n      }\n    ]);\n  "],"names":["styled","Verify","useState","email","setEmail","loading","setLoading","resend","setResend","router","useRouter","appContext","useContext","AppContext","useEffect","prefetch","PAGES","user","getData","LS_KEYS","keyAttributes","encryptedKey","token","encryptedToken","push","main","showNavBar","onSubmit","ott","setFieldError","verifyOtt","resp","data","id","twoFactorSessionID","setData","isTwoFactorEnabled","setIsFirstLogin","putAttributes","clearFiles","clearKeys","status","constants","message","resendEmail","getOtt","setTimeout","style","minWidth","className","padding","marginBottom","src","initialValues","validationSchema","Yup","shape","required","validateOnChange","validateOnBlur","values","touched","errors","handleChange","handleSubmit","noValidate","type","value","onChange","isInvalid","Boolean","placeholder","disabled","autoFocus","buttonText","marginTop","href","onClick","logoutUser","isFirstLogin","justSignedUp","setJustSignedUp","window","__NEXT_P"],"sourceRoot":""}