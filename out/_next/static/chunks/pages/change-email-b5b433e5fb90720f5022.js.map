{"version":3,"file":"static/chunks/pages/change-email-b5b433e5fb90720f5022.js","mappings":"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","sources":["webpack://_N_E/./src/components/LogoImg.tsx","webpack://_N_E/./src/components/ChangeEmail.tsx","webpack://_N_E/./src/components/EnteCard.tsx","webpack://_N_E/./src/pages/change-email/index.tsx","webpack://_N_E/?12cb"],"sourcesContent":["import styled from 'styled-components';\n\nexport default styled.img`\n    height: 25px;\n    vertical-align: bottom;\n    padding-right: 15px;\n    border-right: 2px solid #aaa;\n    margin-right: 15px;\n`;\n","import { Formik, FormikHelpers } from 'formik';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Button, Col, Form, FormControl } from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport constants from 'utils/strings/constants';\nimport SubmitButton from 'components/SubmitButton';\nimport router from 'next/router';\nimport { changeEmail, getOTTForEmailChange } from 'services/userService';\nimport styled from 'styled-components';\nimport { AppContext, FLASH_MESSAGE_TYPE } from 'pages/_app';\nimport { getData, LS_KEYS, setData } from 'utils/storage/localStorage';\nimport { PAGES } from 'types';\n\ninterface formValues {\n    email: string;\n    ott?: string;\n}\n\nconst EmailRow = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    border: 1px solid grey;\n    margin-bottom: 19px;\n    align-items: center;\n    text-align: left;\n    color: #fff;\n`;\n\ninterface Props {\n    showMessage: (value: boolean) => void;\n    setEmail: (email: string) => void;\n}\nfunction ChangeEmailForm(props: Props) {\n    const [loading, setLoading] = useState(false);\n    const [ottInputVisible, setShowOttInputVisibility] = useState(false);\n    const emailInputElement = useRef(null);\n    const ottInputRef = useRef(null);\n    const appContext = useContext(AppContext);\n\n    useEffect(() => {\n        setTimeout(() => {\n            emailInputElement.current?.focus();\n        }, 250);\n    }, []);\n\n    useEffect(() => {\n        if (!ottInputVisible) {\n            props.showMessage(false);\n        }\n    }, [ottInputVisible]);\n\n    const requestOTT = async (\n        { email }: formValues,\n        { setFieldError }: FormikHelpers<formValues>\n    ) => {\n        try {\n            setLoading(true);\n            await getOTTForEmailChange(email);\n            props.setEmail(email);\n            setShowOttInputVisibility(true);\n            props.showMessage(true);\n            setTimeout(() => {\n                ottInputRef.current?.focus();\n            }, 250);\n        } catch (e) {\n            setFieldError('email', `${constants.EMAIl_ALREADY_OWNED}`);\n        }\n        setLoading(false);\n    };\n\n    const requestEmailChange = async (\n        { email, ott }: formValues,\n        { setFieldError }: FormikHelpers<formValues>\n    ) => {\n        try {\n            setLoading(true);\n            await changeEmail(email, ott);\n            setData(LS_KEYS.USER, { ...getData(LS_KEYS.USER), email });\n            appContext.setDisappearingFlashMessage({\n                message: constants.EMAIL_UDPATE_SUCCESSFUL,\n                type: FLASH_MESSAGE_TYPE.SUCCESS,\n            });\n            router.push(PAGES.GALLERY);\n        } catch (e) {\n            setFieldError('ott', `${constants.INCORRECT_CODE}`);\n        }\n        setLoading(false);\n    };\n\n    return (\n        <Formik<formValues>\n            initialValues={{ email: '' }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email(constants.EMAIL_ERROR)\n                    .required(constants.REQUIRED),\n            })}\n            validateOnChange={false}\n            validateOnBlur={false}\n            onSubmit={!ottInputVisible ? requestOTT : requestEmailChange}>\n            {({ values, errors, touched, handleChange, handleSubmit }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    {!ottInputVisible ? (\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Control\n                                ref={emailInputElement}\n                                type=\"email\"\n                                placeholder={constants.ENTER_EMAIL}\n                                value={values.email}\n                                onChange={handleChange('email')}\n                                isInvalid={Boolean(\n                                    touched.email && errors.email\n                                )}\n                                autoFocus\n                                disabled={loading}\n                            />\n                            <FormControl.Feedback type=\"invalid\">\n                                {errors.email}\n                            </FormControl.Feedback>\n                        </Form.Group>\n                    ) : (\n                        <>\n                            <EmailRow>\n                                <Col xs=\"8\">{values.email}</Col>\n                                <Col xs=\"4\">\n                                    <Button\n                                        variant=\"link\"\n                                        onClick={() =>\n                                            setShowOttInputVisibility(false)\n                                        }>\n                                        {constants.CHANGE}\n                                    </Button>\n                                </Col>\n                            </EmailRow>\n                            <Form.Group controlId=\"formBasicEmail\">\n                                <Form.Control\n                                    ref={ottInputRef}\n                                    type=\"text\"\n                                    placeholder={constants.ENTER_OTT}\n                                    value={values.ott}\n                                    onChange={handleChange('ott')}\n                                    isInvalid={Boolean(\n                                        touched.ott && errors.ott\n                                    )}\n                                    disabled={loading}\n                                />\n                                <FormControl.Feedback type=\"invalid\">\n                                    {errors.ott}\n                                </FormControl.Feedback>\n                            </Form.Group>\n                        </>\n                    )}\n\n                    <SubmitButton\n                        buttonText={\n                            !ottInputVisible\n                                ? constants.SEND_OTT\n                                : constants.VERIFY\n                        }\n                        loading={loading}\n                    />\n                    <br />\n                    <Button\n                        block\n                        variant=\"link\"\n                        className=\"text-center\"\n                        onClick={router.back}>\n                        {constants.GO_BACK}\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n}\n\nexport default ChangeEmailForm;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\ntype Size = 'sm' | 'md' | 'lg';\n\nconst EnteCard = ({\n    size,\n    children,\n    style,\n}: {\n    size: Size;\n    children?: any;\n    style?: any;\n}) => {\n    let minWidth: string;\n    let padding: string;\n    switch (size) {\n        case 'sm':\n            minWidth = '320px';\n            padding = '0px';\n            break;\n        case 'md':\n            minWidth = '460px';\n            padding = '10px';\n            break;\n\n        default:\n            minWidth = '480px';\n            padding = '10px';\n            break;\n    }\n    return (\n        <Card style={{ minWidth, padding, ...style }} className=\"text-center\">\n            {children}\n        </Card>\n    );\n};\n\nexport default EnteCard;\n","import Container from 'components/Container';\nimport LogoImg from 'components/LogoImg';\nimport React, { useEffect, useState } from 'react';\nimport { Alert, Card } from 'react-bootstrap';\nimport constants from 'utils/strings/constants';\nimport router from 'next/router';\nimport { getToken } from 'utils/common/key';\nimport EnteSpinner from 'components/EnteSpinner';\nimport ChangeEmailForm from 'components/ChangeEmail';\nimport EnteCard from 'components/EnteCard';\nimport { PAGES } from 'types';\n\nfunction ChangeEmailPage() {\n    const [email, setEmail] = useState('');\n    const [waiting, setWaiting] = useState(true);\n    const [showMessage, setShowMessage] = useState(false);\n    const [showBigDialog, setShowBigDialog] = useState(false);\n\n    useEffect(() => {\n        const token = getToken();\n        if (!token) {\n            router.push(PAGES.ROOT);\n            return;\n        }\n        setWaiting(false);\n    }, []);\n\n    return (\n        <Container>\n            {waiting ? (\n                <EnteSpinner>\n                    <span className=\"sr-only\">Loading...</span>\n                </EnteSpinner>\n            ) : (\n                <EnteCard size={showBigDialog ? 'md' : 'sm'}>\n                    <Card.Body style={{ padding: '40px 30px' }}>\n                        <Card.Title style={{ marginBottom: '32px' }}>\n                            <LogoImg src=\"/icon.svg\" />\n                            {constants.UPDATE_EMAIL}\n                        </Card.Title>\n                        <Alert\n                            variant=\"success\"\n                            show={showMessage}\n                            style={{ paddingBottom: 0 }}\n                            transition\n                            dismissible\n                            onClose={() => setShowMessage(false)}>\n                            {constants.EMAIL_SENT({ email })}\n                        </Alert>\n                        <ChangeEmailForm\n                            showMessage={(value) => {\n                                setShowMessage(value);\n                                setShowBigDialog(value);\n                            }}\n                            setEmail={setEmail}\n                        />\n                    </Card.Body>\n                </EnteCard>\n            )}\n        </Container>\n    );\n}\n\nexport default ChangeEmailPage;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/change-email\",\n      function () {\n        return require(\"private-next-pages/change-email/index.tsx\");\n      }\n    ]);\n  "],"names":["styled","EmailRow","props","useState","loading","setLoading","ottInputVisible","setShowOttInputVisibility","emailInputElement","useRef","ottInputRef","appContext","useContext","AppContext","useEffect","setTimeout","current","focus","showMessage","requestOTT","email","setFieldError","getOTTForEmailChange","setEmail","constants","requestEmailChange","ott","changeEmail","setData","LS_KEYS","getData","setDisappearingFlashMessage","message","type","FLASH_MESSAGE_TYPE","router","PAGES","initialValues","validationSchema","Yup","shape","required","validateOnChange","validateOnBlur","onSubmit","values","errors","touched","handleChange","handleSubmit","Form","noValidate","Col","xs","Button","variant","onClick","controlId","ref","placeholder","value","onChange","isInvalid","Boolean","disabled","FormControl","autoFocus","SubmitButton","buttonText","block","className","minWidth","padding","size","children","style","Card","waiting","setWaiting","setShowMessage","showBigDialog","setShowBigDialog","getToken","Container","EnteSpinner","marginBottom","LogoImg","src","Alert","show","paddingBottom","transition","dismissible","onClose","ChangeEmail","window","__NEXT_P","push"],"sourceRoot":""}