{"version":3,"file":"static/chunks/pages/credentials-848d1549ac6c5a4e6a4a.js","mappings":"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","sources":["webpack://_N_E/./src/components/LogoImg.tsx","webpack://_N_E/./src/components/icons/Visibility.tsx","webpack://_N_E/./src/components/icons/VisibilityOff.tsx","webpack://_N_E/./src/components/SingleInputForm.tsx","webpack://_N_E/./src/pages/credentials/index.tsx","webpack://_N_E/./src/utils/storage/index.ts","webpack://_N_E/?ac4f"],"sourcesContent":["import styled from 'styled-components';\n\nexport default styled.img`\n    height: 25px;\n    vertical-align: bottom;\n    padding-right: 15px;\n    border-right: 2px solid #aaa;\n    margin-right: 15px;\n`;\n","import React from 'react';\nexport default function Visibility(props) {\n    return (\n        <div>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                height={props.height}\n                viewBox={props.viewBox}\n                width={props.width}\n                fill=\"#000000\">\n                <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                <path d=\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\" />\n            </svg>\n        </div>\n    );\n}\n\nVisibility.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n    open: false,\n};\n","import React from 'react';\nexport default function VisibilityOff(props) {\n    return (\n        <div>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                height={props.height}\n                viewBox={props.viewBox}\n                width={props.width}\n                fill=\"#000000\">\n                <path\n                    d=\"M0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0z\"\n                    fill=\"none\"\n                />\n                <path d=\"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\" />\n            </svg>\n        </div>\n    );\n}\n\nVisibilityOff.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n    open: false,\n};\n","import React, { useState } from 'react';\nimport constants from 'utils/strings/constants';\nimport { Form } from 'react-bootstrap';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport SubmitButton from './SubmitButton';\nimport styled from 'styled-components';\nimport Visibility from './icons/Visibility';\nimport VisibilityOff from './icons/VisibilityOff';\n\ninterface formValues {\n    passphrase: string;\n}\ninterface Props {\n    callback: (passphrase: string, setFieldError) => void;\n    fieldType: string;\n    placeholder: string;\n    buttonText: string;\n}\n\nconst Group = styled.div`\n    position: relative;\n`;\n\nconst Button = styled.button`\n    background: transparent;\n    border: none;\n    width: 46px;\n    height: 34px;\n    position: absolute;\n    top: 1px;\n    right: 1px;\n    border-radius: 5px;\n    align-items: center;\n`;\n\nexport default function SingleInputForm(props: Props) {\n    const [loading, SetLoading] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n\n    const submitForm = async (\n        values: formValues,\n        { setFieldError }: FormikHelpers<formValues>\n    ) => {\n        SetLoading(true);\n        await props.callback(values.passphrase, setFieldError);\n        SetLoading(false);\n    };\n    return (\n        <Formik<formValues>\n            initialValues={{ passphrase: '' }}\n            onSubmit={submitForm}\n            validationSchema={Yup.object().shape({\n                passphrase: Yup.string().required(constants.REQUIRED),\n            })}\n            validateOnChange={false}\n            validateOnBlur={false}>\n            {({ values, touched, errors, handleChange, handleSubmit }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Group>\n                            <Form.Control\n                                type={showPassword ? 'text' : props.fieldType}\n                                placeholder={props.placeholder}\n                                value={values.passphrase}\n                                onChange={handleChange('passphrase')}\n                                isInvalid={Boolean(\n                                    touched.passphrase && errors.passphrase\n                                )}\n                                disabled={loading}\n                                autoFocus\n                            />\n                            {props.fieldType === 'password' && (\n                                <Button\n                                    type=\"button\"\n                                    onClick={() =>\n                                        setShowPassword(!showPassword)\n                                    }>\n                                    {showPassword ? (\n                                        <VisibilityOff />\n                                    ) : (\n                                        <Visibility />\n                                    )}\n                                </Button>\n                            )}\n                            <Form.Control.Feedback type=\"invalid\">\n                                {errors.passphrase}\n                            </Form.Control.Feedback>\n                        </Group>\n                    </Form.Group>\n                    <SubmitButton\n                        buttonText={props.buttonText}\n                        loading={loading}\n                    />\n\n                    <br />\n                </Form>\n            )}\n        </Formik>\n    );\n}\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport constants from 'utils/strings/constants';\nimport { clearData, getData, LS_KEYS } from 'utils/storage/localStorage';\nimport { useRouter } from 'next/router';\nimport { KeyAttributes, PAGES } from 'types';\nimport { SESSION_KEYS, getKey } from 'utils/storage/sessionStorage';\nimport CryptoWorker, {\n    decryptAndStoreToken,\n    generateAndSaveIntermediateKeyAttributes,\n    SaveKeyInSessionStore,\n} from 'utils/crypto';\nimport { logoutUser } from 'services/userService';\nimport { isFirstLogin } from 'utils/storage';\nimport SingleInputForm from 'components/SingleInputForm';\nimport Container from 'components/Container';\nimport { Button, Card } from 'react-bootstrap';\nimport { AppContext } from 'pages/_app';\nimport LogoImg from 'components/LogoImg';\nimport { logError } from 'utils/sentry';\n\nexport default function Credentials() {\n    const router = useRouter();\n    const [keyAttributes, setKeyAttributes] = useState<KeyAttributes>();\n    const appContext = useContext(AppContext);\n\n    useEffect(() => {\n        router.prefetch(PAGES.GALLERY);\n        const user = getData(LS_KEYS.USER);\n        const keyAttributes = getData(LS_KEYS.KEY_ATTRIBUTES);\n        const key = getKey(SESSION_KEYS.ENCRYPTION_KEY);\n        if (\n            (!user?.token && !user?.encryptedToken) ||\n            (keyAttributes && !keyAttributes.memLimit)\n        ) {\n            clearData();\n            router.push(PAGES.ROOT);\n        } else if (!keyAttributes) {\n            router.push(PAGES.GENERATE);\n        } else if (key) {\n            router.push(PAGES.GALLERY);\n        } else {\n            setKeyAttributes(keyAttributes);\n        }\n        appContext.showNavBar(false);\n    }, []);\n\n    const verifyPassphrase = async (passphrase, setFieldError) => {\n        try {\n            const cryptoWorker = await new CryptoWorker();\n            let kek: string = null;\n            try {\n                kek = await cryptoWorker.deriveKey(\n                    passphrase,\n                    keyAttributes.kekSalt,\n                    keyAttributes.opsLimit,\n                    keyAttributes.memLimit\n                );\n            } catch (e) {\n                logError(e, 'failed to derive key');\n                throw e;\n            }\n            try {\n                const key: string = await cryptoWorker.decryptB64(\n                    keyAttributes.encryptedKey,\n                    keyAttributes.keyDecryptionNonce,\n                    kek\n                );\n                if (isFirstLogin()) {\n                    await generateAndSaveIntermediateKeyAttributes(\n                        passphrase,\n                        keyAttributes,\n                        key\n                    );\n                }\n                await SaveKeyInSessionStore(SESSION_KEYS.ENCRYPTION_KEY, key);\n                await decryptAndStoreToken(key);\n                const redirectUrl = appContext.redirectUrl;\n                appContext.setRedirectUrl(null);\n                router.push(redirectUrl ?? PAGES.GALLERY);\n            } catch (e) {\n                logError(e, 'user entered a wrong password');\n                setFieldError('passphrase', constants.INCORRECT_PASSPHRASE);\n            }\n        } catch (e) {\n            setFieldError(\n                'passphrase',\n                `${constants.UNKNOWN_ERROR} ${e.message}`\n            );\n        }\n    };\n\n    return (\n        <>\n            <Container>\n                <Card style={{ minWidth: '320px' }} className=\"text-center\">\n                    <Card.Body style={{ padding: '40px 30px' }}>\n                        <Card.Title style={{ marginBottom: '32px' }}>\n                            <LogoImg src=\"/icon.svg\" />\n                            {constants.PASSWORD}\n                        </Card.Title>\n                        <SingleInputForm\n                            callback={verifyPassphrase}\n                            placeholder={constants.RETURN_PASSPHRASE_HINT}\n                            buttonText={constants.VERIFY_PASSPHRASE}\n                            fieldType=\"password\"\n                        />\n                        <div\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                marginTop: '12px',\n                            }}>\n                            <Button\n                                variant=\"link\"\n                                onClick={() => router.push(PAGES.RECOVER)}>\n                                {constants.FORGOT_PASSWORD}\n                            </Button>\n                            <Button variant=\"link\" onClick={logoutUser}>\n                                {constants.GO_BACK}\n                            </Button>\n                        </div>\n                    </Card.Body>\n                </Card>\n            </Container>\n        </>\n    );\n}\n","import { getData, LS_KEYS, setData } from './localStorage';\n\nexport const isFirstLogin = () =>\n    getData(LS_KEYS.IS_FIRST_LOGIN)?.status ?? false;\n\nexport function setIsFirstLogin(status) {\n    setData(LS_KEYS.IS_FIRST_LOGIN, { status });\n}\n\nexport const justSignedUp = () =>\n    getData(LS_KEYS.JUST_SIGNED_UP)?.status ?? false;\n\nexport function setJustSignedUp(status) {\n    setData(LS_KEYS.JUST_SIGNED_UP, { status });\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/credentials\",\n      function () {\n        return require(\"private-next-pages/credentials/index.tsx\");\n      }\n    ]);\n  "],"names":["styled","Visibility","props","xmlns","height","viewBox","width","fill","d","VisibilityOff","defaultProps","open","Group","Button","SingleInputForm","useState","loading","SetLoading","showPassword","setShowPassword","submitForm","values","setFieldError","callback","passphrase","initialValues","onSubmit","validationSchema","Yup","shape","required","constants","validateOnChange","validateOnBlur","touched","errors","handleChange","handleSubmit","Form","noValidate","type","fieldType","placeholder","value","onChange","isInvalid","Boolean","disabled","autoFocus","onClick","SubmitButton","buttonText","Credentials","router","useRouter","keyAttributes","setKeyAttributes","appContext","useContext","AppContext","useEffect","prefetch","PAGES","user","getData","LS_KEYS","key","getKey","SESSION_KEYS","token","encryptedToken","memLimit","clearData","push","showNavBar","verifyPassphrase","CryptoWorker","cryptoWorker","kek","deriveKey","kekSalt","opsLimit","logError","decryptB64","encryptedKey","keyDecryptionNonce","isFirstLogin","generateAndSaveIntermediateKeyAttributes","SaveKeyInSessionStore","decryptAndStoreToken","redirectUrl","setRedirectUrl","message","style","minWidth","className","padding","marginBottom","src","display","flexDirection","marginTop","variant","logoutUser","status","setIsFirstLogin","setData","justSignedUp","setJustSignedUp","window","__NEXT_P"],"sourceRoot":""}