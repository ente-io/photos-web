{"version":3,"file":"static/chunks/pages/change-password-0536446d4029c4a19825.js","mappings":"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","sources":["webpack://_N_E/./src/components/SetPasswordForm.tsx","webpack://_N_E/./src/pages/change-password/index.tsx","webpack://_N_E/?ff1f"],"sourcesContent":["import React, { useState } from 'react';\nimport Container from 'components/Container';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport constants from 'utils/strings/constants';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport Button from 'react-bootstrap/Button';\nimport SubmitButton from './SubmitButton';\n\ninterface Props {\n    callback: (passphrase: any, setFieldError: any) => Promise<void>;\n    buttonText: string;\n    back: () => void;\n}\ninterface formValues {\n    passphrase: string;\n    confirm: string;\n}\nfunction SetPasswordForm(props: Props) {\n    const [loading, setLoading] = useState(false);\n    const onSubmit = async (\n        values: formValues,\n        { setFieldError }: FormikHelpers<formValues>\n    ) => {\n        setLoading(true);\n        try {\n            const { passphrase, confirm } = values;\n            if (passphrase === confirm) {\n                await props.callback(passphrase, setFieldError);\n            } else {\n                setFieldError('confirm', constants.PASSPHRASE_MATCH_ERROR);\n            }\n        } catch (e) {\n            setFieldError('confirm', `${constants.UNKNOWN_ERROR} ${e.message}`);\n        } finally {\n            setLoading(false);\n        }\n    };\n    return (\n        <Container>\n            <Card style={{ maxWidth: '540px', padding: '20px' }}>\n                <Card.Body>\n                    <div\n                        className=\"text-center\"\n                        style={{ marginBottom: '40px' }}>\n                        <p>{constants.ENTER_ENC_PASSPHRASE}</p>\n                        {constants.PASSPHRASE_DISCLAIMER()}\n                    </div>\n                    <Formik<formValues>\n                        initialValues={{ passphrase: '', confirm: '' }}\n                        validationSchema={Yup.object().shape({\n                            passphrase: Yup.string().required(\n                                constants.REQUIRED\n                            ),\n                            confirm: Yup.string().required(constants.REQUIRED),\n                        })}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        onSubmit={onSubmit}>\n                        {({\n                            values,\n                            touched,\n                            errors,\n                            handleChange,\n                            handleSubmit,\n                        }) => (\n                            <Form noValidate onSubmit={handleSubmit}>\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"password\"\n                                        placeholder={constants.PASSPHRASE_HINT}\n                                        value={values.passphrase}\n                                        onChange={handleChange('passphrase')}\n                                        isInvalid={Boolean(\n                                            touched.passphrase &&\n                                                errors.passphrase\n                                        )}\n                                        autoFocus\n                                        disabled={loading}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.passphrase}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"password\"\n                                        placeholder={\n                                            constants.RE_ENTER_PASSPHRASE\n                                        }\n                                        value={values.confirm}\n                                        onChange={handleChange('confirm')}\n                                        isInvalid={Boolean(\n                                            touched.confirm && errors.confirm\n                                        )}\n                                        disabled={loading}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.confirm}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <SubmitButton\n                                    buttonText={props.buttonText}\n                                    loading={loading}\n                                />\n                            </Form>\n                        )}\n                    </Formik>\n                    {props.back && (\n                        <div\n                            className=\"text-center\"\n                            style={{ marginTop: '20px' }}>\n                            <Button variant=\"link\" onClick={props.back}>\n                                {constants.GO_BACK}\n                            </Button>\n                        </div>\n                    )}\n                </Card.Body>\n            </Card>\n        </Container>\n    );\n}\nexport default SetPasswordForm;\n","import React, { useState, useEffect, useContext } from 'react';\nimport constants from 'utils/strings/constants';\nimport { getData, LS_KEYS, setData } from 'utils/storage/localStorage';\nimport { useRouter } from 'next/router';\nimport CryptoWorker, {\n    SaveKeyInSessionStore,\n    generateAndSaveIntermediateKeyAttributes,\n    B64EncryptionResult,\n} from 'utils/crypto';\nimport { getActualKey } from 'utils/common/key';\nimport { setKeys, UpdatedKey } from 'services/userService';\nimport SetPasswordForm from 'components/SetPasswordForm';\nimport { AppContext } from 'pages/_app';\nimport { SESSION_KEYS } from 'utils/storage/sessionStorage';\nimport { PAGES } from 'types';\n\nexport interface KEK {\n    key: string;\n    opsLimit: number;\n    memLimit: number;\n}\n\nexport default function Generate() {\n    const [token, setToken] = useState<string>();\n    const router = useRouter();\n    const appContext = useContext(AppContext);\n\n    useEffect(() => {\n        const user = getData(LS_KEYS.USER);\n        if (!user?.token) {\n            router.push(PAGES.ROOT);\n        } else {\n            setToken(user.token);\n        }\n        appContext.showNavBar(true);\n    }, []);\n\n    const onSubmit = async (passphrase, setFieldError) => {\n        const cryptoWorker = await new CryptoWorker();\n        const key: string = await getActualKey();\n        const keyAttributes = getData(LS_KEYS.KEY_ATTRIBUTES);\n        const kekSalt: string = await cryptoWorker.generateSaltToDeriveKey();\n        let kek: KEK;\n        try {\n            kek = await cryptoWorker.deriveSensitiveKey(passphrase, kekSalt);\n        } catch (e) {\n            setFieldError('confirm', constants.PASSWORD_GENERATION_FAILED);\n            return;\n        }\n        const encryptedKeyAttributes: B64EncryptionResult =\n            await cryptoWorker.encryptToB64(key, kek.key);\n        const updatedKey: UpdatedKey = {\n            kekSalt,\n            encryptedKey: encryptedKeyAttributes.encryptedData,\n            keyDecryptionNonce: encryptedKeyAttributes.nonce,\n            opsLimit: kek.opsLimit,\n            memLimit: kek.memLimit,\n        };\n\n        await setKeys(token, updatedKey);\n\n        const updatedKeyAttributes = Object.assign(keyAttributes, updatedKey);\n        await generateAndSaveIntermediateKeyAttributes(\n            passphrase,\n            updatedKeyAttributes,\n            key\n        );\n\n        await SaveKeyInSessionStore(SESSION_KEYS.ENCRYPTION_KEY, key);\n        redirectToGallery();\n    };\n    const redirectToGallery = () => {\n        setData(LS_KEYS.SHOW_BACK_BUTTON, { value: true });\n        router.push(PAGES.GALLERY);\n    };\n    return (\n        <SetPasswordForm\n            callback={onSubmit}\n            buttonText={constants.CHANGE_PASSWORD}\n            back={\n                getData(LS_KEYS.SHOW_BACK_BUTTON)?.value\n                    ? redirectToGallery\n                    : null\n            }\n        />\n    );\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/change-password\",\n      function () {\n        return require(\"private-next-pages/change-password/index.tsx\");\n      }\n    ]);\n  "],"names":["props","useState","loading","setLoading","onSubmit","values","setFieldError","passphrase","confirm","callback","constants","message","style","maxWidth","padding","className","marginBottom","initialValues","validationSchema","Yup","shape","required","validateOnChange","validateOnBlur","touched","errors","handleChange","handleSubmit","noValidate","type","placeholder","value","onChange","isInvalid","Boolean","autoFocus","disabled","buttonText","back","marginTop","variant","onClick","Generate","token","setToken","router","useRouter","appContext","useContext","AppContext","useEffect","user","getData","LS_KEYS","push","PAGES","showNavBar","CryptoWorker","cryptoWorker","getActualKey","key","keyAttributes","generateSaltToDeriveKey","kekSalt","deriveSensitiveKey","kek","encryptToB64","encryptedKeyAttributes","updatedKey","encryptedKey","encryptedData","keyDecryptionNonce","nonce","opsLimit","memLimit","setKeys","updatedKeyAttributes","Object","assign","generateAndSaveIntermediateKeyAttributes","SaveKeyInSessionStore","SESSION_KEYS","redirectToGallery","setData","window","__NEXT_P"],"sourceRoot":""}