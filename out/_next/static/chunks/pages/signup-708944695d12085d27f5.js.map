{"version":3,"file":"static/chunks/pages/signup-708944695d12085d27f5.js","mappings":"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","sources":["webpack://_N_E/./src/components/LogoImg.tsx","webpack://_N_E/./src/components/SignUp.tsx","webpack://_N_E/./src/pages/signup/index.tsx","webpack://_N_E/./src/utils/storage/index.ts","webpack://_N_E/?f492"],"sourcesContent":["import styled from 'styled-components';\n\nexport default styled.img`\n    height: 25px;\n    vertical-align: bottom;\n    padding-right: 15px;\n    border-right: 2px solid #aaa;\n    margin-right: 15px;\n`;\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport constants from 'utils/strings/constants';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport { getOtt } from 'services/userService';\nimport Card from 'react-bootstrap/Card';\nimport { setData, LS_KEYS } from 'utils/storage/localStorage';\nimport { useRouter } from 'next/router';\nimport SubmitButton from 'components/SubmitButton';\nimport { Button } from 'react-bootstrap';\nimport {\n    generateAndSaveIntermediateKeyAttributes,\n    generateKeyAttributes,\n    SaveKeyInSessionStore,\n} from 'utils/crypto';\nimport { setJustSignedUp } from 'utils/storage';\nimport LogoImg from './LogoImg';\nimport { logError } from 'utils/sentry';\nimport { SESSION_KEYS } from 'utils/storage/sessionStorage';\nimport { PAGES } from 'types';\n\ninterface FormValues {\n    email: string;\n    passphrase: string;\n    confirm: string;\n}\n\ninterface SignUpProps {\n    login: () => void;\n}\n\nexport default function SignUp(props: SignUpProps) {\n    const router = useRouter();\n    const [acceptTerms, setAcceptTerms] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const registerUser = async (\n        { email, passphrase, confirm }: FormValues,\n        { setFieldError }: FormikHelpers<FormValues>\n    ) => {\n        setLoading(true);\n        try {\n            try {\n                setData(LS_KEYS.USER, { email });\n                await getOtt(email);\n            } catch (e) {\n                setFieldError(\n                    'confirm',\n                    `${constants.UNKNOWN_ERROR} ${e.message}`\n                );\n                throw e;\n            }\n            try {\n                if (passphrase === confirm) {\n                    const { keyAttributes, masterKey } =\n                        await generateKeyAttributes(passphrase);\n                    setData(LS_KEYS.ORIGINAL_KEY_ATTRIBUTES, keyAttributes);\n                    await generateAndSaveIntermediateKeyAttributes(\n                        passphrase,\n                        keyAttributes,\n                        masterKey\n                    );\n\n                    await SaveKeyInSessionStore(\n                        SESSION_KEYS.ENCRYPTION_KEY,\n                        masterKey\n                    );\n                    setJustSignedUp(true);\n                    router.push(PAGES.VERIFY);\n                } else {\n                    setFieldError('confirm', constants.PASSPHRASE_MATCH_ERROR);\n                }\n            } catch (e) {\n                setFieldError(\n                    'passphrase',\n                    constants.PASSWORD_GENERATION_FAILED\n                );\n                throw e;\n            }\n        } catch (err) {\n            logError(err, 'signup failed');\n        }\n        setLoading(false);\n    };\n\n    return (\n        <>\n            <Card.Title style={{ marginBottom: '32px' }}>\n                <LogoImg src=\"/icon.svg\" />\n                {constants.SIGN_UP}\n            </Card.Title>\n            <Formik<FormValues>\n                initialValues={{\n                    email: '',\n                    passphrase: '',\n                    confirm: '',\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .email(constants.EMAIL_ERROR)\n                        .required(constants.REQUIRED),\n                    passphrase: Yup.string().required(constants.REQUIRED),\n                    confirm: Yup.string().required(constants.REQUIRED),\n                })}\n                validateOnChange={false}\n                validateOnBlur={false}\n                onSubmit={registerUser}>\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleSubmit,\n                }): JSX.Element => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group controlId=\"registrationForm.email\">\n                            <Form.Control\n                                type=\"email\"\n                                placeholder={constants.ENTER_EMAIL}\n                                value={values.email}\n                                onChange={handleChange('email')}\n                                isInvalid={Boolean(\n                                    touched.email && errors.email\n                                )}\n                                autoFocus\n                                disabled={loading}\n                            />\n                            <FormControl.Feedback type=\"invalid\">\n                                {errors.email}\n                            </FormControl.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder={constants.PASSPHRASE_HINT}\n                                value={values.passphrase}\n                                onChange={handleChange('passphrase')}\n                                isInvalid={Boolean(\n                                    touched.passphrase && errors.passphrase\n                                )}\n                                disabled={loading}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {errors.passphrase}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder={constants.RE_ENTER_PASSPHRASE}\n                                value={values.confirm}\n                                onChange={handleChange('confirm')}\n                                isInvalid={Boolean(\n                                    touched.confirm && errors.confirm\n                                )}\n                                disabled={loading}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {errors.confirm}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group\n                            style={{\n                                marginBottom: '0',\n                                textAlign: 'left',\n                            }}\n                            controlId=\"formBasicCheckbox-1\">\n                            <Form.Check\n                                checked={acceptTerms}\n                                onChange={(e) =>\n                                    setAcceptTerms(e.target.checked)\n                                }\n                                type=\"checkbox\"\n                                label={constants.TERMS_AND_CONDITIONS()}\n                            />\n                        </Form.Group>\n                        <br />\n                        <SubmitButton\n                            buttonText={constants.SUBMIT}\n                            loading={loading}\n                            disabled={!acceptTerms}\n                        />\n                        <br />\n                        <Button block variant=\"link\" onClick={props.login}>\n                            {constants.ACCOUNT_EXISTS}\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport Card from 'react-bootstrap/Card';\nimport { AppContext } from 'pages/_app';\nimport Container from 'components/Container';\nimport EnteSpinner from 'components/EnteSpinner';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport SignUp from 'components/SignUp';\nimport { PAGES } from 'types';\n\nexport default function SignUpPage() {\n    const router = useRouter();\n    const appContext = useContext(AppContext);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        router.prefetch(PAGES.VERIFY);\n        router.prefetch(PAGES.LOGIN);\n        const user = getData(LS_KEYS.USER);\n        if (user?.email) {\n            router.push(PAGES.VERIFY);\n        }\n        setLoading(false);\n        appContext.showNavBar(false);\n    }, []);\n\n    const login = () => {\n        router.push(PAGES.LOGIN);\n    };\n\n    return (\n        <Container>\n            {loading ? (\n                <EnteSpinner />\n            ) : (\n                <Card style={{ minWidth: '320px' }} className=\"text-center\">\n                    <Card.Body style={{ padding: '40px 30px' }}>\n                        <SignUp login={login} />\n                    </Card.Body>\n                </Card>\n            )}\n        </Container>\n    );\n}\n","import { getData, LS_KEYS, setData } from './localStorage';\n\nexport const isFirstLogin = () =>\n    getData(LS_KEYS.IS_FIRST_LOGIN)?.status ?? false;\n\nexport function setIsFirstLogin(status) {\n    setData(LS_KEYS.IS_FIRST_LOGIN, { status });\n}\n\nexport const justSignedUp = () =>\n    getData(LS_KEYS.JUST_SIGNED_UP)?.status ?? false;\n\nexport function setJustSignedUp(status) {\n    setData(LS_KEYS.JUST_SIGNED_UP, { status });\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/signup\",\n      function () {\n        return require(\"private-next-pages/signup/index.tsx\");\n      }\n    ]);\n  "],"names":["styled","SignUp","props","router","useRouter","useState","acceptTerms","setAcceptTerms","loading","setLoading","registerUser","email","passphrase","confirm","setFieldError","setData","LS_KEYS","getOtt","constants","message","generateKeyAttributes","keyAttributes","masterKey","generateAndSaveIntermediateKeyAttributes","SaveKeyInSessionStore","SESSION_KEYS","setJustSignedUp","push","PAGES","logError","style","marginBottom","src","initialValues","validationSchema","Yup","shape","required","validateOnChange","validateOnBlur","onSubmit","values","errors","touched","handleChange","handleSubmit","noValidate","controlId","type","placeholder","value","onChange","isInvalid","Boolean","autoFocus","disabled","textAlign","checked","e","target","label","buttonText","block","variant","onClick","login","SignUpPage","appContext","useContext","AppContext","useEffect","prefetch","user","getData","showNavBar","minWidth","className","padding","isFirstLogin","status","setIsFirstLogin","justSignedUp","window","__NEXT_P"],"sourceRoot":""}