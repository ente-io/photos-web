{"version":3,"file":"static/chunks/pages/generate-26b768f550256be461c7.js","mappings":"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","sources":["webpack://_N_E/./src/components/SetPasswordForm.tsx","webpack://_N_E/./src/pages/generate/index.tsx","webpack://_N_E/?e630"],"sourcesContent":["import React, { useState } from 'react';\nimport Container from 'components/Container';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport constants from 'utils/strings/constants';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport Button from 'react-bootstrap/Button';\nimport SubmitButton from './SubmitButton';\n\ninterface Props {\n    callback: (passphrase: any, setFieldError: any) => Promise<void>;\n    buttonText: string;\n    back: () => void;\n}\ninterface formValues {\n    passphrase: string;\n    confirm: string;\n}\nfunction SetPasswordForm(props: Props) {\n    const [loading, setLoading] = useState(false);\n    const onSubmit = async (\n        values: formValues,\n        { setFieldError }: FormikHelpers<formValues>\n    ) => {\n        setLoading(true);\n        try {\n            const { passphrase, confirm } = values;\n            if (passphrase === confirm) {\n                await props.callback(passphrase, setFieldError);\n            } else {\n                setFieldError('confirm', constants.PASSPHRASE_MATCH_ERROR);\n            }\n        } catch (e) {\n            setFieldError('confirm', `${constants.UNKNOWN_ERROR} ${e.message}`);\n        } finally {\n            setLoading(false);\n        }\n    };\n    return (\n        <Container>\n            <Card style={{ maxWidth: '540px', padding: '20px' }}>\n                <Card.Body>\n                    <div\n                        className=\"text-center\"\n                        style={{ marginBottom: '40px' }}>\n                        <p>{constants.ENTER_ENC_PASSPHRASE}</p>\n                        {constants.PASSPHRASE_DISCLAIMER()}\n                    </div>\n                    <Formik<formValues>\n                        initialValues={{ passphrase: '', confirm: '' }}\n                        validationSchema={Yup.object().shape({\n                            passphrase: Yup.string().required(\n                                constants.REQUIRED\n                            ),\n                            confirm: Yup.string().required(constants.REQUIRED),\n                        })}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        onSubmit={onSubmit}>\n                        {({\n                            values,\n                            touched,\n                            errors,\n                            handleChange,\n                            handleSubmit,\n                        }) => (\n                            <Form noValidate onSubmit={handleSubmit}>\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"password\"\n                                        placeholder={constants.PASSPHRASE_HINT}\n                                        value={values.passphrase}\n                                        onChange={handleChange('passphrase')}\n                                        isInvalid={Boolean(\n                                            touched.passphrase &&\n                                                errors.passphrase\n                                        )}\n                                        autoFocus\n                                        disabled={loading}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.passphrase}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Control\n                                        type=\"password\"\n                                        placeholder={\n                                            constants.RE_ENTER_PASSPHRASE\n                                        }\n                                        value={values.confirm}\n                                        onChange={handleChange('confirm')}\n                                        isInvalid={Boolean(\n                                            touched.confirm && errors.confirm\n                                        )}\n                                        disabled={loading}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.confirm}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <SubmitButton\n                                    buttonText={props.buttonText}\n                                    loading={loading}\n                                />\n                            </Form>\n                        )}\n                    </Formik>\n                    {props.back && (\n                        <div\n                            className=\"text-center\"\n                            style={{ marginTop: '20px' }}>\n                            <Button variant=\"link\" onClick={props.back}>\n                                {constants.GO_BACK}\n                            </Button>\n                        </div>\n                    )}\n                </Card.Body>\n            </Card>\n        </Container>\n    );\n}\nexport default SetPasswordForm;\n","import React, { useState, useEffect, useContext } from 'react';\nimport constants from 'utils/strings/constants';\nimport { logoutUser, putAttributes, User } from 'services/userService';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport { useRouter } from 'next/router';\nimport { getKey, SESSION_KEYS } from 'utils/storage/sessionStorage';\nimport {\n    SaveKeyInSessionStore,\n    generateAndSaveIntermediateKeyAttributes,\n    generateKeyAttributes,\n} from 'utils/crypto';\nimport SetPasswordForm from 'components/SetPasswordForm';\nimport { justSignedUp, setJustSignedUp } from 'utils/storage';\nimport RecoveryKeyModal from 'components/RecoveryKeyModal';\nimport { KeyAttributes, PAGES } from 'types';\nimport Container from 'components/Container';\nimport EnteSpinner from 'components/EnteSpinner';\nimport { AppContext } from 'pages/_app';\nimport { logError } from 'utils/sentry';\n\nexport interface KEK {\n    key: string;\n    opsLimit: number;\n    memLimit: number;\n}\n\nexport default function Generate() {\n    const [token, setToken] = useState<string>();\n    const router = useRouter();\n    const [recoverModalView, setRecoveryModalView] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const appContext = useContext(AppContext);\n    useEffect(() => {\n        const main = async () => {\n            const key: string = getKey(SESSION_KEYS.ENCRYPTION_KEY);\n            const keyAttributes: KeyAttributes = getData(\n                LS_KEYS.ORIGINAL_KEY_ATTRIBUTES\n            );\n            router.prefetch(PAGES.GALLERY);\n            router.prefetch(PAGES.CREDENTIALS);\n            const user: User = getData(LS_KEYS.USER);\n            if (!user?.token) {\n                router.push(PAGES.ROOT);\n            } else if (key) {\n                if (justSignedUp()) {\n                    setRecoveryModalView(true);\n                    setLoading(false);\n                } else {\n                    router.push(PAGES.GALLERY);\n                }\n            } else if (keyAttributes?.encryptedKey) {\n                router.push(PAGES.CREDENTIALS);\n            } else {\n                setToken(user.token);\n                setLoading(false);\n            }\n        };\n        main();\n        appContext.showNavBar(true);\n    }, []);\n\n    const onSubmit = async (passphrase, setFieldError) => {\n        try {\n            const { keyAttributes, masterKey } = await generateKeyAttributes(\n                passphrase\n            );\n\n            await putAttributes(token, keyAttributes);\n            await generateAndSaveIntermediateKeyAttributes(\n                passphrase,\n                keyAttributes,\n                masterKey\n            );\n            await SaveKeyInSessionStore(SESSION_KEYS.ENCRYPTION_KEY, masterKey);\n            setJustSignedUp(true);\n            setRecoveryModalView(true);\n        } catch (e) {\n            logError(e, 'failed to generate password');\n            setFieldError('passphrase', constants.PASSWORD_GENERATION_FAILED);\n        }\n    };\n\n    return (\n        <>\n            {loading ? (\n                <Container>\n                    <EnteSpinner>\n                        <span className=\"sr-only\">Loading...</span>\n                    </EnteSpinner>\n                </Container>\n            ) : recoverModalView ? (\n                <RecoveryKeyModal\n                    show={recoverModalView}\n                    onHide={() => {\n                        setRecoveryModalView(false);\n                        router.push(PAGES.GALLERY);\n                    }}\n                    somethingWentWrong={() => null}\n                />\n            ) : (\n                <SetPasswordForm\n                    callback={onSubmit}\n                    buttonText={constants.SET_PASSPHRASE}\n                    back={logoutUser}\n                />\n            )}\n        </>\n    );\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/generate\",\n      function () {\n        return require(\"private-next-pages/generate/index.tsx\");\n      }\n    ]);\n  "],"names":["props","useState","loading","setLoading","onSubmit","values","setFieldError","passphrase","confirm","callback","constants","message","style","maxWidth","padding","className","marginBottom","initialValues","validationSchema","Yup","shape","required","validateOnChange","validateOnBlur","touched","errors","handleChange","handleSubmit","noValidate","type","placeholder","value","onChange","isInvalid","Boolean","autoFocus","disabled","buttonText","back","marginTop","variant","onClick","Generate","token","setToken","router","useRouter","recoverModalView","setRecoveryModalView","appContext","useContext","AppContext","useEffect","key","getKey","SESSION_KEYS","keyAttributes","getData","LS_KEYS","prefetch","PAGES","user","justSignedUp","push","encryptedKey","main","showNavBar","generateKeyAttributes","masterKey","putAttributes","generateAndSaveIntermediateKeyAttributes","SaveKeyInSessionStore","setJustSignedUp","logError","show","onHide","somethingWentWrong","logoutUser","window","__NEXT_P"],"sourceRoot":""}