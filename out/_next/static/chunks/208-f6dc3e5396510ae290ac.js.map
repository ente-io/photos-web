{"version":3,"file":"static/chunks/208-f6dc3e5396510ae290ac.js","mappings":"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","sources":["webpack://_N_E/./src/services/collectionService.ts","webpack://_N_E/./src/components/icons/CloseIcon.tsx","webpack://_N_E/./src/components/FullScreenDropZone.tsx","webpack://_N_E/./src/components/pages/gallery/LinkButton.tsx","webpack://_N_E/./src/components/TwoFactorModal.tsx","webpack://_N_E/./src/services/exportService.ts","webpack://_N_E/./src/utils/export/index.ts","webpack://_N_E/./src/components/ExportInProgress.tsx","webpack://_N_E/./src/components/ExportFinished.tsx","webpack://_N_E/./src/components/ExportInit.tsx","webpack://_N_E/./src/components/icons/FolderIcon.tsx","webpack://_N_E/./src/components/icons/InProgressIcon.tsx","webpack://_N_E/./src/components/ExportModal.tsx","webpack://_N_E/./src/components/CollectionShare.tsx","webpack://_N_E/./src/components/icons/NavigateNext.tsx","webpack://_N_E/./src/components/NavigationButton.tsx","webpack://_N_E/./src/utils/collection/index.ts","webpack://_N_E/./src/components/pages/gallery/CollectionOptions.tsx","webpack://_N_E/./src/components/icons/SortIcon.tsx","webpack://_N_E/./src/components/icons/TickIcon.tsx","webpack://_N_E/./src/components/pages/gallery/CollectionSortOptions.tsx","webpack://_N_E/./src/components/icons/DeleteIcon.tsx","webpack://_N_E/./src/components/icons/AddIcon.tsx","webpack://_N_E/./src/components/icons/Archive.tsx","webpack://_N_E/./src/components/icons/MoveIcon.tsx","webpack://_N_E/./src/components/icons/UnArchive.tsx","webpack://_N_E/./src/components/icons/RemoveIcon.tsx","webpack://_N_E/./src/components/icons/RestoreIcon.tsx","webpack://_N_E/./src/components/icons/ClockIcon.tsx","webpack://_N_E/./src/components/icons/DownloadIcon.tsx","webpack://_N_E/./src/components/pages/gallery/SelectedFileOptions.tsx","webpack://_N_E/./src/components/pages/gallery/CollectionSort.tsx","webpack://_N_E/./src/components/pages/gallery/OptionIcon.tsx","webpack://_N_E/./src/components/pages/gallery/Collections.tsx","webpack://_N_E/./src/services/trashService.ts","webpack://_N_E/./src/services/migrateThumbnailService.ts","webpack://_N_E/./src/components/FixLargeThumbnail.tsx","webpack://_N_E/./src/components/Sidebar.tsx","webpack://_N_E/./src/components/LoadingOverlay.tsx","webpack://_N_E/./src/components/icons/PlayCircleOutline.tsx","webpack://_N_E/./src/components/pages/gallery/PreviewCard.tsx","webpack://_N_E/./src/utils/common/useLongPress.ts","webpack://_N_E/./src/components/FavButton.tsx","webpack://_N_E/./src/components/PhotoSwipe/events.ts","webpack://_N_E/./src/components/icons/EditIcon.tsx","webpack://_N_E/./src/components/EnteDateTimePicker.tsx","webpack://_N_E/./src/components/PhotoSwipe/PhotoSwipe.tsx","webpack://_N_E/./src/utils/exif/index.ts","webpack://_N_E/./src/utils/search/index.ts","webpack://_N_E/./src/utils/photoFrame/index.ts","webpack://_N_E/./src/components/PhotoList.tsx","webpack://_N_E/./src/components/PhotoFrame.tsx","webpack://_N_E/./src/services/searchService.ts","webpack://_N_E/./src/components/icons/LocationIcon.tsx","webpack://_N_E/./src/components/icons/DateIcon.tsx","webpack://_N_E/./src/components/icons/SearchIcon.tsx","webpack://_N_E/./src/components/icons/CollectionIcon.tsx","webpack://_N_E/./src/components/icons/ImageIcon.tsx","webpack://_N_E/./src/components/icons/VideoIcon.tsx","webpack://_N_E/./src/components/SearchBar.tsx","webpack://_N_E/./src/components/pages/gallery/AddCollectionButton.tsx","webpack://_N_E/./src/components/pages/gallery/CollectionSelector.tsx","webpack://_N_E/./src/components/pages/gallery/CollectionNamer.tsx","webpack://_N_E/./src/components/icons/WarningIcon.tsx","webpack://_N_E/./src/components/pages/gallery/AlertBanner.tsx","webpack://_N_E/./src/components/pages/gallery/UploadButton.tsx","webpack://_N_E/./src/components/icons/ArrowEast.tsx","webpack://_N_E/./src/components/pages/gallery/PlanSelector.tsx","webpack://_N_E/./src/components/icons/ExpandLess.tsx","webpack://_N_E/./src/components/icons/ExpandMore.tsx","webpack://_N_E/./src/utils/upload/index.ts","webpack://_N_E/./src/services/upload/uploader.ts","webpack://_N_E/./src/services/upload/uploadManager.ts","webpack://_N_E/./src/components/pages/gallery/UploadProgress.tsx","webpack://_N_E/./src/components/pages/gallery/ChoiceModal.tsx","webpack://_N_E/./src/components/pages/gallery/Upload.tsx","webpack://_N_E/./src/components/DeleteBtn.tsx","webpack://_N_E/./src/services/updateCreationTimeWithExif.ts","webpack://_N_E/./src/components/FixCreationTime/running.tsx","webpack://_N_E/./src/components/FixCreationTime/footer.tsx","webpack://_N_E/./src/components/FixCreationTime/options.tsx","webpack://_N_E/./src/components/FixCreationTime/index.tsx","webpack://_N_E/./src/pages/gallery/index.tsx"],"sourcesContent":["import { getEndpoint } from 'utils/common/apiUtil';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport localForage from 'utils/storage/localForage';\n\nimport { getActualKey, getToken } from 'utils/common/key';\nimport CryptoWorker from 'utils/crypto';\nimport { SetDialogMessage } from 'components/MessageDialog';\nimport constants from 'utils/strings/constants';\nimport { getPublicKey, User } from './userService';\nimport { B64EncryptionResult } from 'utils/crypto';\nimport HTTPService from './HTTPService';\nimport { File } from './fileService';\nimport { logError } from 'utils/sentry';\nimport { CustomError } from 'utils/common/errorUtil';\nimport { sortFiles } from 'utils/file';\n\nconst ENDPOINT = getEndpoint();\n\nexport enum CollectionType {\n    folder = 'folder',\n    favorites = 'favorites',\n    album = 'album',\n}\n\nconst COLLECTION_UPDATION_TIME = 'collection-updation-time';\nconst COLLECTIONS = 'collections';\n\nexport interface Collection {\n    id: number;\n    owner: User;\n    key?: string;\n    name?: string;\n    encryptedName?: string;\n    nameDecryptionNonce?: string;\n    type: CollectionType;\n    attributes: collectionAttributes;\n    sharees: User[];\n    updationTime: number;\n    encryptedKey: string;\n    keyDecryptionNonce: string;\n    isDeleted: boolean;\n    isSharedCollection?: boolean;\n}\n\ninterface EncryptedFileKey {\n    id: number;\n    encryptedKey: string;\n    keyDecryptionNonce: string;\n}\n\ninterface AddToCollectionRequest {\n    collectionID: number;\n    files: EncryptedFileKey[];\n}\n\ninterface MoveToCollectionRequest {\n    fromCollectionID: number;\n    toCollectionID: number;\n    files: EncryptedFileKey[];\n}\n\ninterface collectionAttributes {\n    encryptedPath?: string;\n    pathDecryptionNonce?: string;\n}\n\nexport interface CollectionAndItsLatestFile {\n    collection: Collection;\n    file: File;\n}\n\nexport enum COLLECTION_SORT_BY {\n    LATEST_FILE,\n    MODIFICATION_TIME,\n    NAME,\n}\n\ninterface RemoveFromCollectionRequest {\n    collectionID: number;\n    fileIDs: number[];\n}\n\nconst getCollectionWithSecrets = async (\n    collection: Collection,\n    masterKey: string\n) => {\n    const worker = await new CryptoWorker();\n    const userID = getData(LS_KEYS.USER).id;\n    let decryptedKey: string;\n    if (collection.owner.id === userID) {\n        decryptedKey = await worker.decryptB64(\n            collection.encryptedKey,\n            collection.keyDecryptionNonce,\n            masterKey\n        );\n    } else {\n        const keyAttributes = getData(LS_KEYS.KEY_ATTRIBUTES);\n        const secretKey = await worker.decryptB64(\n            keyAttributes.encryptedSecretKey,\n            keyAttributes.secretKeyDecryptionNonce,\n            masterKey\n        );\n        decryptedKey = await worker.boxSealOpen(\n            collection.encryptedKey,\n            keyAttributes.publicKey,\n            secretKey\n        );\n    }\n    collection.name =\n        collection.name ||\n        (await worker.decryptToUTF8(\n            collection.encryptedName,\n            collection.nameDecryptionNonce,\n            decryptedKey\n        ));\n    return {\n        ...collection,\n        key: decryptedKey,\n    };\n};\n\nconst getCollections = async (\n    token: string,\n    sinceTime: number,\n    key: string\n): Promise<Collection[]> => {\n    try {\n        const resp = await HTTPService.get(\n            `${ENDPOINT}/collections`,\n            {\n                sinceTime,\n            },\n            { 'X-Auth-Token': token }\n        );\n        const promises: Promise<Collection>[] = resp.data.collections.map(\n            async (collection: Collection) => {\n                if (collection.isDeleted) {\n                    return collection;\n                }\n                let collectionWithSecrets = collection;\n                try {\n                    collectionWithSecrets = await getCollectionWithSecrets(\n                        collection,\n                        key\n                    );\n                } catch (e) {\n                    logError(e, `decryption failed for collection`, {\n                        collectionID: collection.id,\n                    });\n                }\n                return collectionWithSecrets;\n            }\n        );\n        // only allow deleted or collection with key, filtering out collection whose decryption failed\n        const collections = (await Promise.all(promises)).filter(\n            (collection) => collection.isDeleted || collection.key\n        );\n        return collections;\n    } catch (e) {\n        logError(e, 'getCollections failed');\n        throw e;\n    }\n};\n\nexport const getLocalCollections = async (): Promise<Collection[]> => {\n    const collections: Collection[] =\n        (await localForage.getItem(COLLECTIONS)) ?? [];\n    return collections;\n};\n\nexport const getCollectionUpdationTime = async (): Promise<number> =>\n    (await localForage.getItem<number>(COLLECTION_UPDATION_TIME)) ?? 0;\n\nexport const syncCollections = async () => {\n    const localCollections = await getLocalCollections();\n    const lastCollectionUpdationTime = await getCollectionUpdationTime();\n    const token = getToken();\n    const key = await getActualKey();\n    const updatedCollections =\n        (await getCollections(token, lastCollectionUpdationTime, key)) ?? [];\n    if (updatedCollections.length === 0) {\n        return localCollections;\n    }\n    const allCollectionsInstances = [\n        ...localCollections,\n        ...updatedCollections,\n    ];\n    const latestCollectionsInstances = new Map<number, Collection>();\n    allCollectionsInstances.forEach((collection) => {\n        if (\n            !latestCollectionsInstances.has(collection.id) ||\n            latestCollectionsInstances.get(collection.id).updationTime <\n                collection.updationTime\n        ) {\n            latestCollectionsInstances.set(collection.id, collection);\n        }\n    });\n\n    let collections: Collection[] = [];\n    let updationTime = await localForage.getItem<number>(\n        COLLECTION_UPDATION_TIME\n    );\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [_, collection] of latestCollectionsInstances) {\n        if (!collection.isDeleted) {\n            collections.push(collection);\n            updationTime = Math.max(updationTime, collection.updationTime);\n        }\n    }\n    collections = sortCollections(\n        collections,\n        [],\n        COLLECTION_SORT_BY.MODIFICATION_TIME\n    );\n    await localForage.setItem(COLLECTIONS, collections);\n    await localForage.setItem(COLLECTION_UPDATION_TIME, updationTime);\n    return collections;\n};\n\nexport const getCollection = async (\n    collectionID: number\n): Promise<Collection> => {\n    try {\n        const token = getToken();\n        if (!token) {\n            return;\n        }\n        const resp = await HTTPService.get(\n            `${ENDPOINT}/collections/${collectionID}`,\n            null,\n            { 'X-Auth-Token': token }\n        );\n        const key = await getActualKey();\n        const collectionWithSecrets = await getCollectionWithSecrets(\n            resp.data?.collection,\n            key\n        );\n        return collectionWithSecrets;\n    } catch (e) {\n        logError(e, 'failed to get collection', { collectionID });\n    }\n};\n\nexport const getCollectionsAndTheirLatestFile = (\n    collections: Collection[],\n    files: File[]\n): CollectionAndItsLatestFile[] => {\n    const latestFile = new Map<number, File>();\n\n    files.forEach((file) => {\n        if (!latestFile.has(file.collectionID)) {\n            latestFile.set(file.collectionID, file);\n        }\n    });\n    const collectionsAndTheirLatestFile: CollectionAndItsLatestFile[] = [];\n\n    for (const collection of collections) {\n        collectionsAndTheirLatestFile.push({\n            collection,\n            file: latestFile.get(collection.id),\n        });\n    }\n    return collectionsAndTheirLatestFile;\n};\n\nexport const getFavItemIds = async (files: File[]): Promise<Set<number>> => {\n    const favCollection = await getFavCollection();\n    if (!favCollection) return new Set();\n\n    return new Set(\n        files\n            .filter((file) => file.collectionID === favCollection.id)\n            .map((file): number => file.id)\n    );\n};\n\nexport const createAlbum = async (\n    albumName: string,\n    existingCollection?: Collection[]\n) => createCollection(albumName, CollectionType.album, existingCollection);\n\nexport const createCollection = async (\n    collectionName: string,\n    type: CollectionType,\n    existingCollections?: Collection[]\n): Promise<Collection> => {\n    try {\n        if (!existingCollections) {\n            existingCollections = await syncCollections();\n        }\n        for (const collection of existingCollections) {\n            if (collection.name === collectionName) {\n                return collection;\n            }\n        }\n        const worker = await new CryptoWorker();\n        const encryptionKey = await getActualKey();\n        const token = getToken();\n        const collectionKey: string = await worker.generateEncryptionKey();\n        const {\n            encryptedData: encryptedKey,\n            nonce: keyDecryptionNonce,\n        }: B64EncryptionResult = await worker.encryptToB64(\n            collectionKey,\n            encryptionKey\n        );\n        const {\n            encryptedData: encryptedName,\n            nonce: nameDecryptionNonce,\n        }: B64EncryptionResult = await worker.encryptUTF8(\n            collectionName,\n            collectionKey\n        );\n        const newCollection: Collection = {\n            id: null,\n            owner: null,\n            encryptedKey,\n            keyDecryptionNonce,\n            encryptedName,\n            nameDecryptionNonce,\n            type,\n            attributes: {},\n            sharees: null,\n            updationTime: null,\n            isDeleted: false,\n        };\n        let createdCollection: Collection = await postCollection(\n            newCollection,\n            token\n        );\n        createdCollection = await getCollectionWithSecrets(\n            createdCollection,\n            encryptionKey\n        );\n        return createdCollection;\n    } catch (e) {\n        logError(e, 'create collection failed');\n        throw e;\n    }\n};\n\nconst postCollection = async (\n    collectionData: Collection,\n    token: string\n): Promise<Collection> => {\n    try {\n        const response = await HTTPService.post(\n            `${ENDPOINT}/collections`,\n            collectionData,\n            null,\n            { 'X-Auth-Token': token }\n        );\n        return response.data.collection;\n    } catch (e) {\n        logError(e, 'post Collection failed ');\n    }\n};\n\nexport const addToFavorites = async (file: File) => {\n    try {\n        let favCollection = await getFavCollection();\n        if (!favCollection) {\n            favCollection = await createCollection(\n                'Favorites',\n                CollectionType.favorites\n            );\n            const localCollections = await getLocalCollections();\n            await localForage.setItem(COLLECTIONS, [\n                ...localCollections,\n                favCollection,\n            ]);\n        }\n        await addToCollection(favCollection, [file]);\n    } catch (e) {\n        logError(e, 'failed to add to favorite');\n    }\n};\n\nexport const removeFromFavorites = async (file: File) => {\n    try {\n        const favCollection = await getFavCollection();\n        if (!favCollection) {\n            throw Error(CustomError.FAV_COLLECTION_MISSING);\n        }\n        await removeFromCollection(favCollection, [file]);\n    } catch (e) {\n        logError(e, 'remove from favorite failed');\n    }\n};\n\nexport const addToCollection = async (\n    collection: Collection,\n    files: File[]\n) => {\n    try {\n        const token = getToken();\n        const fileKeysEncryptedWithNewCollection =\n            await encryptWithNewCollectionKey(collection, files);\n\n        const requestBody: AddToCollectionRequest = {\n            collectionID: collection.id,\n            files: fileKeysEncryptedWithNewCollection,\n        };\n        await HTTPService.post(\n            `${ENDPOINT}/collections/add-files`,\n            requestBody,\n            null,\n            {\n                'X-Auth-Token': token,\n            }\n        );\n    } catch (e) {\n        logError(e, 'Add to collection Failed ');\n        throw e;\n    }\n};\n\nexport const restoreToCollection = async (\n    collection: Collection,\n    files: File[]\n) => {\n    try {\n        const token = getToken();\n        const fileKeysEncryptedWithNewCollection =\n            await encryptWithNewCollectionKey(collection, files);\n\n        const requestBody: AddToCollectionRequest = {\n            collectionID: collection.id,\n            files: fileKeysEncryptedWithNewCollection,\n        };\n        await HTTPService.post(\n            `${ENDPOINT}/collections/restore-files`,\n            requestBody,\n            null,\n            {\n                'X-Auth-Token': token,\n            }\n        );\n    } catch (e) {\n        logError(e, 'restore to collection Failed ');\n        throw e;\n    }\n};\nexport const moveToCollection = async (\n    fromCollectionID: number,\n    toCollection: Collection,\n    files: File[]\n) => {\n    try {\n        const token = getToken();\n        const fileKeysEncryptedWithNewCollection =\n            await encryptWithNewCollectionKey(toCollection, files);\n\n        const requestBody: MoveToCollectionRequest = {\n            fromCollectionID: fromCollectionID,\n            toCollectionID: toCollection.id,\n            files: fileKeysEncryptedWithNewCollection,\n        };\n        await HTTPService.post(\n            `${ENDPOINT}/collections/move-files`,\n            requestBody,\n            null,\n            {\n                'X-Auth-Token': token,\n            }\n        );\n    } catch (e) {\n        logError(e, 'move to collection Failed ');\n        throw e;\n    }\n};\n\nconst encryptWithNewCollectionKey = async (\n    newCollection: Collection,\n    files: File[]\n): Promise<EncryptedFileKey[]> => {\n    const fileKeysEncryptedWithNewCollection: EncryptedFileKey[] = [];\n    const worker = await new CryptoWorker();\n    for (const file of files) {\n        const newEncryptedKey: B64EncryptionResult = await worker.encryptToB64(\n            file.key,\n            newCollection.key\n        );\n        file.encryptedKey = newEncryptedKey.encryptedData;\n        file.keyDecryptionNonce = newEncryptedKey.nonce;\n\n        fileKeysEncryptedWithNewCollection.push({\n            id: file.id,\n            encryptedKey: file.encryptedKey,\n            keyDecryptionNonce: file.keyDecryptionNonce,\n        });\n    }\n    return fileKeysEncryptedWithNewCollection;\n};\nexport const removeFromCollection = async (\n    collection: Collection,\n    files: File[]\n) => {\n    try {\n        const token = getToken();\n        const request: RemoveFromCollectionRequest = {\n            collectionID: collection.id,\n            fileIDs: files.map((file) => file.id),\n        };\n\n        await HTTPService.post(\n            `${ENDPOINT}/collections/v2/remove-files`,\n            request,\n            null,\n            { 'X-Auth-Token': token }\n        );\n    } catch (e) {\n        logError(e, 'remove from collection failed ');\n        throw e;\n    }\n};\n\nexport const deleteCollection = async (\n    collectionID: number,\n    syncWithRemote: () => Promise<void>,\n    redirectToAll: () => void,\n    setDialogMessage: SetDialogMessage\n) => {\n    try {\n        const token = getToken();\n\n        await HTTPService.delete(\n            `${ENDPOINT}/collections/v2/${collectionID}`,\n            null,\n            null,\n            { 'X-Auth-Token': token }\n        );\n        await syncWithRemote();\n        redirectToAll();\n    } catch (e) {\n        logError(e, 'delete collection failed ');\n        setDialogMessage({\n            title: constants.ERROR,\n            content: constants.DELETE_COLLECTION_FAILED,\n            close: { variant: 'danger' },\n        });\n    }\n};\n\nexport const renameCollection = async (\n    collection: Collection,\n    newCollectionName: string\n) => {\n    const token = getToken();\n    const worker = await new CryptoWorker();\n    const {\n        encryptedData: encryptedName,\n        nonce: nameDecryptionNonce,\n    }: B64EncryptionResult = await worker.encryptUTF8(\n        newCollectionName,\n        collection.key\n    );\n    const collectionRenameRequest = {\n        collectionID: collection.id,\n        encryptedName,\n        nameDecryptionNonce,\n    };\n    await HTTPService.post(\n        `${ENDPOINT}/collections/rename`,\n        collectionRenameRequest,\n        null,\n        {\n            'X-Auth-Token': token,\n        }\n    );\n};\nexport const shareCollection = async (\n    collection: Collection,\n    withUserEmail: string\n) => {\n    try {\n        const worker = await new CryptoWorker();\n\n        const token = getToken();\n        const publicKey: string = await getPublicKey(withUserEmail);\n        const encryptedKey: string = await worker.boxSeal(\n            collection.key,\n            publicKey\n        );\n        const shareCollectionRequest = {\n            collectionID: collection.id,\n            email: withUserEmail,\n            encryptedKey,\n        };\n        await HTTPService.post(\n            `${ENDPOINT}/collections/share`,\n            shareCollectionRequest,\n            null,\n            {\n                'X-Auth-Token': token,\n            }\n        );\n    } catch (e) {\n        logError(e, 'share collection failed ');\n        throw e;\n    }\n};\n\nexport const unshareCollection = async (\n    collection: Collection,\n    withUserEmail: string\n) => {\n    try {\n        const token = getToken();\n        const shareCollectionRequest = {\n            collectionID: collection.id,\n            email: withUserEmail,\n        };\n        await HTTPService.post(\n            `${ENDPOINT}/collections/unshare`,\n            shareCollectionRequest,\n            null,\n            {\n                'X-Auth-Token': token,\n            }\n        );\n    } catch (e) {\n        logError(e, 'unshare collection failed ');\n        throw e;\n    }\n};\n\nexport const getFavCollection = async () => {\n    const collections = await getLocalCollections();\n    for (const collection of collections) {\n        if (collection.type === CollectionType.favorites) {\n            return collection;\n        }\n    }\n    return null;\n};\n\nexport const getNonEmptyCollections = (\n    collections: Collection[],\n    files: File[]\n) => {\n    const nonEmptyCollectionsIds = new Set<number>();\n    for (const file of files) {\n        nonEmptyCollectionsIds.add(file.collectionID);\n    }\n    return collections.filter((collection) =>\n        nonEmptyCollectionsIds.has(collection.id)\n    );\n};\n\nexport function sortCollections(\n    collections: Collection[],\n    collectionAndTheirLatestFile: CollectionAndItsLatestFile[],\n    sortBy: COLLECTION_SORT_BY\n) {\n    return moveFavCollectionToFront(\n        collections.sort((collectionA, collectionB) => {\n            switch (sortBy) {\n                case COLLECTION_SORT_BY.LATEST_FILE:\n                    return compareCollectionsLatestFile(\n                        collectionAndTheirLatestFile,\n                        collectionA,\n                        collectionB\n                    );\n                case COLLECTION_SORT_BY.MODIFICATION_TIME:\n                    return collectionB.updationTime - collectionA.updationTime;\n                case COLLECTION_SORT_BY.NAME:\n                    return collectionA.name.localeCompare(collectionB.name);\n            }\n        })\n    );\n}\n\nfunction compareCollectionsLatestFile(\n    collectionAndTheirLatestFile: CollectionAndItsLatestFile[],\n    collectionA: Collection,\n    collectionB: Collection\n) {\n    if (!collectionAndTheirLatestFile?.length) {\n        return 0;\n    }\n    const CollectionALatestFile = getCollectionLatestFile(\n        collectionAndTheirLatestFile,\n        collectionA\n    );\n    const CollectionBLatestFile = getCollectionLatestFile(\n        collectionAndTheirLatestFile,\n        collectionB\n    );\n    if (!CollectionALatestFile || !CollectionBLatestFile) {\n        return 0;\n    } else {\n        const sortedFiles = sortFiles([\n            CollectionALatestFile,\n            CollectionBLatestFile,\n        ]);\n        if (sortedFiles[0].id !== CollectionALatestFile.id) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n}\n\nfunction getCollectionLatestFile(\n    collectionAndTheirLatestFile: CollectionAndItsLatestFile[],\n    collection: Collection\n) {\n    const collectionAndItsLatestFile = collectionAndTheirLatestFile.filter(\n        (collectionAndItsLatestFile) =>\n            collectionAndItsLatestFile.collection.id === collection.id\n    );\n    if (collectionAndItsLatestFile.length === 1) {\n        return collectionAndItsLatestFile[0].file;\n    }\n}\n\nfunction moveFavCollectionToFront(collections: Collection[]) {\n    return collections.sort((collectionA, collectionB) =>\n        collectionA.type === CollectionType.favorites\n            ? -1\n            : collectionB.type === CollectionType.favorites\n            ? 1\n            : 0\n    );\n}\n","import React from 'react';\n\nexport default function CloseIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}>\n            <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\" />\n        </svg>\n    );\n}\n\nCloseIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport constants from 'utils/strings/constants';\nimport CloseIcon from './icons/CloseIcon';\n\nconst CloseButtonWrapper = styled.div`\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    cursor: pointer;\n`;\nconst DropDiv = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n`;\nconst Overlay = styled.div`\n    border-width: 8px;\n    left: 0;\n    top: 0;\n    outline: none;\n    transition: border 0.24s ease-in-out;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #fff;\n    font-size: 24px;\n    font-weight: 900;\n    text-align: center;\n    position: absolute;\n    border-color: #51cd7c;\n    border-style: solid;\n    background: rgba(0, 0, 0, 0.9);\n    z-index: 3000;\n`;\n\ntype Props = React.PropsWithChildren<{\n    getRootProps: any;\n    getInputProps: any;\n}>;\n\nexport default function FullScreenDropZone(props: Props) {\n    const [isDragActive, setIsDragActive] = useState(false);\n    const onDragEnter = () => setIsDragActive(true);\n    const onDragLeave = () => setIsDragActive(false);\n\n    useEffect(() => {\n        window.addEventListener('keydown', (event) => {\n            if (event.code === 'Escape') {\n                onDragLeave();\n            }\n        });\n    }, []);\n    return (\n        <DropDiv\n            {...props.getRootProps({\n                onDragEnter,\n            })}>\n            <input {...props.getInputProps()} />\n            {isDragActive && (\n                <Overlay onDrop={onDragLeave} onDragLeave={onDragLeave}>\n                    <CloseButtonWrapper onClick={onDragLeave}>\n                        <CloseIcon />\n                    </CloseButtonWrapper>\n                    {constants.UPLOAD_DROPZONE_MESSAGE}\n                </Overlay>\n            )}\n            {props.children}\n        </DropDiv>\n    );\n}\n","import React from 'react';\n\nexport enum ButtonVariant {\n    success = 'success',\n    danger = 'danger',\n    secondary = 'secondary',\n    warning = 'warning',\n}\nexport type LinkButtonProps = React.PropsWithChildren<{\n    onClick: () => void;\n    variant?: string;\n    style?: React.CSSProperties;\n}>;\n\nexport function getVariantColor(variant: string) {\n    switch (variant) {\n        case ButtonVariant.success:\n            return '#51cd7c';\n        case ButtonVariant.danger:\n            return '#c93f3f';\n        case ButtonVariant.secondary:\n            return '#858585';\n        case ButtonVariant.warning:\n            return '#D7BB63';\n        default:\n            return '#d1d1d1';\n    }\n}\nexport default function LinkButton(props: LinkButtonProps) {\n    return (\n        <h5\n            style={{\n                color: getVariantColor(props.variant),\n                cursor: 'pointer',\n                marginBottom: 0,\n                ...props.style,\n            }}\n            onClick={props?.onClick ?? (() => null)}>\n            {props.children}\n        </h5>\n    );\n}\n","import { useRouter } from 'next/router';\nimport { DeadCenter, SetLoading } from 'pages/gallery';\nimport { AppContext, FLASH_MESSAGE_TYPE } from 'pages/_app';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { disableTwoFactor, getTwoFactorStatus } from 'services/userService';\nimport { PAGES } from 'types';\nimport { getData, LS_KEYS, setData } from 'utils/storage/localStorage';\nimport constants from 'utils/strings/constants';\nimport { Label, Value, Row } from './Container';\nimport MessageDialog, { SetDialogMessage } from './MessageDialog';\n\ninterface Props {\n    show: boolean;\n    onHide: () => void;\n    setDialogMessage: SetDialogMessage;\n    setLoading: SetLoading;\n    closeSidebar: () => void;\n}\n\nfunction TwoFactorModal(props: Props) {\n    const router = useRouter();\n    const [isTwoFactorEnabled, setTwoFactorStatus] = useState(false);\n    const appContext = useContext(AppContext);\n\n    useEffect(() => {\n        if (!props.show) {\n            return;\n        }\n        const isTwoFactorEnabled =\n            getData(LS_KEYS.USER).isTwoFactorEnabled ?? false;\n        setTwoFactorStatus(isTwoFactorEnabled);\n        const main = async () => {\n            const isTwoFactorEnabled = await getTwoFactorStatus();\n            setTwoFactorStatus(isTwoFactorEnabled);\n            setData(LS_KEYS.USER, {\n                ...getData(LS_KEYS.USER),\n                isTwoFactorEnabled: false,\n            });\n        };\n        main();\n    }, [props.show]);\n    const warnTwoFactorDisable = async () => {\n        props.setDialogMessage({\n            title: constants.DISABLE_TWO_FACTOR,\n            staticBackdrop: true,\n            content: constants.DISABLE_TWO_FACTOR_MESSAGE,\n            close: { text: constants.CANCEL },\n            proceed: {\n                variant: 'danger',\n                text: constants.DISABLE,\n                action: twoFactorDisable,\n            },\n        });\n    };\n    const twoFactorDisable = async () => {\n        try {\n            await disableTwoFactor();\n            setData(LS_KEYS.USER, {\n                ...getData(LS_KEYS.USER),\n                isTwoFactorEnabled: false,\n            });\n            props.onHide();\n            props.closeSidebar();\n            appContext.setDisappearingFlashMessage({\n                message: constants.TWO_FACTOR_DISABLE_SUCCESS,\n                type: FLASH_MESSAGE_TYPE.INFO,\n            });\n        } catch (e) {\n            appContext.setDisappearingFlashMessage({\n                message: constants.TWO_FACTOR_DISABLE_FAILED,\n                type: FLASH_MESSAGE_TYPE.DANGER,\n            });\n        }\n    };\n    const warnTwoFactorReconfigure = async () => {\n        props.setDialogMessage({\n            title: constants.UPDATE_TWO_FACTOR,\n            staticBackdrop: true,\n            content: constants.UPDATE_TWO_FACTOR_MESSAGE,\n            close: { text: constants.CANCEL },\n            proceed: {\n                variant: 'success',\n                text: constants.UPDATE,\n                action: reconfigureTwoFactor,\n            },\n        });\n    };\n    const reconfigureTwoFactor = async () => {\n        router.push(PAGES.TWO_FACTOR_SETUP);\n    };\n    return (\n        <MessageDialog\n            show={props.show}\n            onHide={props.onHide}\n            attributes={{\n                title: constants.TWO_FACTOR_AUTHENTICATION,\n                staticBackdrop: true,\n            }}>\n            <div\n                {...(!isTwoFactorEnabled\n                    ? { style: { padding: '10px 10px 30px 10px' } }\n                    : { style: { padding: '10px' } })}>\n                {isTwoFactorEnabled ? (\n                    <>\n                        <Row>\n                            <Label>{constants.UPDATE_TWO_FACTOR_HINT}</Label>\n                            <Value>\n                                <Button\n                                    variant={'outline-success'}\n                                    onClick={warnTwoFactorReconfigure}\n                                    style={{ width: '100%' }}>\n                                    {constants.RECONFIGURE}\n                                </Button>\n                            </Value>\n                        </Row>\n                        <Row>\n                            <Label>{constants.DISABLE_TWO_FACTOR_HINT} </Label>\n                            <Value>\n                                <Button\n                                    variant={'outline-danger'}\n                                    onClick={warnTwoFactorDisable}\n                                    style={{ width: '100%' }}>\n                                    {constants.DISABLE}\n                                </Button>\n                            </Value>\n                        </Row>\n                    </>\n                ) : (\n                    <DeadCenter>\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            height=\"36px\"\n                            viewBox=\"0 0 24 24\"\n                            width=\"36px\"\n                            fill=\"#000000\">\n                            <g fill=\"none\">\n                                <path d=\"M0 0h24v24H0V0z\" />\n                                <path d=\"M0 0h24v24H0V0z\" opacity=\".87\" />\n                            </g>\n                            <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z\" />\n                        </svg>\n                        <p />\n                        <p>{constants.TWO_FACTOR_INFO}</p>\n                        <div style={{ height: '10px' }} />\n                        <Button\n                            variant=\"outline-success\"\n                            onClick={() => router.push(PAGES.TWO_FACTOR_SETUP)}>\n                            {constants.ENABLE_TWO_FACTOR}\n                        </Button>\n                    </DeadCenter>\n                )}\n            </div>\n        </MessageDialog>\n    );\n}\nexport default TwoFactorModal;\n","import { runningInBrowser } from 'utils/common';\nimport {\n    getExportPendingFiles,\n    getExportFailedFiles,\n    getFilesUploadedAfterLastExport,\n    dedupe,\n    getGoogleLikeMetadataFile,\n    getExportRecordFileUID,\n} from 'utils/export';\nimport { retryAsyncFunction } from 'utils/network';\nimport { logError } from 'utils/sentry';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport {\n    Collection,\n    getLocalCollections,\n    getNonEmptyCollections,\n} from './collectionService';\nimport downloadManager from './downloadManager';\nimport { File, FILE_TYPE, getLocalFiles } from './fileService';\nimport { decodeMotionPhoto } from './motionPhotoService';\nimport {\n    fileNameWithoutExtension,\n    generateStreamFromArrayBuffer,\n} from 'utils/file';\n\nexport interface ExportProgress {\n    current: number;\n    total: number;\n}\nexport interface ExportStats {\n    failed: number;\n    success: number;\n}\n\nexport interface ExportRecord {\n    stage: ExportStage;\n    lastAttemptTimestamp: number;\n    progress: ExportProgress;\n    queuedFiles: string[];\n    exportedFiles: string[];\n    failedFiles: string[];\n}\nexport enum ExportStage {\n    INIT,\n    INPROGRESS,\n    PAUSED,\n    FINISHED,\n}\n\nenum ExportNotification {\n    START = 'export started',\n    IN_PROGRESS = 'export already in progress',\n    FINISH = 'export finished',\n    FAILED = 'export failed',\n    ABORT = 'export aborted',\n    PAUSE = 'export paused',\n    UP_TO_DATE = `no new files to export`,\n}\n\nenum RecordType {\n    SUCCESS = 'success',\n    FAILED = 'failed',\n}\nexport enum ExportType {\n    NEW,\n    PENDING,\n    RETRY_FAILED,\n}\n\nconst EXPORT_RECORD_FILE_NAME = 'export_status.json';\nexport const METADATA_FOLDER_NAME = 'metadata';\n\nclass ExportService {\n    ElectronAPIs: any;\n\n    private exportInProgress: Promise<{ paused: boolean }> = null;\n    private recordUpdateInProgress = Promise.resolve();\n    private stopExport: boolean = false;\n    private pauseExport: boolean = false;\n\n    constructor() {\n        this.ElectronAPIs = runningInBrowser() && window['ElectronAPIs'];\n    }\n    async selectExportDirectory() {\n        return await this.ElectronAPIs.selectRootDirectory();\n    }\n    stopRunningExport() {\n        this.stopExport = true;\n    }\n    pauseRunningExport() {\n        this.pauseExport = true;\n    }\n    async exportFiles(\n        updateProgress: (progress: ExportProgress) => void,\n        exportType: ExportType\n    ) {\n        if (this.exportInProgress) {\n            this.ElectronAPIs.sendNotification(ExportNotification.IN_PROGRESS);\n            return this.exportInProgress;\n        }\n        this.ElectronAPIs.showOnTray('starting export');\n        const exportDir = getData(LS_KEYS.EXPORT)?.folder;\n        if (!exportDir) {\n            // no-export folder set\n            return;\n        }\n        let filesToExport: File[];\n        const allFiles = await getLocalFiles();\n        const collections = await getLocalCollections();\n        const nonEmptyCollections = getNonEmptyCollections(\n            collections,\n            allFiles\n        );\n        const exportRecord = await this.getExportRecord(exportDir);\n\n        if (exportType === ExportType.NEW) {\n            filesToExport = await getFilesUploadedAfterLastExport(\n                allFiles,\n                exportRecord\n            );\n        } else if (exportType === ExportType.RETRY_FAILED) {\n            filesToExport = await getExportFailedFiles(allFiles, exportRecord);\n        } else {\n            filesToExport = await getExportPendingFiles(allFiles, exportRecord);\n        }\n        this.exportInProgress = this.fileExporter(\n            filesToExport,\n            nonEmptyCollections,\n            updateProgress,\n            exportDir\n        );\n        const resp = await this.exportInProgress;\n        this.exportInProgress = null;\n        return resp;\n    }\n\n    async fileExporter(\n        files: File[],\n        collections: Collection[],\n        updateProgress: (progress: ExportProgress) => void,\n        dir: string\n    ): Promise<{ paused: boolean }> {\n        try {\n            if (!files?.length) {\n                this.ElectronAPIs.sendNotification(\n                    ExportNotification.UP_TO_DATE\n                );\n                return { paused: false };\n            }\n            this.stopExport = false;\n            this.pauseExport = false;\n            this.addFilesQueuedRecord(dir, files);\n            const failedFileCount = 0;\n\n            this.ElectronAPIs.showOnTray({\n                export_progress: `0 / ${files.length} files exported`,\n            });\n            updateProgress({\n                current: 0,\n                total: files.length,\n            });\n            this.ElectronAPIs.sendNotification(ExportNotification.START);\n\n            const collectionIDMap = new Map<number, string>();\n            for (const collection of collections) {\n                const collectionFolderPath = `${dir}/${\n                    collection.id\n                }_${this.sanitizeName(collection.name)}`;\n                await this.ElectronAPIs.checkExistsAndCreateCollectionDir(\n                    collectionFolderPath\n                );\n                await this.ElectronAPIs.checkExistsAndCreateCollectionDir(\n                    `${collectionFolderPath}/${METADATA_FOLDER_NAME}`\n                );\n                collectionIDMap.set(collection.id, collectionFolderPath);\n            }\n            for (const [index, file] of files.entries()) {\n                if (this.stopExport || this.pauseExport) {\n                    if (this.pauseExport) {\n                        this.ElectronAPIs.showOnTray({\n                            export_progress: `${index} / ${files.length} files exported (paused)`,\n                            paused: true,\n                        });\n                    }\n                    break;\n                }\n                const collectionPath = collectionIDMap.get(file.collectionID);\n                try {\n                    await this.downloadAndSave(file, collectionPath);\n                    await this.addFileExportRecord(\n                        dir,\n                        file,\n                        RecordType.SUCCESS\n                    );\n                } catch (e) {\n                    await this.addFileExportRecord(\n                        dir,\n                        file,\n                        RecordType.FAILED\n                    );\n                    logError(\n                        e,\n                        'download and save failed for file during export'\n                    );\n                }\n                this.ElectronAPIs.showOnTray({\n                    export_progress: `${index + 1} / ${\n                        files.length\n                    } files exported`,\n                });\n                updateProgress({ current: index + 1, total: files.length });\n            }\n            if (this.stopExport) {\n                this.ElectronAPIs.sendNotification(ExportNotification.ABORT);\n                this.ElectronAPIs.showOnTray();\n            } else if (this.pauseExport) {\n                this.ElectronAPIs.sendNotification(ExportNotification.PAUSE);\n                return { paused: true };\n            } else if (failedFileCount > 0) {\n                this.ElectronAPIs.sendNotification(ExportNotification.FAILED);\n                this.ElectronAPIs.showOnTray({\n                    retry_export: `export failed - retry export`,\n                });\n            } else {\n                this.ElectronAPIs.sendNotification(ExportNotification.FINISH);\n                this.ElectronAPIs.showOnTray();\n            }\n            return { paused: false };\n        } catch (e) {\n            logError(e, 'export failed ');\n        }\n    }\n    async addFilesQueuedRecord(folder: string, files: File[]) {\n        const exportRecord = await this.getExportRecord(folder);\n        exportRecord.queuedFiles = files.map(getExportRecordFileUID);\n        await this.updateExportRecord(exportRecord, folder);\n    }\n\n    async addFileExportRecord(folder: string, file: File, type: RecordType) {\n        const fileUID = getExportRecordFileUID(file);\n        const exportRecord = await this.getExportRecord(folder);\n        exportRecord.queuedFiles = exportRecord.queuedFiles.filter(\n            (queuedFilesUID) => queuedFilesUID !== fileUID\n        );\n        if (type === RecordType.SUCCESS) {\n            if (!exportRecord.exportedFiles) {\n                exportRecord.exportedFiles = [];\n            }\n            exportRecord.exportedFiles.push(fileUID);\n            exportRecord.failedFiles &&\n                (exportRecord.failedFiles = exportRecord.failedFiles.filter(\n                    (FailedFileUID) => FailedFileUID !== fileUID\n                ));\n        } else {\n            if (!exportRecord.failedFiles) {\n                exportRecord.failedFiles = [];\n            }\n            if (!exportRecord.failedFiles.find((x) => x === fileUID)) {\n                exportRecord.failedFiles.push(fileUID);\n            }\n        }\n        exportRecord.exportedFiles = dedupe(exportRecord.exportedFiles);\n        exportRecord.queuedFiles = dedupe(exportRecord.queuedFiles);\n        exportRecord.failedFiles = dedupe(exportRecord.failedFiles);\n        await this.updateExportRecord(exportRecord, folder);\n    }\n\n    async updateExportRecord(newData: Record<string, any>, folder?: string) {\n        await this.recordUpdateInProgress;\n        this.recordUpdateInProgress = (async () => {\n            try {\n                if (!folder) {\n                    folder = getData(LS_KEYS.EXPORT)?.folder;\n                }\n                const exportRecord = await this.getExportRecord(folder);\n                const newRecord = { ...exportRecord, ...newData };\n                await this.ElectronAPIs.setExportRecord(\n                    `${folder}/${EXPORT_RECORD_FILE_NAME}`,\n                    JSON.stringify(newRecord, null, 2)\n                );\n            } catch (e) {\n                logError(e, 'error updating Export Record');\n            }\n        })();\n    }\n\n    async getExportRecord(folder?: string): Promise<ExportRecord> {\n        try {\n            await this.recordUpdateInProgress;\n            if (!folder) {\n                folder = getData(LS_KEYS.EXPORT)?.folder;\n            }\n            const recordFile = await this.ElectronAPIs.getExportRecord(\n                `${folder}/${EXPORT_RECORD_FILE_NAME}`\n            );\n            if (recordFile) {\n                return JSON.parse(recordFile);\n            } else {\n                return {} as ExportRecord;\n            }\n        } catch (e) {\n            logError(e, 'export Record JSON parsing failed ');\n        }\n    }\n\n    async downloadAndSave(file: File, collectionPath: string) {\n        const uid = `${file.id}_${this.sanitizeName(file.metadata.title)}`;\n        const fileStream = await retryAsyncFunction(() =>\n            downloadManager.downloadFile(file)\n        );\n        if (file.metadata.fileType === FILE_TYPE.LIVE_PHOTO) {\n            this.exportMotionPhoto(fileStream, file, collectionPath);\n        } else {\n            this.saveMediaFile(collectionPath, uid, fileStream);\n            this.saveMetadataFile(collectionPath, uid, file.metadata);\n        }\n    }\n\n    private async exportMotionPhoto(\n        fileStream: ReadableStream<any>,\n        file: File,\n        collectionPath: string\n    ) {\n        const fileBlob = await new Response(fileStream).blob();\n        const originalName = fileNameWithoutExtension(file.metadata.title);\n        const motionPhoto = await decodeMotionPhoto(fileBlob, originalName);\n\n        const imageStream = generateStreamFromArrayBuffer(motionPhoto.image);\n        const imageUID = `${file.id}_${motionPhoto.imageNameTitle}`;\n        this.saveMediaFile(collectionPath, imageUID, imageStream);\n        this.saveMetadataFile(collectionPath, imageUID, file.metadata);\n\n        const videoStream = generateStreamFromArrayBuffer(motionPhoto.video);\n        const videoUID = `${file.id}_${motionPhoto.videoNameTitle}`;\n        this.saveMediaFile(collectionPath, videoUID, videoStream);\n        this.saveMetadataFile(collectionPath, videoUID, file.metadata);\n    }\n\n    private saveMediaFile(collectionPath, uid, fileStream) {\n        this.ElectronAPIs.saveStreamToDisk(\n            `${collectionPath}/${uid}`,\n            fileStream\n        );\n    }\n    private saveMetadataFile(collectionPath, uid, metadata) {\n        this.ElectronAPIs.saveFileToDisk(\n            `${collectionPath}/${METADATA_FOLDER_NAME}/${uid}.json`,\n            getGoogleLikeMetadataFile(uid, metadata)\n        );\n    }\n\n    private sanitizeName(name) {\n        return name.replaceAll('/', '_').replaceAll(' ', '_');\n    }\n\n    isExportInProgress = () => {\n        return this.exportInProgress !== null;\n    };\n}\nexport default new ExportService();\n","import { ExportRecord } from 'services/exportService';\nimport { File } from 'services/fileService';\nimport { MetadataObject } from 'services/upload/uploadService';\nimport { formatDate } from 'utils/file';\n\nexport const getExportRecordFileUID = (file: File) =>\n    `${file.id}_${file.collectionID}_${file.updationTime}`;\n\nexport const getExportPendingFiles = async (\n    allFiles: File[],\n    exportRecord: ExportRecord\n) => {\n    const queuedFiles = new Set(exportRecord?.queuedFiles);\n    const unExportedFiles = allFiles.filter((file) => {\n        if (queuedFiles.has(getExportRecordFileUID(file))) {\n            return file;\n        }\n    });\n    return unExportedFiles;\n};\n\nexport const getFilesUploadedAfterLastExport = async (\n    allFiles: File[],\n    exportRecord: ExportRecord\n) => {\n    const exportedFiles = new Set(exportRecord?.exportedFiles);\n    const unExportedFiles = allFiles.filter((file) => {\n        if (!exportedFiles.has(getExportRecordFileUID(file))) {\n            return file;\n        }\n    });\n    return unExportedFiles;\n};\n\nexport const getExportFailedFiles = async (\n    allFiles: File[],\n    exportRecord: ExportRecord\n) => {\n    const failedFiles = new Set(exportRecord?.failedFiles);\n    const filesToExport = allFiles.filter((file) => {\n        if (failedFiles.has(getExportRecordFileUID(file))) {\n            return file;\n        }\n    });\n    return filesToExport;\n};\n\nexport const dedupe = (files: any[]) => {\n    const fileSet = new Set(files);\n    const dedupedArray = new Array(...fileSet);\n    return dedupedArray;\n};\n\nexport const getGoogleLikeMetadataFile = (\n    uid: string,\n    metadata: MetadataObject\n) => {\n    const creationTime = Math.floor(metadata.creationTime / 1000000);\n    const modificationTime = Math.floor(metadata.modificationTime / 1000000);\n    return JSON.stringify(\n        {\n            title: uid,\n            creationTime: {\n                timestamp: creationTime,\n                formatted: formatDate(creationTime * 1000),\n            },\n            modificationTime: {\n                timestamp: modificationTime,\n                formatted: formatDate(modificationTime * 1000),\n            },\n            geoData: {\n                latitude: metadata.latitude,\n                longitude: metadata.longitude,\n            },\n        },\n        null,\n        2\n    );\n};\n","import React from 'react';\nimport { Button, ProgressBar } from 'react-bootstrap';\nimport { ExportProgress, ExportStage } from 'services/exportService';\nimport styled from 'styled-components';\nimport constants from 'utils/strings/constants';\n\nexport const ComfySpan = styled.span`\n    word-spacing: 1rem;\n    color: #ddd;\n`;\n\ninterface Props {\n    show: boolean;\n    onHide: () => void;\n    exportFolder: string;\n    exportSize: string;\n    exportStage: ExportStage;\n    exportProgress: ExportProgress;\n    resumeExport: () => void;\n    cancelExport: () => void;\n    pauseExport: () => void;\n}\n\nexport default function ExportInProgress(props: Props) {\n    return (\n        <>\n            <div\n                style={{\n                    marginBottom: '30px',\n                    padding: '0 5%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                }}>\n                <div style={{ marginBottom: '10px' }}>\n                    <ComfySpan>\n                        {' '}\n                        {props.exportProgress.current} /{' '}\n                        {props.exportProgress.total}{' '}\n                    </ComfySpan>{' '}\n                    <span style={{ marginLeft: '10px' }}>\n                        {' '}\n                        files exported{' '}\n                        {props.exportStage === ExportStage.PAUSED && `(paused)`}\n                    </span>\n                </div>\n                <div style={{ width: '100%', marginBottom: '30px' }}>\n                    <ProgressBar\n                        now={Math.round(\n                            (props.exportProgress.current * 100) /\n                                props.exportProgress.total\n                        )}\n                        animated={!(props.exportStage === ExportStage.PAUSED)}\n                        variant=\"upload-progress-bar\"\n                    />\n                </div>\n                <div\n                    style={{\n                        width: '100%',\n                        display: 'flex',\n                        justifyContent: 'space-around',\n                    }}>\n                    {props.exportStage === ExportStage.PAUSED ? (\n                        <Button\n                            block\n                            variant={'outline-secondary'}\n                            onClick={props.resumeExport}>\n                            {constants.RESUME}\n                        </Button>\n                    ) : (\n                        <Button\n                            block\n                            variant={'outline-secondary'}\n                            onClick={props.pauseExport}>\n                            {constants.PAUSE}\n                        </Button>\n                    )}\n                    <div style={{ width: '30px' }} />\n                    <Button\n                        block\n                        variant={'outline-danger'}\n                        onClick={props.cancelExport}>\n                        {constants.CANCEL}\n                    </Button>\n                </div>\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { ExportStats } from 'services/exportService';\nimport { formatDateTime } from 'utils/file';\nimport constants from 'utils/strings/constants';\nimport { Label, Row, Value } from './Container';\nimport { ComfySpan } from './ExportInProgress';\n\ninterface Props {\n    show: boolean;\n    onHide: () => void;\n    exportFolder: string;\n    exportSize: string;\n    lastExportTime: number;\n    exportStats: ExportStats;\n    updateExportFolder: (newFolder: string) => void;\n    exportFiles: () => void;\n    retryFailed: () => void;\n}\n\nexport default function ExportFinished(props: Props) {\n    const totalFiles = props.exportStats.failed + props.exportStats.success;\n    return (\n        <>\n            <div\n                style={{\n                    borderBottom: '1px solid #444',\n                    marginBottom: '20px',\n                    padding: '0 5%',\n                }}>\n                <Row>\n                    <Label width=\"40%\">{constants.LAST_EXPORT_TIME}</Label>\n                    <Value width=\"60%\">\n                        {formatDateTime(props.lastExportTime)}\n                    </Value>\n                </Row>\n                <Row>\n                    <Label width=\"60%\">\n                        {constants.SUCCESSFULLY_EXPORTED_FILES}\n                    </Label>\n                    <Value width=\"35%\">\n                        <ComfySpan>\n                            {props.exportStats.success} / {totalFiles}\n                        </ComfySpan>\n                    </Value>\n                </Row>\n                {props.exportStats.failed > 0 && (\n                    <Row>\n                        <Label width=\"60%\">\n                            {constants.FAILED_EXPORTED_FILES}\n                        </Label>\n                        <Value width=\"35%\">\n                            <ComfySpan>\n                                {props.exportStats.failed} / {totalFiles}\n                            </ComfySpan>\n                        </Value>\n                    </Row>\n                )}\n            </div>\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    justifyContent: 'space-around',\n                }}>\n                <Button\n                    block\n                    variant={'outline-secondary'}\n                    onClick={props.onHide}>\n                    {constants.CLOSE}\n                </Button>\n                <div style={{ width: '30px' }} />\n                {props.exportStats.failed !== 0 ? (\n                    <Button\n                        block\n                        variant={'outline-danger'}\n                        onClick={props.retryFailed}>\n                        {constants.RETRY_EXPORT_}\n                    </Button>\n                ) : (\n                    <Button\n                        block\n                        variant={'outline-success'}\n                        onClick={props.exportFiles}>\n                        {constants.EXPORT_AGAIN}\n                    </Button>\n                )}\n            </div>\n        </>\n    );\n}\n","import { DeadCenter } from 'pages/gallery';\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport constants from 'utils/strings/constants';\n\ninterface Props {\n    show: boolean;\n    onHide: () => void;\n    updateExportFolder: (newFolder: string) => void;\n    exportFolder: string;\n    startExport: () => void;\n    exportSize: string;\n    selectExportDirectory: () => void;\n}\nexport default function ExportInit(props: Props) {\n    return (\n        <>\n            <DeadCenter>\n                <Button\n                    variant=\"outline-success\"\n                    size=\"lg\"\n                    style={{\n                        padding: '6px 3em',\n                        margin: '0 20px',\n                        marginBottom: '20px',\n                        flex: 1,\n                        whiteSpace: 'nowrap',\n                    }}\n                    onClick={props.startExport}>\n                    {constants.START}\n                </Button>\n            </DeadCenter>\n        </>\n    );\n}\n","import React from 'react';\nexport default function FolderIcon(props) {\n    return (\n        <div>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                height={props.height}\n                viewBox={props.viewBox}\n                width={props.width}\n                fill=\"#000000\">\n                <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n                <path d=\"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z\" />\n            </svg>\n        </div>\n    );\n}\n\nFolderIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n    open: false,\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Rotate = styled.div<{ disabled }>`\n    width: 24px;\n    height: 27px;\n    ${(props) =>\n        !props.disabled && '-webkit-animation: rotation 1s infinite linear'};\n    cursor: ${(props) => props.disabled && 'pointer'};\n    transition-duration: 0.8s;\n    transition-property: transform;\n    &:hover {\n        color: #fff;\n        transform: rotate(90deg);\n        -webkit-transform: rotate(90deg);\n    }\n`;\nexport default function InProgressIcon(props) {\n    return (\n        <Rotate {...props}>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                height={props.height}\n                viewBox={props.viewBox}\n                width={props.width}\n                fill=\"#000000\">\n                <path d=\"M.01 0h24v24h-24V0z\" fill=\"none\" />\n                <path d=\"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z\" />\n            </svg>\n        </Rotate>\n    );\n}\nInProgressIcon.defaultProps = {\n    disabled: false,\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import isElectron from 'is-electron';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport exportService, {\n    ExportProgress,\n    ExportStage,\n    ExportStats,\n    ExportType,\n} from 'services/exportService';\nimport { getLocalFiles } from 'services/fileService';\nimport styled from 'styled-components';\nimport { sleep } from 'utils/common';\nimport { getExportRecordFileUID } from 'utils/export';\nimport { getData, LS_KEYS, setData } from 'utils/storage/localStorage';\nimport constants from 'utils/strings/constants';\nimport { Label, Row, Value } from './Container';\nimport ExportFinished from './ExportFinished';\nimport ExportInit from './ExportInit';\nimport ExportInProgress from './ExportInProgress';\nimport FolderIcon from './icons/FolderIcon';\nimport InProgressIcon from './icons/InProgressIcon';\nimport MessageDialog from './MessageDialog';\n\nconst FolderIconWrapper = styled.div`\n    width: 15%;\n    margin-left: 10px;\n    cursor: pointer;\n    padding: 3px;\n    border: 1px solid #444;\n    border-radius: 15%;\n    &:hover {\n        background-color: #444;\n    }\n`;\n\nconst ExportFolderPathContainer = styled.span`\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    width: 200px;\n\n    /* Beginning of string */\n    direction: rtl;\n    text-align: left;\n`;\n\ninterface Props {\n    show: boolean;\n    onHide: () => void;\n    usage: string;\n}\nexport default function ExportModal(props: Props) {\n    const [exportStage, setExportStage] = useState(ExportStage.INIT);\n    const [exportFolder, setExportFolder] = useState('');\n    const [exportSize, setExportSize] = useState('');\n    const [exportProgress, setExportProgress] = useState<ExportProgress>({\n        current: 0,\n        total: 0,\n    });\n    const [exportStats, setExportStats] = useState<ExportStats>({\n        failed: 0,\n        success: 0,\n    });\n    const [lastExportTime, setLastExportTime] = useState(0);\n\n    // ====================\n    // SIDE EFFECTS\n    // ====================\n    useEffect(() => {\n        if (!isElectron()) {\n            return;\n        }\n        setExportFolder(getData(LS_KEYS.EXPORT)?.folder);\n\n        exportService.ElectronAPIs.registerStopExportListener(stopExport);\n        exportService.ElectronAPIs.registerPauseExportListener(pauseExport);\n        exportService.ElectronAPIs.registerResumeExportListener(resumeExport);\n        exportService.ElectronAPIs.registerRetryFailedExportListener(\n            retryFailedExport\n        );\n    }, []);\n\n    useEffect(() => {\n        if (!exportFolder) {\n            return;\n        }\n        const main = async () => {\n            const exportInfo = await exportService.getExportRecord();\n            setExportStage(exportInfo?.stage ?? ExportStage.INIT);\n            setLastExportTime(exportInfo?.lastAttemptTimestamp);\n            setExportProgress(exportInfo?.progress ?? { current: 0, total: 0 });\n            setExportStats({\n                success: exportInfo?.exportedFiles?.length ?? 0,\n                failed: exportInfo?.failedFiles?.length ?? 0,\n            });\n            if (exportInfo?.stage === ExportStage.INPROGRESS) {\n                resumeExport();\n            }\n        };\n        main();\n    }, [exportFolder]);\n\n    useEffect(() => {\n        if (!props.show) {\n            return;\n        }\n        const main = async () => {\n            if (exportStage === ExportStage.FINISHED) {\n                const localFiles = await getLocalFiles();\n                const exportRecord = await exportService.getExportRecord();\n                const exportedFileCnt = exportRecord.exportedFiles.length;\n                const failedFilesCnt = exportRecord.failedFiles.length;\n                const syncedFilesCnt = localFiles.length;\n                if (syncedFilesCnt > exportedFileCnt + failedFilesCnt) {\n                    updateExportProgress({\n                        current: exportedFileCnt + failedFilesCnt,\n                        total: syncedFilesCnt,\n                    });\n                    const exportFileUIDs = new Set([\n                        ...exportRecord.exportedFiles,\n                        ...exportRecord.failedFiles,\n                    ]);\n                    const unExportedFiles = localFiles.filter(\n                        (file) =>\n                            !exportFileUIDs.has(getExportRecordFileUID(file))\n                    );\n                    exportService.addFilesQueuedRecord(\n                        exportFolder,\n                        unExportedFiles\n                    );\n                    updateExportStage(ExportStage.PAUSED);\n                }\n            }\n        };\n        main();\n    }, [props.show]);\n\n    useEffect(() => {\n        setExportSize(props.usage);\n    }, [props.usage]);\n\n    // =============\n    // STATE UPDATERS\n    // ==============\n    const updateExportFolder = (newFolder: string) => {\n        setExportFolder(newFolder);\n        setData(LS_KEYS.EXPORT, { folder: newFolder });\n    };\n\n    const updateExportStage = (newStage: ExportStage) => {\n        setExportStage(newStage);\n        exportService.updateExportRecord({ stage: newStage });\n    };\n\n    const updateExportTime = (newTime: number) => {\n        setLastExportTime(newTime);\n        exportService.updateExportRecord({ time: newTime });\n    };\n\n    const updateExportProgress = (newProgress: ExportProgress) => {\n        setExportProgress(newProgress);\n        exportService.updateExportRecord({ progress: newProgress });\n    };\n\n    // ======================\n    // HELPER FUNCTIONS\n    // =========================\n\n    const preExportRun = async () => {\n        const exportFolder = getData(LS_KEYS.EXPORT)?.folder;\n        if (!exportFolder) {\n            const folderSelected = await selectExportDirectory();\n            if (!folderSelected) {\n                // no-op as select folder aborted\n                return;\n            }\n        }\n        updateExportStage(ExportStage.INPROGRESS);\n        await sleep(100);\n    };\n    const postExportRun = async (paused: Boolean) => {\n        if (!paused) {\n            updateExportStage(ExportStage.FINISHED);\n            await sleep(100);\n            updateExportTime(Date.now());\n            syncExportStatsWithReport();\n        }\n    };\n    const startExport = async () => {\n        await preExportRun();\n        updateExportProgress({ current: 0, total: 0 });\n        const { paused } = await exportService.exportFiles(\n            updateExportProgress,\n            ExportType.NEW\n        );\n        await postExportRun(paused);\n    };\n\n    const stopExport = async () => {\n        exportService.stopRunningExport();\n        postExportRun(false);\n    };\n\n    const pauseExport = () => {\n        updateExportStage(ExportStage.PAUSED);\n        exportService.pauseRunningExport();\n        postExportRun(true);\n    };\n\n    const resumeExport = async () => {\n        const exportRecord = await exportService.getExportRecord();\n        await preExportRun();\n\n        const pausedStageProgress = exportRecord.progress;\n        setExportProgress(pausedStageProgress);\n\n        const updateExportStatsWithOffset = (progress: ExportProgress) =>\n            updateExportProgress({\n                current: pausedStageProgress.current + progress.current,\n                total: pausedStageProgress.current + progress.total,\n            });\n        const { paused } = await exportService.exportFiles(\n            updateExportStatsWithOffset,\n            ExportType.PENDING\n        );\n\n        await postExportRun(paused);\n    };\n\n    const retryFailedExport = async () => {\n        await preExportRun();\n        updateExportProgress({ current: 0, total: exportStats.failed });\n\n        const { paused } = await exportService.exportFiles(\n            updateExportProgress,\n            ExportType.RETRY_FAILED\n        );\n        await postExportRun(paused);\n    };\n\n    const syncExportStatsWithReport = async () => {\n        const exportRecord = await exportService.getExportRecord();\n        const failed = exportRecord?.failedFiles?.length ?? 0;\n        const success = exportRecord?.exportedFiles?.length ?? 0;\n        setExportStats({ failed, success });\n    };\n\n    const selectExportDirectory = async () => {\n        const newFolder = await exportService.selectExportDirectory();\n        if (newFolder) {\n            updateExportFolder(newFolder);\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const ExportDynamicState = () => {\n        switch (exportStage) {\n            case ExportStage.INIT:\n                return (\n                    <ExportInit\n                        {...props}\n                        exportFolder={exportFolder}\n                        exportSize={exportSize}\n                        updateExportFolder={updateExportFolder}\n                        startExport={startExport}\n                        selectExportDirectory={selectExportDirectory}\n                    />\n                );\n            case ExportStage.INPROGRESS:\n            case ExportStage.PAUSED:\n                return (\n                    <ExportInProgress\n                        {...props}\n                        exportFolder={exportFolder}\n                        exportSize={exportSize}\n                        exportStage={exportStage}\n                        exportProgress={exportProgress}\n                        resumeExport={resumeExport}\n                        cancelExport={stopExport}\n                        pauseExport={pauseExport}\n                    />\n                );\n            case ExportStage.FINISHED:\n                return (\n                    <ExportFinished\n                        {...props}\n                        exportFolder={exportFolder}\n                        exportSize={exportSize}\n                        updateExportFolder={updateExportFolder}\n                        lastExportTime={lastExportTime}\n                        exportStats={exportStats}\n                        exportFiles={startExport}\n                        retryFailed={retryFailedExport}\n                    />\n                );\n\n            default:\n                return <></>;\n        }\n    };\n\n    return (\n        <MessageDialog\n            show={props.show}\n            onHide={props.onHide}\n            attributes={{\n                title: constants.EXPORT_DATA,\n            }}>\n            <div\n                style={{\n                    borderBottom: '1px solid #444',\n                    marginBottom: '20px',\n                    padding: '0 5%',\n                    width: '450px',\n                }}>\n                <Row>\n                    <Label width=\"40%\">{constants.DESTINATION}</Label>\n                    <Value width=\"60%\">\n                        {!exportFolder ? (\n                            <Button\n                                variant={'outline-success'}\n                                size={'sm'}\n                                onClick={selectExportDirectory}>\n                                {constants.SELECT_FOLDER}\n                            </Button>\n                        ) : (\n                            <>\n                                {/* <span style={{ overflow: 'hidden', direction: 'rtl', height: '1.5rem', width: '90%', whiteSpace: 'nowrap' }}> */}\n                                <ExportFolderPathContainer>\n                                    {exportFolder}\n                                </ExportFolderPathContainer>\n                                {/* </span> */}\n                                {(exportStage === ExportStage.FINISHED ||\n                                    exportStage === ExportStage.INIT) && (\n                                    <FolderIconWrapper\n                                        onClick={selectExportDirectory}>\n                                        <FolderIcon />\n                                    </FolderIconWrapper>\n                                )}\n                            </>\n                        )}\n                    </Value>\n                </Row>\n                <Row>\n                    <Label width=\"40%\">{constants.TOTAL_EXPORT_SIZE} </Label>\n                    <Value width=\"60%\">\n                        {exportSize ? `${exportSize}` : <InProgressIcon />}\n                    </Value>\n                </Row>\n            </div>\n            <ExportDynamicState />\n        </MessageDialog>\n    );\n}\n","import React, { useState } from 'react';\nimport constants from 'utils/strings/constants';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { Button, Col, Table } from 'react-bootstrap';\nimport { DeadCenter } from 'pages/gallery';\nimport { User } from 'services/userService';\nimport {\n    Collection,\n    shareCollection,\n    unshareCollection,\n} from 'services/collectionService';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport SubmitButton from './SubmitButton';\nimport MessageDialog from './MessageDialog';\n\ninterface Props {\n    show: boolean;\n    onHide: () => void;\n    collection: Collection;\n    syncWithRemote: () => Promise<void>;\n}\ninterface formValues {\n    email: string;\n}\ninterface ShareeProps {\n    sharee: User;\n    collectionUnshare: (sharee: User) => void;\n}\n\nfunction CollectionShare(props: Props) {\n    const [loading, setLoading] = useState(false);\n    const collectionShare = async (\n        { email }: formValues,\n        { resetForm, setFieldError }: FormikHelpers<formValues>\n    ) => {\n        try {\n            setLoading(true);\n            const user: User = getData(LS_KEYS.USER);\n            if (email === user.email) {\n                setFieldError('email', constants.SHARE_WITH_SELF);\n            } else if (\n                props.collection.sharees.find((value) => value.email === email)\n            ) {\n                setFieldError('email', constants.ALREADY_SHARED(email));\n            } else {\n                await shareCollection(props.collection, email);\n                await props.syncWithRemote();\n                resetForm();\n            }\n        } catch (e) {\n            let errorMessage = null;\n            switch (e?.status) {\n                case 400:\n                    errorMessage = constants.SHARING_BAD_REQUEST_ERROR;\n                    break;\n                case 402:\n                    errorMessage = constants.SHARING_DISABLED_FOR_FREE_ACCOUNTS;\n                    break;\n                case 404:\n                    errorMessage = constants.USER_DOES_NOT_EXIST;\n                    break;\n                default:\n                    errorMessage = `${constants.UNKNOWN_ERROR} ${e.message}`;\n            }\n            setFieldError('email', errorMessage);\n        } finally {\n            setLoading(false);\n        }\n    };\n    const collectionUnshare = async (sharee) => {\n        await unshareCollection(props.collection, sharee.email);\n        await props.syncWithRemote();\n    };\n\n    const ShareeRow = ({ sharee, collectionUnshare }: ShareeProps) => (\n        <tr>\n            <td>{sharee.email}</td>\n            <td>\n                <Button\n                    variant=\"outline-danger\"\n                    style={{\n                        height: '25px',\n                        lineHeight: 0,\n                        padding: 0,\n                        width: '25px',\n                        fontSize: '1.2em',\n                        fontWeight: 900,\n                    }}\n                    onClick={() => collectionUnshare(sharee)}>\n                    -\n                </Button>\n            </td>\n        </tr>\n    );\n    return (\n        <MessageDialog\n            show={props.show}\n            onHide={props.onHide}\n            attributes={{ title: constants.SHARE_COLLECTION }}>\n            <DeadCenter style={{ width: '85%', margin: 'auto' }}>\n                <h6 style={{ marginTop: '8px' }}>\n                    {constants.SHARE_WITH_PEOPLE}\n                </h6>\n                <p />\n                <Formik<formValues>\n                    initialValues={{ email: '' }}\n                    validationSchema={Yup.object().shape({\n                        email: Yup.string()\n                            .email(constants.EMAIL_ERROR)\n                            .required(constants.REQUIRED),\n                    })}\n                    validateOnChange={false}\n                    validateOnBlur={false}\n                    onSubmit={collectionShare}>\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleSubmit,\n                    }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                            <Form.Row>\n                                <Form.Group\n                                    as={Col}\n                                    xs={10}\n                                    controlId=\"formHorizontalEmail\">\n                                    <Form.Control\n                                        type=\"email\"\n                                        placeholder={constants.ENTER_EMAIL}\n                                        value={values.email}\n                                        onChange={handleChange('email')}\n                                        isInvalid={Boolean(\n                                            touched.email && errors.email\n                                        )}\n                                        autoFocus\n                                        disabled={loading}\n                                    />\n                                    <FormControl.Feedback type=\"invalid\">\n                                        {errors.email}\n                                    </FormControl.Feedback>\n                                </Form.Group>\n                                <Form.Group\n                                    as={Col}\n                                    xs={2}\n                                    controlId=\"formHorizontalEmail\">\n                                    <SubmitButton\n                                        loading={loading}\n                                        inline\n                                        buttonText=\"+\"\n                                    />\n                                </Form.Group>\n                            </Form.Row>\n                        </Form>\n                    )}\n                </Formik>\n                <div\n                    style={{\n                        height: '1px',\n                        margin: '10px 0px',\n                        background: '#444',\n                        width: '100%',\n                    }}\n                />\n                {props.collection?.sharees.length > 0 ? (\n                    <>\n                        <p>{constants.SHAREES}</p>\n\n                        <Table striped bordered hover variant=\"dark\" size=\"sm\">\n                            <tbody>\n                                {props.collection?.sharees.map((sharee) => (\n                                    <ShareeRow\n                                        key={sharee.email}\n                                        sharee={sharee}\n                                        collectionUnshare={collectionUnshare}\n                                    />\n                                ))}\n                            </tbody>\n                        </Table>\n                    </>\n                ) : (\n                    <div style={{ marginTop: '12px' }}>\n                        {constants.ZERO_SHAREES()}\n                    </div>\n                )}\n            </DeadCenter>\n        </MessageDialog>\n    );\n}\nexport default CollectionShare;\n","import React from 'react';\n\nexport default function NavigateNext(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height=\"40\"\n            viewBox=\"0 0 24 24\"\n            width=\"24px\"\n            fill=\"currentColor\"\n            {...props}>\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\n        </svg>\n    );\n}\n\nNavigateNext.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport NavigateNext from './icons/NavigateNext';\n\nexport enum SCROLL_DIRECTION {\n    LEFT = -1,\n    RIGHT = +1,\n}\n\nconst Wrapper = styled.button<{ direction: SCROLL_DIRECTION }>`\n    height: 40px;\n    width: 40px;\n    background-color: #191919;\n    border: none;\n    color: #eee;\n    z-index: 1;\n    position: absolute;\n    ${(props) =>\n        props.direction === SCROLL_DIRECTION.LEFT\n            ? 'margin-right: 10px;'\n            : 'margin-left: 10px;'}\n    ${(props) =>\n        props.direction === SCROLL_DIRECTION.LEFT ? 'left: 0;' : 'right: 0;'}\n\n    & > svg {\n        ${(props) =>\n            props.direction === SCROLL_DIRECTION.LEFT &&\n            'transform:rotate(180deg);'}\n        border-radius: 50%;\n        height: 30px;\n        width: 30px;\n    }\n\n    &:hover > svg {\n        background-color: #555;\n    }\n\n    &:hover {\n        color: #fff;\n    }\n\n    &::after {\n        content: ' ';\n        background: linear-gradient(\n            to\n                ${(props) =>\n                    props.direction === SCROLL_DIRECTION.LEFT\n                        ? 'right'\n                        : 'left'},\n            #191919 5%,\n            rgba(255, 255, 255, 0) 80%\n        );\n        position: absolute;\n        top: 0;\n        width: 40px;\n        height: 40px;\n        ${(props) =>\n            props.direction === SCROLL_DIRECTION.LEFT\n                ? 'left: 40px;'\n                : 'right: 40px;'}\n    }\n`;\n\nconst NavigationButton = ({ scrollDirection, ...rest }) => (\n    <Wrapper direction={scrollDirection} {...rest}>\n        <NavigateNext />\n    </Wrapper>\n);\nexport default NavigationButton;\n","import {\n    addToCollection,\n    Collection,\n    CollectionType,\n    moveToCollection,\n    removeFromCollection,\n    restoreToCollection,\n} from 'services/collectionService';\nimport { getSelectedFiles } from 'utils/file';\nimport { File } from 'services/fileService';\nimport { CustomError } from 'utils/common/errorUtil';\nimport { SelectedState } from 'pages/gallery';\nimport { User } from 'services/userService';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\n\nexport enum COLLECTION_OPS_TYPE {\n    ADD,\n    MOVE,\n    REMOVE,\n    RESTORE,\n}\nexport async function handleCollectionOps(\n    type: COLLECTION_OPS_TYPE,\n    setCollectionSelectorView: (value: boolean) => void,\n    selected: SelectedState,\n    files: File[],\n    setActiveCollection: (id: number) => void,\n    collection: Collection\n) {\n    setCollectionSelectorView(false);\n    const selectedFiles = getSelectedFiles(selected, files);\n    switch (type) {\n        case COLLECTION_OPS_TYPE.ADD:\n            await addToCollection(collection, selectedFiles);\n            break;\n        case COLLECTION_OPS_TYPE.MOVE:\n            await moveToCollection(\n                selected.collectionID,\n                collection,\n                selectedFiles\n            );\n            break;\n        case COLLECTION_OPS_TYPE.REMOVE:\n            await removeFromCollection(collection, selectedFiles);\n            break;\n        case COLLECTION_OPS_TYPE.RESTORE:\n            await restoreToCollection(collection, selectedFiles);\n            break;\n        default:\n            throw Error(CustomError.INVALID_COLLECTION_OPERATION);\n    }\n    setActiveCollection(collection.id);\n}\n\nexport function getSelectedCollection(\n    collectionID: number,\n    collections: Collection[]\n) {\n    return collections.find((collection) => collection.id === collectionID);\n}\n\nexport function isSharedCollection(\n    collectionID: number,\n    collections: Collection[]\n) {\n    const user: User = getData(LS_KEYS.USER);\n\n    const collection = getSelectedCollection(collectionID, collections);\n    if (!collection) {\n        return false;\n    }\n    return collection?.owner.id !== user.id;\n}\n\nexport function isFavoriteCollection(\n    collectionID: number,\n    collections: Collection[]\n) {\n    const collection = getSelectedCollection(collectionID, collections);\n    if (!collection) {\n        return false;\n    } else {\n        return collection.type === CollectionType.favorites;\n    }\n}\n","import React from 'react';\nimport { SetDialogMessage } from 'components/MessageDialog';\nimport { ListGroup, Popover } from 'react-bootstrap';\nimport {\n    Collection,\n    deleteCollection,\n    renameCollection,\n} from 'services/collectionService';\nimport { getSelectedCollection } from 'utils/collection';\nimport constants from 'utils/strings/constants';\nimport { SetCollectionNamerAttributes } from './CollectionNamer';\nimport LinkButton, { ButtonVariant, LinkButtonProps } from './LinkButton';\n\ninterface Props {\n    syncWithRemote: () => Promise<void>;\n    setCollectionNamerAttributes: SetCollectionNamerAttributes;\n    collections: Collection[];\n    selectedCollectionID: number;\n    setDialogMessage: SetDialogMessage;\n    startLoadingBar: () => void;\n    showCollectionShareModal: () => void;\n    redirectToAll: () => void;\n}\n\nexport const MenuLink = ({ children, ...props }: LinkButtonProps) => (\n    <LinkButton\n        style={{ fontSize: '14px', fontWeight: 700, padding: '8px 1em' }}\n        {...props}>\n        {children}\n    </LinkButton>\n);\n\nexport const MenuItem = (props: { children: any }) => (\n    <ListGroup.Item\n        style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: '#282828',\n            padding: 0,\n        }}>\n        {props.children}\n    </ListGroup.Item>\n);\n\nconst CollectionOptions = (props: Props) => {\n    const collectionRename = async (\n        selectedCollection: Collection,\n        newName: string\n    ) => {\n        if (selectedCollection.name !== newName) {\n            await renameCollection(selectedCollection, newName);\n            props.syncWithRemote();\n        }\n    };\n    const showRenameCollectionModal = () => {\n        props.setCollectionNamerAttributes({\n            title: constants.RENAME_COLLECTION,\n            buttonText: constants.RENAME,\n            autoFilledName: getSelectedCollection(\n                props.selectedCollectionID,\n                props.collections\n            )?.name,\n            callback: (newName) => {\n                props.startLoadingBar();\n                collectionRename(\n                    getSelectedCollection(\n                        props.selectedCollectionID,\n                        props.collections\n                    ),\n                    newName\n                );\n            },\n        });\n    };\n    const confirmDeleteCollection = () => {\n        props.setDialogMessage({\n            title: constants.CONFIRM_DELETE_COLLECTION,\n            content: constants.DELETE_COLLECTION_MESSAGE(),\n            staticBackdrop: true,\n            proceed: {\n                text: constants.DELETE_COLLECTION,\n                action: () => {\n                    props.startLoadingBar();\n                    deleteCollection(\n                        props.selectedCollectionID,\n                        props.syncWithRemote,\n                        props.redirectToAll,\n                        props.setDialogMessage\n                    );\n                },\n                variant: 'danger',\n            },\n            close: {\n                text: constants.CANCEL,\n            },\n        });\n    };\n\n    return (\n        <Popover id=\"collection-options\" style={{ borderRadius: '10px' }}>\n            <Popover.Content style={{ padding: 0, border: 'none' }}>\n                <ListGroup style={{ borderRadius: '8px' }}>\n                    <MenuItem>\n                        <MenuLink onClick={showRenameCollectionModal}>\n                            {constants.RENAME}\n                        </MenuLink>\n                    </MenuItem>\n                    <MenuItem>\n                        <MenuLink onClick={props.showCollectionShareModal}>\n                            {constants.SHARE}\n                        </MenuLink>\n                    </MenuItem>\n                    <MenuItem>\n                        <MenuLink\n                            variant={ButtonVariant.danger}\n                            onClick={confirmDeleteCollection}>\n                            {constants.DELETE}\n                        </MenuLink>\n                    </MenuItem>\n                </ListGroup>\n            </Popover.Content>\n        </Popover>\n    );\n};\n\nexport default CollectionOptions;\n","import React from 'react';\n\nexport default function SortIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}>\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n            <path d=\"M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z\" />\n        </svg>\n    );\n}\n\nSortIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function TickIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\" />\n        </svg>\n    );\n}\n\nTickIcon.defaultProps = {\n    height: 20,\n    width: 20,\n    viewBox: '0 0 24 24',\n};\n","import { Value } from 'components/Container';\nimport TickIcon from 'components/icons/TickIcon';\nimport React from 'react';\nimport { ListGroup, Popover, Row } from 'react-bootstrap';\nimport { COLLECTION_SORT_BY } from 'services/collectionService';\nimport styled from 'styled-components';\nimport constants from 'utils/strings/constants';\nimport { MenuItem, MenuLink } from './CollectionOptions';\n\ninterface OptionProps {\n    activeSortBy: COLLECTION_SORT_BY;\n    setCollectionSortBy: (sortBy: COLLECTION_SORT_BY) => void;\n}\n\nconst TickWrapper = styled.span`\n    color: #aaa;\n    margin-left: 5px;\n`;\n\nconst SortByOptionCreator =\n    ({ setCollectionSortBy, activeSortBy }: OptionProps) =>\n    (props: { sortBy: COLLECTION_SORT_BY; children: any }) =>\n        (\n            <MenuItem>\n                <Row>\n                    <Value width=\"20px\">\n                        {activeSortBy === props.sortBy && (\n                            <TickWrapper>\n                                <TickIcon />\n                            </TickWrapper>\n                        )}\n                    </Value>\n                    <Value width=\"165px\">\n                        <MenuLink\n                            onClick={() => setCollectionSortBy(props.sortBy)}\n                            variant={\n                                activeSortBy === props.sortBy && 'success'\n                            }>\n                            {props.children}\n                        </MenuLink>\n                    </Value>\n                </Row>\n            </MenuItem>\n        );\n\nconst CollectionSortOptions = (props: OptionProps) => {\n    const SortByOption = SortByOptionCreator(props);\n\n    return (\n        <Popover id=\"collection-sort-options\" style={{ borderRadius: '10px' }}>\n            <Popover.Content\n                style={{ padding: 0, border: 'none', width: '185px' }}>\n                <ListGroup style={{ borderRadius: '8px' }}>\n                    <SortByOption sortBy={COLLECTION_SORT_BY.LATEST_FILE}>\n                        {constants.SORT_BY_LATEST_PHOTO}\n                    </SortByOption>\n                    <SortByOption sortBy={COLLECTION_SORT_BY.MODIFICATION_TIME}>\n                        {constants.SORT_BY_MODIFICATION_TIME}\n                    </SortByOption>\n                    <SortByOption sortBy={COLLECTION_SORT_BY.NAME}>\n                        {constants.SORT_BY_COLLECTION_NAME}\n                    </SortByOption>\n                </ListGroup>\n            </Popover.Content>\n        </Popover>\n    );\n};\n\nexport default CollectionSortOptions;\n","import React from 'react';\n\nexport default function DeleteIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\n        </svg>\n    );\n}\n\nDeleteIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n    open: false,\n};\n","import React from 'react';\n\nexport default function AddIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <g>\n                <rect fill=\"none\" height=\"24\" width=\"24\" />\n            </g>\n            <g>\n                <g>\n                    <path d=\"M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6V13z\" />\n                </g>\n            </g>\n        </svg>\n    );\n}\n\nAddIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function Archive(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M10 3h4v5h3l-5 5-5-5h3v-5zm8.546 0h-2.344l5.467 9h-4.669l-2.25 3h-5.5l-2.25-3h-4.666l5.46-9h-2.317l-5.477 8.986v9.014h24v-9.014l-5.454-8.986z\" />\n        </svg>\n    );\n}\n\nArchive.defaultProps = {\n    height: 28,\n    width: 20,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function MoveIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}>\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n            <path d=\"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8-8-8z\" />\n        </svg>\n    );\n}\n\nMoveIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function UnArchive(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M24 11.986v9.014h-24v-9.014l5.477-8.986h2.317l-5.46 9h4.666l2.25 3h5.5l2.25-3h4.669l-5.467-9h2.344l5.454 8.986zm-10-3.986h3l-5-5-5 5h3v5h4v-5zm-11.666 4\" />\n        </svg>\n    );\n}\n\nUnArchive.defaultProps = {\n    height: 28,\n    width: 20,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function RemoveIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n        </svg>\n    );\n}\n\nRemoveIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function RestoreIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n            <path d=\"M13 3c-4.97 0-9 4.03-9 9H1l4 3.99L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.25 2.52.77-1.28-3.52-2.09V8z\" />\n        </svg>\n    );\n}\n\nRestoreIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function ClockIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            {...props}>\n            <path d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm1 12v-6h-2v8h7v-2h-5z\" />\n        </svg>\n    );\n}\n\nClockIcon.defaultProps = {\n    height: 20,\n    width: 20,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function DownloadIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <g>\n                <rect fill=\"none\" height=\"24\" width=\"24\" />\n            </g>\n            <g>\n                <path d=\"M5,20h14v-2H5V20z M19,9h-4V3H9v6H5l7,7L19,9z\" />\n            </g>\n        </svg>\n    );\n}\n\nDownloadIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import { SetDialogMessage } from 'components/MessageDialog';\nimport React, { useEffect, useState } from 'react';\nimport { SetCollectionSelectorAttributes } from './CollectionSelector';\nimport styled from 'styled-components';\nimport Navbar from 'components/Navbar';\nimport DeleteIcon from 'components/icons/DeleteIcon';\nimport CloseIcon from 'components/icons/CloseIcon';\nimport AddIcon from 'components/icons/AddIcon';\nimport { IconButton } from 'components/Container';\nimport constants from 'utils/strings/constants';\nimport Archive from 'components/icons/Archive';\nimport MoveIcon from 'components/icons/MoveIcon';\nimport { COLLECTION_OPS_TYPE } from 'utils/collection';\nimport { ALL_SECTION, ARCHIVE_SECTION, TRASH_SECTION } from './Collections';\nimport UnArchive from 'components/icons/UnArchive';\nimport { OverlayTrigger } from 'react-bootstrap';\nimport { Collection } from 'services/collectionService';\nimport RemoveIcon from 'components/icons/RemoveIcon';\nimport RestoreIcon from 'components/icons/RestoreIcon';\nimport ClockIcon from 'components/icons/ClockIcon';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport {\n    FIX_CREATION_TIME_VISIBLE_TO_USER_IDS,\n    User,\n} from 'services/userService';\nimport DownloadIcon from 'components/icons/DownloadIcon';\n\ninterface Props {\n    addToCollectionHelper: (collection: Collection) => void;\n    moveToCollectionHelper: (collection: Collection) => void;\n    restoreToCollectionHelper: (collection: Collection) => void;\n    showCreateCollectionModal: (opsType: COLLECTION_OPS_TYPE) => () => void;\n    setDialogMessage: SetDialogMessage;\n    setCollectionSelectorAttributes: SetCollectionSelectorAttributes;\n    deleteFileHelper: (permanent?: boolean) => void;\n    removeFromCollectionHelper: () => void;\n    fixTimeHelper: () => void;\n    downloadHelper: () => void;\n    count: number;\n    clearSelection: () => void;\n    archiveFilesHelper: () => void;\n    unArchiveFilesHelper: () => void;\n    activeCollection: number;\n    isFavoriteCollection: boolean;\n}\n\nconst SelectionBar = styled(Navbar)`\n    position: fixed;\n    top: 0;\n    color: #fff;\n    z-index: 1001;\n    width: 100%;\n    padding: 0 16px;\n`;\n\nconst SelectionContainer = styled.div`\n    flex: 1;\n    align-items: center;\n    display: flex;\n`;\n\ninterface IconWithMessageProps {\n    children?: any;\n    message: string;\n}\nexport const IconWithMessage = (props: IconWithMessageProps) => (\n    <OverlayTrigger\n        placement=\"bottom\"\n        overlay={<p style={{ zIndex: 1002 }}>{props.message}</p>}>\n        {props.children}\n    </OverlayTrigger>\n);\n\nconst SelectedFileOptions = ({\n    addToCollectionHelper,\n    moveToCollectionHelper,\n    restoreToCollectionHelper,\n    showCreateCollectionModal,\n    removeFromCollectionHelper,\n    fixTimeHelper,\n    setDialogMessage,\n    setCollectionSelectorAttributes,\n    deleteFileHelper,\n    downloadHelper,\n    count,\n    clearSelection,\n    archiveFilesHelper,\n    unArchiveFilesHelper,\n    activeCollection,\n    isFavoriteCollection,\n}: Props) => {\n    const [showFixCreationTime, setShowFixCreationTime] = useState(false);\n    useEffect(() => {\n        const user: User = getData(LS_KEYS.USER);\n        const showFixCreationTime =\n            FIX_CREATION_TIME_VISIBLE_TO_USER_IDS.includes(user?.id);\n        setShowFixCreationTime(showFixCreationTime);\n    }, []);\n    const addToCollection = () =>\n        setCollectionSelectorAttributes({\n            callback: addToCollectionHelper,\n            showNextModal: showCreateCollectionModal(COLLECTION_OPS_TYPE.ADD),\n            title: constants.ADD_TO_COLLECTION,\n            fromCollection: activeCollection,\n        });\n\n    const trashHandler = () =>\n        setDialogMessage({\n            title: constants.CONFIRM_DELETE,\n            content: constants.TRASH_MESSAGE,\n            staticBackdrop: true,\n            proceed: {\n                action: deleteFileHelper,\n                text: constants.MOVE_TO_TRASH,\n                variant: 'danger',\n            },\n            close: { text: constants.CANCEL },\n        });\n\n    const permanentlyDeleteHandler = () =>\n        setDialogMessage({\n            title: constants.CONFIRM_DELETE,\n            content: constants.DELETE_MESSAGE,\n            staticBackdrop: true,\n            proceed: {\n                action: () => deleteFileHelper(true),\n                text: constants.DELETE,\n                variant: 'danger',\n            },\n            close: { text: constants.CANCEL },\n        });\n\n    const restoreHandler = () =>\n        setCollectionSelectorAttributes({\n            callback: restoreToCollectionHelper,\n            showNextModal: showCreateCollectionModal(\n                COLLECTION_OPS_TYPE.RESTORE\n            ),\n            title: constants.RESTORE_TO_COLLECTION,\n        });\n\n    const removeFromCollectionHandler = () =>\n        setDialogMessage({\n            title: constants.CONFIRM_REMOVE,\n            content: constants.CONFIRM_REMOVE_MESSAGE(),\n            staticBackdrop: true,\n            proceed: {\n                action: removeFromCollectionHelper,\n                text: constants.REMOVE,\n                variant: 'danger',\n            },\n            close: { text: constants.CANCEL },\n        });\n\n    const moveToCollection = () => {\n        setCollectionSelectorAttributes({\n            callback: moveToCollectionHelper,\n            showNextModal: showCreateCollectionModal(COLLECTION_OPS_TYPE.MOVE),\n            title: constants.MOVE_TO_COLLECTION,\n            fromCollection: activeCollection,\n        });\n    };\n\n    return (\n        <SelectionBar>\n            <SelectionContainer>\n                <IconButton onClick={clearSelection}>\n                    <CloseIcon />\n                </IconButton>\n                <div>\n                    {count} {constants.SELECTED}\n                </div>\n            </SelectionContainer>\n            {activeCollection === TRASH_SECTION ? (\n                <>\n                    <IconWithMessage message={constants.RESTORE}>\n                        <IconButton onClick={restoreHandler}>\n                            <RestoreIcon />\n                        </IconButton>\n                    </IconWithMessage>\n                    <IconWithMessage message={constants.DELETE_PERMANENTLY}>\n                        <IconButton onClick={permanentlyDeleteHandler}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </IconWithMessage>\n                </>\n            ) : (\n                <>\n                    {showFixCreationTime && (\n                        <IconWithMessage message={constants.FIX_CREATION_TIME}>\n                            <IconButton onClick={fixTimeHelper}>\n                                <ClockIcon />\n                            </IconButton>\n                        </IconWithMessage>\n                    )}\n                    <IconWithMessage message={constants.DOWNLOAD}>\n                        <IconButton onClick={downloadHelper}>\n                            <DownloadIcon />\n                        </IconButton>\n                    </IconWithMessage>\n                    <IconWithMessage message={constants.ADD}>\n                        <IconButton onClick={addToCollection}>\n                            <AddIcon />\n                        </IconButton>\n                    </IconWithMessage>\n                    {activeCollection === ARCHIVE_SECTION && (\n                        <IconWithMessage message={constants.UNARCHIVE}>\n                            <IconButton onClick={unArchiveFilesHelper}>\n                                <UnArchive />\n                            </IconButton>\n                        </IconWithMessage>\n                    )}\n                    {activeCollection === ALL_SECTION && (\n                        <IconWithMessage message={constants.ARCHIVE}>\n                            <IconButton onClick={archiveFilesHelper}>\n                                <Archive />\n                            </IconButton>\n                        </IconWithMessage>\n                    )}\n\n                    {activeCollection !== ALL_SECTION &&\n                        activeCollection !== ARCHIVE_SECTION &&\n                        !isFavoriteCollection && (\n                            <>\n                                <IconWithMessage message={constants.MOVE}>\n                                    <IconButton onClick={moveToCollection}>\n                                        <MoveIcon />\n                                    </IconButton>\n                                </IconWithMessage>\n\n                                <IconWithMessage message={constants.REMOVE}>\n                                    <IconButton\n                                        onClick={removeFromCollectionHandler}>\n                                        <RemoveIcon />\n                                    </IconButton>\n                                </IconWithMessage>\n                            </>\n                        )}\n                    <IconWithMessage message={constants.DELETE}>\n                        <IconButton onClick={trashHandler}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </IconWithMessage>\n                </>\n            )}\n        </SelectionBar>\n    );\n};\n\nexport default SelectedFileOptions;\n","import { IconButton } from 'components/Container';\nimport SortIcon from 'components/icons/SortIcon';\nimport React from 'react';\nimport { OverlayTrigger } from 'react-bootstrap';\nimport { COLLECTION_SORT_BY } from 'services/collectionService';\nimport constants from 'utils/strings/constants';\nimport CollectionSortOptions from './CollectionSortOptions';\nimport { IconWithMessage } from './SelectedFileOptions';\n\ninterface Props {\n    setCollectionSortBy: (sortBy: COLLECTION_SORT_BY) => void;\n    activeSortBy: COLLECTION_SORT_BY;\n}\nexport default function CollectionSort(props: Props) {\n    const collectionSortOptions = CollectionSortOptions(props);\n    return (\n        <OverlayTrigger\n            rootClose\n            trigger=\"click\"\n            placement=\"bottom\"\n            overlay={collectionSortOptions}>\n            <div>\n                <IconWithMessage message={constants.SORT}>\n                    <IconButton style={{ color: '#fff' }}>\n                        <SortIcon />\n                    </IconButton>\n                </IconWithMessage>\n            </div>\n        </OverlayTrigger>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const OptionIconWrapper = styled.div`\n    display: inline-block;\n    opacity: 0;\n    font-weight: bold;\n    width: 24px;\n`;\ninterface Props {\n    onClick: () => void;\n}\nconst OptionIcon = ({ onClick }: Props) => (\n    <OptionIconWrapper\n        onClick={(e) => {\n            onClick();\n            e.stopPropagation();\n        }}\n        style={{ marginBottom: '2px' }}>\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height=\"20px\"\n            width=\"24px\"\n            viewBox=\"0 0 24 24\"\n            fill=\"#000000\">\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n            <path\n                fill=\"#666\"\n                d=\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n            />\n        </svg>\n    </OptionIconWrapper>\n);\nexport default OptionIcon;\n","import CollectionShare from 'components/CollectionShare';\nimport { SetDialogMessage } from 'components/MessageDialog';\nimport NavigationButton, {\n    SCROLL_DIRECTION,\n} from 'components/NavigationButton';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport {\n    Collection,\n    CollectionAndItsLatestFile,\n    CollectionType,\n    COLLECTION_SORT_BY,\n    sortCollections,\n} from 'services/collectionService';\nimport { User } from 'services/userService';\nimport styled from 'styled-components';\nimport { IMAGE_CONTAINER_MAX_WIDTH } from 'types';\nimport { getSelectedCollection } from 'utils/collection';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport constants from 'utils/strings/constants';\nimport { SetCollectionNamerAttributes } from './CollectionNamer';\nimport CollectionOptions from './CollectionOptions';\nimport CollectionSort from './CollectionSort';\nimport OptionIcon, { OptionIconWrapper } from './OptionIcon';\n\nexport const ARCHIVE_SECTION = -1;\nexport const TRASH_SECTION = -2;\nexport const ALL_SECTION = 0;\n\ninterface CollectionProps {\n    collections: Collection[];\n    collectionAndTheirLatestFile: CollectionAndItsLatestFile[];\n    activeCollection?: number;\n    setActiveCollection: (id?: number) => void;\n    setDialogMessage: SetDialogMessage;\n    syncWithRemote: () => Promise<void>;\n    setCollectionNamerAttributes: SetCollectionNamerAttributes;\n    startLoadingBar: () => void;\n    isInSearchMode: boolean;\n    collectionFilesCount: Map<number, number>;\n}\n\nconst CollectionContainer = styled.div`\n    overflow-y: hidden;\n    height: 40px;\n    display: flex;\n    width: calc(100% - 80px);\n    position: relative;\n    padding: 0 24px;\n\n    @media (max-width: ${IMAGE_CONTAINER_MAX_WIDTH * 4}px) {\n        padding: 0 4px;\n    }\n`;\n\nconst Wrapper = styled.div`\n    height: 70px;\n    flex: 1;\n    white-space: nowrap;\n    overflow: auto;\n    max-width: 100%;\n    scroll-behavior: smooth;\n`;\n\nconst CollectionBar = styled.div`\n    width: 100%;\n    margin: 10px auto;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n`;\n\nconst Chip = styled.button<{ active: boolean }>`\n    border-radius: 8px;\n    padding: 4px;\n    padding-left: 24px;\n    margin: 3px;\n    border: none;\n    background-color: ${(props) =>\n        props.active ? '#fff' : 'rgba(255, 255, 255, 0.3)'};\n    outline: none !important;\n    &:hover {\n        background-color: ${(props) => !props.active && '#bbbbbb'};\n    }\n    &:hover ${OptionIconWrapper} {\n        opacity: 1;\n        color: #000000;\n    }\n`;\n\nconst SectionChipCreater =\n    ({ activeCollection, clickHandler }) =>\n    ({ section, label }) =>\n        (\n            <Chip\n                active={activeCollection === section}\n                onClick={clickHandler(section)}>\n                {label}\n                <div\n                    style={{\n                        display: 'inline-block',\n                        width: '24px',\n                    }}\n                />\n            </Chip>\n        );\nconst Hider = styled.div<{ hide: boolean }>`\n    opacity: ${(props) => (props.hide ? '0' : '100')};\n    height: ${(props) => (props.hide ? '0' : 'auto')};\n`;\n\nexport default function Collections(props: CollectionProps) {\n    const { activeCollection, collections, setActiveCollection } = props;\n    const [selectedCollectionID, setSelectedCollectionID] =\n        useState<number>(null);\n    const collectionWrapperRef = useRef<HTMLDivElement>(null);\n    const collectionChipsRef = props.collections.reduce(\n        (refMap, collection) => {\n            refMap[collection.id] = React.createRef();\n            return refMap;\n        },\n        {}\n    );\n    const [collectionShareModalView, setCollectionShareModalView] =\n        useState(false);\n    const [scrollObj, setScrollObj] = useState<{\n        scrollLeft?: number;\n        scrollWidth?: number;\n        clientWidth?: number;\n    }>({});\n    const [collectionSortBy, setCollectionSortBy] =\n        useState<COLLECTION_SORT_BY>(COLLECTION_SORT_BY.LATEST_FILE);\n\n    const updateScrollObj = () => {\n        if (collectionWrapperRef.current) {\n            const { scrollLeft, scrollWidth, clientWidth } =\n                collectionWrapperRef.current;\n            setScrollObj({ scrollLeft, scrollWidth, clientWidth });\n        }\n    };\n\n    useEffect(() => {\n        updateScrollObj();\n    }, [collectionWrapperRef.current, props.isInSearchMode, collections]);\n\n    useEffect(() => {\n        if (!collectionWrapperRef?.current) {\n            return;\n        }\n        collectionWrapperRef.current.scrollLeft = 0;\n    }, [collections]);\n\n    useEffect(() => {\n        collectionChipsRef[activeCollection]?.current.scrollIntoView({\n            inline: 'center',\n        });\n    }, [activeCollection]);\n\n    const clickHandler = (collectionID?: number) => () => {\n        setSelectedCollectionID(collectionID);\n        setActiveCollection(collectionID ?? ALL_SECTION);\n    };\n\n    const user: User = getData(LS_KEYS.USER);\n\n    const collectionOptions = CollectionOptions({\n        syncWithRemote: props.syncWithRemote,\n        setCollectionNamerAttributes: props.setCollectionNamerAttributes,\n        collections: props.collections,\n        selectedCollectionID,\n        setDialogMessage: props.setDialogMessage,\n        startLoadingBar: props.startLoadingBar,\n        showCollectionShareModal: setCollectionShareModalView.bind(null, true),\n        redirectToAll: setActiveCollection.bind(null, ALL_SECTION),\n    });\n\n    const scrollCollection = (direction: SCROLL_DIRECTION) => () => {\n        collectionWrapperRef.current.scrollBy(250 * direction, 0);\n    };\n    const renderTooltip = (collectionID: number) => {\n        const fileCount = props.collectionFilesCount?.get(collectionID) ?? 0;\n        return (\n            <Tooltip\n                style={{\n                    padding: '0',\n                    paddingBottom: '5px',\n                }}\n                id=\"button-tooltip\">\n                <div\n                    style={{\n                        backgroundColor: '#282828',\n                        padding: '2px 10px',\n                        margin: 0,\n                        color: '#ddd',\n                        borderRadius: 3,\n                        fontSize: '12px',\n                    }}>\n                    {fileCount} {fileCount > 1 ? 'items' : 'item'}\n                </div>\n            </Tooltip>\n        );\n    };\n\n    const SectionChip = SectionChipCreater({ activeCollection, clickHandler });\n\n    return (\n        <Hider hide={props.isInSearchMode}>\n            <CollectionShare\n                show={collectionShareModalView}\n                onHide={() => setCollectionShareModalView(false)}\n                collection={getSelectedCollection(\n                    selectedCollectionID,\n                    props.collections\n                )}\n                syncWithRemote={props.syncWithRemote}\n            />\n            <CollectionBar>\n                <CollectionContainer>\n                    {scrollObj.scrollLeft > 0 && (\n                        <NavigationButton\n                            scrollDirection={SCROLL_DIRECTION.LEFT}\n                            onClick={scrollCollection(SCROLL_DIRECTION.LEFT)}\n                        />\n                    )}\n                    <Wrapper\n                        ref={collectionWrapperRef}\n                        onScroll={updateScrollObj}>\n                        <SectionChip\n                            section={ALL_SECTION}\n                            label={constants.ALL}\n                        />\n                        {sortCollections(\n                            collections,\n                            props.collectionAndTheirLatestFile,\n                            collectionSortBy\n                        ).map((item) => (\n                            <OverlayTrigger\n                                key={item.id}\n                                placement=\"top\"\n                                delay={{ show: 250, hide: 400 }}\n                                overlay={renderTooltip(item.id)}>\n                                <Chip\n                                    ref={collectionChipsRef[item.id]}\n                                    active={activeCollection === item.id}\n                                    onClick={clickHandler(item.id)}>\n                                    {item.name}\n                                    {item.type !== CollectionType.favorites &&\n                                    item.owner.id === user?.id ? (\n                                        <OverlayTrigger\n                                            rootClose\n                                            trigger=\"click\"\n                                            placement=\"bottom\"\n                                            overlay={collectionOptions}>\n                                            <OptionIcon\n                                                onClick={() =>\n                                                    setSelectedCollectionID(\n                                                        item.id\n                                                    )\n                                                }\n                                            />\n                                        </OverlayTrigger>\n                                    ) : (\n                                        <div\n                                            style={{\n                                                display: 'inline-block',\n                                                width: '24px',\n                                            }}\n                                        />\n                                    )}\n                                </Chip>\n                            </OverlayTrigger>\n                        ))}\n                        <SectionChip\n                            section={ARCHIVE_SECTION}\n                            label={constants.ARCHIVE}\n                        />\n                        <SectionChip\n                            section={TRASH_SECTION}\n                            label={constants.TRASH}\n                        />\n                    </Wrapper>\n                    {scrollObj.scrollLeft <\n                        scrollObj.scrollWidth - scrollObj.clientWidth && (\n                        <NavigationButton\n                            scrollDirection={SCROLL_DIRECTION.RIGHT}\n                            onClick={scrollCollection(SCROLL_DIRECTION.RIGHT)}\n                        />\n                    )}\n                </CollectionContainer>\n                <CollectionSort\n                    setCollectionSortBy={setCollectionSortBy}\n                    activeSortBy={collectionSortBy}\n                />\n            </CollectionBar>\n        </Hider>\n    );\n}\n","import { SetFiles } from 'pages/gallery';\nimport { getEndpoint } from 'utils/common/apiUtil';\nimport { getToken } from 'utils/common/key';\nimport { decryptFile, mergeMetadata, sortFiles } from 'utils/file';\nimport { logError } from 'utils/sentry';\nimport localForage from 'utils/storage/localForage';\nimport { Collection, getCollection } from './collectionService';\nimport { File } from './fileService';\nimport HTTPService from './HTTPService';\n\nconst TRASH = 'file-trash';\nconst TRASH_TIME = 'trash-time';\nconst DELETED_COLLECTION = 'deleted-collection';\n\nconst ENDPOINT = getEndpoint();\n\nexport interface TrashItem {\n    file: File;\n    isDeleted: boolean;\n    isRestored: boolean;\n    deleteBy: number;\n    createdAt: number;\n    updatedAt: number;\n}\nexport type Trash = TrashItem[];\n\nexport async function getLocalTrash() {\n    const trash = (await localForage.getItem<Trash>(TRASH)) || [];\n    return trash;\n}\n\nexport async function getLocalDeletedCollections() {\n    const trashedCollections: Array<Collection> =\n        (await localForage.getItem<Collection[]>(DELETED_COLLECTION)) || [];\n    return trashedCollections;\n}\n\nexport async function cleanTrashCollections(fileTrash: Trash) {\n    const trashedCollections = await getLocalDeletedCollections();\n    const neededTrashCollections = new Set<number>(\n        fileTrash.map((item) => item.file.collectionID)\n    );\n    const filterCollections = trashedCollections.filter((item) =>\n        neededTrashCollections.has(item.id)\n    );\n    await localForage.setItem(DELETED_COLLECTION, filterCollections);\n}\n\nasync function getLastSyncTime() {\n    return (await localForage.getItem<number>(TRASH_TIME)) ?? 0;\n}\nexport async function syncTrash(\n    collections: Collection[],\n    setFiles: SetFiles,\n    files: File[]\n): Promise<Trash> {\n    const trash = await getLocalTrash();\n    collections = [...collections, ...(await getLocalDeletedCollections())];\n    const collectionMap = new Map<number, Collection>(\n        collections.map((collection) => [collection.id, collection])\n    );\n    if (!getToken()) {\n        return trash;\n    }\n    const lastSyncTime = await getLastSyncTime();\n\n    const updatedTrash = await updateTrash(\n        collectionMap,\n        lastSyncTime,\n        setFiles,\n        files,\n        trash\n    );\n    cleanTrashCollections(updatedTrash);\n    return updatedTrash;\n}\n\nexport const updateTrash = async (\n    collections: Map<number, Collection>,\n    sinceTime: number,\n    setFiles: SetFiles,\n    files: File[],\n    currentTrash: Trash\n): Promise<Trash> => {\n    try {\n        let updatedTrash: Trash = [...currentTrash];\n        let time = sinceTime;\n\n        let resp;\n        do {\n            const token = getToken();\n            if (!token) {\n                break;\n            }\n            resp = await HTTPService.get(\n                `${ENDPOINT}/trash/diff`,\n                {\n                    sinceTime: time,\n                },\n                {\n                    'X-Auth-Token': token,\n                }\n            );\n            for (const trashItem of resp.data.diff as TrashItem[]) {\n                const collectionID = trashItem.file.collectionID;\n                let collection = collections.get(collectionID);\n                if (!collection) {\n                    collection = await getCollection(collectionID);\n                    collections.set(collectionID, collection);\n                    localForage.setItem(DELETED_COLLECTION, [\n                        ...collections.values(),\n                    ]);\n                }\n                if (!trashItem.isDeleted && !trashItem.isRestored) {\n                    trashItem.file = await decryptFile(\n                        trashItem.file,\n                        collection\n                    );\n                }\n                updatedTrash.push(trashItem);\n            }\n\n            if (resp.data.diff.length) {\n                time = resp.data.diff.slice(-1)[0].updatedAt;\n            }\n            updatedTrash = removeDuplicates(updatedTrash);\n            updatedTrash = removeRestoredOrDeletedTrashItems(updatedTrash);\n\n            setFiles(\n                sortFiles([...(files ?? []), ...getTrashedFiles(updatedTrash)])\n            );\n            await localForage.setItem(TRASH, updatedTrash);\n            await localForage.setItem(TRASH_TIME, time);\n        } while (resp.data.hasMore);\n        return updatedTrash;\n    } catch (e) {\n        logError(e, 'Get trash files failed');\n    }\n};\n\nfunction removeDuplicates(trash: Trash) {\n    const latestVersionTrashItems = new Map<number, TrashItem>();\n    trash.forEach(({ file, updatedAt, ...rest }) => {\n        if (\n            !latestVersionTrashItems.has(file.id) ||\n            latestVersionTrashItems.get(file.id).updatedAt < updatedAt\n        ) {\n            latestVersionTrashItems.set(file.id, { file, updatedAt, ...rest });\n        }\n    });\n    trash = [];\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [_, trashedFile] of latestVersionTrashItems) {\n        trash.push(trashedFile);\n    }\n    return trash;\n}\n\nfunction removeRestoredOrDeletedTrashItems(trash: Trash) {\n    return trash.filter((item) => !item.isDeleted && !item.isRestored);\n}\n\nexport function getTrashedFiles(trash: Trash) {\n    return mergeMetadata(\n        trash.map((trashedFile) => ({\n            ...trashedFile.file,\n            updationTime: trashedFile.updatedAt,\n            isTrashed: true,\n            deleteBy: trashedFile.deleteBy,\n        }))\n    );\n}\n\nexport const emptyTrash = async () => {\n    try {\n        const token = getToken();\n        if (!token) {\n            return;\n        }\n        const lastUpdatedAt = await getLastSyncTime();\n\n        await HTTPService.post(\n            `${ENDPOINT}/trash/empty`,\n            { lastUpdatedAt },\n            null,\n            {\n                'X-Auth-Token': token,\n            }\n        );\n    } catch (e) {\n        logError(e, 'empty trash failed');\n        throw e;\n    }\n};\n\nexport const clearLocalTrash = async () => {\n    await localForage.setItem(TRASH, []);\n};\n","import downloadManager from 'services/downloadManager';\nimport { fileAttribute, getLocalFiles } from 'services/fileService';\nimport { generateThumbnail } from 'services/upload/thumbnailService';\nimport { getToken } from 'utils/common/key';\nimport { logError } from 'utils/sentry';\nimport { getEndpoint } from 'utils/common/apiUtil';\nimport HTTPService from 'services/HTTPService';\nimport CryptoWorker from 'utils/crypto';\nimport uploadHttpClient from 'services/upload/uploadHttpClient';\nimport { EncryptionResult, UploadURL } from 'services/upload/uploadService';\nimport { SetProgressTracker } from 'components/FixLargeThumbnail';\nimport { getFileType } from './upload/readFileService';\nimport { getLocalTrash, getTrashedFiles } from './trashService';\n\nconst ENDPOINT = getEndpoint();\nconst REPLACE_THUMBNAIL_THRESHOLD = 500 * 1024; // 500KB\nexport async function getLargeThumbnailFiles() {\n    try {\n        const token = getToken();\n        if (!token) {\n            return;\n        }\n        const resp = await HTTPService.get(\n            `${ENDPOINT}/files/large-thumbnails`,\n            {\n                threshold: REPLACE_THUMBNAIL_THRESHOLD,\n            },\n            {\n                'X-Auth-Token': token,\n            }\n        );\n        return resp.data.largeThumbnailFiles as number[];\n    } catch (e) {\n        logError(e, 'failed to get large thumbnail files');\n        throw e;\n    }\n}\nexport async function replaceThumbnail(\n    setProgressTracker: SetProgressTracker,\n    largeThumbnailFileIDs: Set<number>\n) {\n    let completedWithError = false;\n    try {\n        const token = getToken();\n        const worker = await new CryptoWorker();\n        const files = await getLocalFiles();\n        const trash = await getLocalTrash();\n        const trashFiles = getTrashedFiles(trash);\n        const largeThumbnailFiles = [...files, ...trashFiles].filter((file) =>\n            largeThumbnailFileIDs.has(file.id)\n        );\n        if (largeThumbnailFileIDs.size !== largeThumbnailFiles.length) {\n            logError(Error(), 'all large thumbnail files not found locally');\n        }\n        if (largeThumbnailFiles.length === 0) {\n            return completedWithError;\n        }\n        setProgressTracker({ current: 0, total: largeThumbnailFiles.length });\n        const uploadURLs: UploadURL[] = [];\n        await uploadHttpClient.fetchUploadURLs(\n            largeThumbnailFiles.length,\n            uploadURLs\n        );\n        for (const [idx, file] of largeThumbnailFiles.entries()) {\n            try {\n                setProgressTracker({\n                    current: idx,\n                    total: largeThumbnailFiles.length,\n                });\n                const originalThumbnail = await downloadManager.downloadThumb(\n                    token,\n                    file\n                );\n                const dummyImageFile = new globalThis.File(\n                    [originalThumbnail],\n                    file.metadata.title\n                );\n                const fileTypeInfo = await getFileType(worker, dummyImageFile);\n                const { thumbnail: newThumbnail } = await generateThumbnail(\n                    worker,\n                    dummyImageFile,\n                    fileTypeInfo\n                );\n                const newUploadedThumbnail = await uploadThumbnail(\n                    worker,\n                    file.key,\n                    newThumbnail,\n                    uploadURLs.pop()\n                );\n                await updateThumbnail(file.id, newUploadedThumbnail);\n            } catch (e) {\n                logError(e, 'failed to replace a thumbnail');\n                completedWithError = true;\n            }\n        }\n    } catch (e) {\n        logError(e, 'replace Thumbnail function failed');\n        completedWithError = true;\n    }\n    return completedWithError;\n}\n\nexport async function uploadThumbnail(\n    worker,\n    fileKey: string,\n    updatedThumbnail: Uint8Array,\n    uploadURL: UploadURL\n): Promise<fileAttribute> {\n    const { file: encryptedThumbnail }: EncryptionResult =\n        await worker.encryptThumbnail(updatedThumbnail, fileKey);\n\n    const thumbnailObjectKey = await uploadHttpClient.putFile(\n        uploadURL,\n        encryptedThumbnail.encryptedData as Uint8Array,\n        () => {}\n    );\n    return {\n        objectKey: thumbnailObjectKey,\n        decryptionHeader: encryptedThumbnail.decryptionHeader,\n    };\n}\n\nexport async function updateThumbnail(\n    fileID: number,\n    newThumbnail: fileAttribute\n) {\n    try {\n        const token = getToken();\n        if (!token) {\n            return;\n        }\n        await HTTPService.put(\n            `${ENDPOINT}/files/thumbnail`,\n            {\n                fileID: fileID,\n                thumbnail: newThumbnail,\n            },\n            null,\n            {\n                'X-Auth-Token': token,\n            }\n        );\n    } catch (e) {\n        logError(e, 'failed to update thumbnail');\n        throw e;\n    }\n}\n","import constants from 'utils/strings/constants';\nimport MessageDialog from './MessageDialog';\nimport React, { useEffect, useState } from 'react';\nimport { ProgressBar, Button } from 'react-bootstrap';\nimport { ComfySpan } from './ExportInProgress';\nimport {\n    getLargeThumbnailFiles,\n    replaceThumbnail,\n} from 'services/migrateThumbnailService';\nimport { getData, LS_KEYS, setData } from 'utils/storage/localStorage';\nimport { logError } from 'utils/sentry';\n\nexport type SetProgressTracker = React.Dispatch<\n    React.SetStateAction<{\n        current: number;\n        total: number;\n    }>\n>;\ninterface Props {\n    isOpen: boolean;\n    show: () => void;\n    hide: () => void;\n}\nexport enum FIX_STATE {\n    NOT_STARTED,\n    FIX_LATER,\n    NOOP,\n    RUNNING,\n    COMPLETED,\n    COMPLETED_WITH_ERRORS,\n}\nfunction Message(props: { fixState: FIX_STATE }) {\n    let message = null;\n    switch (props.fixState) {\n        case FIX_STATE.NOT_STARTED:\n        case FIX_STATE.FIX_LATER:\n            message = constants.REPLACE_THUMBNAIL_NOT_STARTED();\n            break;\n        case FIX_STATE.COMPLETED:\n            message = constants.REPLACE_THUMBNAIL_COMPLETED();\n            break;\n        case FIX_STATE.NOOP:\n            message = constants.REPLACE_THUMBNAIL_NOOP();\n            break;\n        case FIX_STATE.COMPLETED_WITH_ERRORS:\n            message = constants.REPLACE_THUMBNAIL_COMPLETED_WITH_ERROR();\n            break;\n    }\n    return message ? (\n        <div style={{ marginBottom: '30px' }}>{message}</div>\n    ) : (\n        <></>\n    );\n}\nexport default function FixLargeThumbnails(props: Props) {\n    const [fixState, setFixState] = useState(FIX_STATE.NOT_STARTED);\n    const [progressTracker, setProgressTracker] = useState({\n        current: 0,\n        total: 0,\n    });\n    const [largeThumbnailFiles, setLargeThumbnailFiles] = useState<number[]>(\n        []\n    );\n\n    const init = (): FIX_STATE => {\n        let fixState = getData(LS_KEYS.THUMBNAIL_FIX_STATE)?.state;\n        if (!fixState || fixState === FIX_STATE.RUNNING) {\n            fixState = FIX_STATE.NOT_STARTED;\n            updateFixState(fixState);\n        }\n        if (fixState === FIX_STATE.COMPLETED) {\n            fixState = FIX_STATE.NOOP;\n            updateFixState(fixState);\n        }\n        setFixState(fixState);\n        return fixState;\n    };\n\n    const fetchLargeThumbnail = async () => {\n        const largeThumbnailFiles = (await getLargeThumbnailFiles()) ?? [];\n        setLargeThumbnailFiles(largeThumbnailFiles);\n        return largeThumbnailFiles;\n    };\n\n    const main = async () => {\n        const largeThumbnailFiles = await fetchLargeThumbnail();\n        if (\n            fixState === FIX_STATE.NOT_STARTED &&\n            largeThumbnailFiles.length > 0\n        ) {\n            props.show();\n        }\n        if (\n            (fixState === FIX_STATE.COMPLETED || fixState === FIX_STATE.NOOP) &&\n            largeThumbnailFiles.length > 0\n        ) {\n            updateFixState(FIX_STATE.NOT_STARTED);\n            logError(Error(), 'large thumbnail files left after migration');\n        }\n        if (largeThumbnailFiles.length === 0 && fixState !== FIX_STATE.NOOP) {\n            updateFixState(FIX_STATE.NOOP);\n        }\n    };\n    useEffect(() => {\n        if (props.isOpen && fixState !== FIX_STATE.RUNNING) {\n            main();\n        }\n    }, [props.isOpen]);\n\n    useEffect(() => {\n        const fixState = init();\n        if (fixState === FIX_STATE.NOT_STARTED) {\n            main();\n        }\n    }, []);\n    const startFix = async (newlyFetchedLargeThumbnailFiles?: number[]) => {\n        updateFixState(FIX_STATE.RUNNING);\n        const completedWithError = await replaceThumbnail(\n            setProgressTracker,\n            new Set(\n                newlyFetchedLargeThumbnailFiles ?? largeThumbnailFiles ?? []\n            )\n        );\n        if (typeof completedWithError !== 'undefined') {\n            updateFixState(\n                completedWithError\n                    ? FIX_STATE.COMPLETED_WITH_ERRORS\n                    : FIX_STATE.COMPLETED\n            );\n        }\n        await fetchLargeThumbnail();\n    };\n\n    const updateFixState = (fixState: FIX_STATE) => {\n        setFixState(fixState);\n        setData(LS_KEYS.THUMBNAIL_FIX_STATE, { state: fixState });\n    };\n    return (\n        <MessageDialog\n            show={props.isOpen}\n            onHide={props.hide}\n            attributes={{\n                title: constants.FIX_LARGE_THUMBNAILS,\n                staticBackdrop: true,\n            }}>\n            <div\n                style={{\n                    marginBottom: '20px',\n                    padding: '0 5%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                }}>\n                <Message fixState={fixState} />\n\n                {fixState === FIX_STATE.RUNNING && (\n                    <>\n                        <div style={{ marginBottom: '10px' }}>\n                            <ComfySpan>\n                                {' '}\n                                {progressTracker.current} /{' '}\n                                {progressTracker.total}{' '}\n                            </ComfySpan>{' '}\n                            <span style={{ marginLeft: '10px' }}>\n                                {' '}\n                                {constants.THUMBNAIL_REPLACED}\n                            </span>\n                        </div>\n                        <div\n                            style={{\n                                width: '100%',\n                                marginTop: '10px',\n                                marginBottom: '20px',\n                            }}>\n                            <ProgressBar\n                                now={Math.round(\n                                    (progressTracker.current * 100) /\n                                        progressTracker.total\n                                )}\n                                animated={true}\n                                variant=\"upload-progress-bar\"\n                            />\n                        </div>\n                    </>\n                )}\n                <div\n                    style={{\n                        width: '100%',\n                        display: 'flex',\n                        justifyContent: 'space-around',\n                    }}>\n                    {fixState === FIX_STATE.NOT_STARTED ||\n                    fixState === FIX_STATE.FIX_LATER ? (\n                        <Button\n                            block\n                            variant={'outline-secondary'}\n                            onClick={() => {\n                                updateFixState(FIX_STATE.FIX_LATER);\n                                props.hide();\n                            }}>\n                            {constants.FIX_THUMBNAIL_LATER}\n                        </Button>\n                    ) : (\n                        <Button\n                            block\n                            variant={'outline-secondary'}\n                            onClick={props.hide}>\n                            {constants.CLOSE}\n                        </Button>\n                    )}\n                    {(fixState === FIX_STATE.NOT_STARTED ||\n                        fixState === FIX_STATE.FIX_LATER ||\n                        fixState === FIX_STATE.COMPLETED_WITH_ERRORS) && (\n                        <>\n                            <div style={{ width: '30px' }} />\n\n                            <Button\n                                block\n                                variant={'outline-success'}\n                                onClick={() => startFix()}>\n                                {constants.FIX_THUMBNAIL}\n                            </Button>\n                        </>\n                    )}\n                </div>\n            </div>\n        </MessageDialog>\n    );\n}\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport { slide as Menu } from 'react-burger-menu';\nimport constants from 'utils/strings/constants';\nimport { getData, LS_KEYS, setData } from 'utils/storage/localStorage';\nimport { getToken } from 'utils/common/key';\nimport { getEndpoint } from 'utils/common/apiUtil';\nimport { Button } from 'react-bootstrap';\nimport {\n    isSubscriptionActive,\n    getUserSubscription,\n    isOnFreePlan,\n    isSubscriptionCancelled,\n    isSubscribed,\n    convertToHumanReadable,\n} from 'utils/billingUtil';\n\nimport isElectron from 'is-electron';\nimport { Collection } from 'services/collectionService';\nimport { useRouter } from 'next/router';\nimport LinkButton from './pages/gallery/LinkButton';\nimport { downloadApp } from 'utils/common';\nimport { getUserDetails, logoutUser } from 'services/userService';\nimport { LogoImage } from 'pages/_app';\nimport { SetDialogMessage } from './MessageDialog';\nimport EnteSpinner from './EnteSpinner';\nimport RecoveryKeyModal from './RecoveryKeyModal';\nimport TwoFactorModal from './TwoFactorModal';\nimport ExportModal from './ExportModal';\nimport { GalleryContext, SetLoading } from 'pages/gallery';\nimport InProgressIcon from './icons/InProgressIcon';\nimport exportService from 'services/exportService';\nimport { Subscription } from 'services/billingService';\nimport { PAGES } from 'types';\nimport {\n    ARCHIVE_SECTION,\n    TRASH_SECTION,\n} from 'components/pages/gallery/Collections';\nimport FixLargeThumbnails from './FixLargeThumbnail';\ninterface Props {\n    collections: Collection[];\n    setDialogMessage: SetDialogMessage;\n    setLoading: SetLoading;\n}\nexport default function Sidebar(props: Props) {\n    const [usage, SetUsage] = useState<string>(null);\n    const [user, setUser] = useState(null);\n    const [subscription, setSubscription] = useState<Subscription>(null);\n    useEffect(() => {\n        setUser(getData(LS_KEYS.USER));\n        setSubscription(getUserSubscription());\n    }, []);\n    const [isOpen, setIsOpen] = useState(false);\n    const [recoverModalView, setRecoveryModalView] = useState(false);\n    const [twoFactorModalView, setTwoFactorModalView] = useState(false);\n    const [exportModalView, setExportModalView] = useState(false);\n    const [fixLargeThumbsView, setFixLargeThumbsView] = useState(false);\n    const galleryContext = useContext(GalleryContext);\n    useEffect(() => {\n        const main = async () => {\n            if (!isOpen) {\n                return;\n            }\n            const userDetails = await getUserDetails();\n            setUser({ ...user, email: userDetails.email });\n            SetUsage(convertToHumanReadable(userDetails.usage));\n            setSubscription(userDetails.subscription);\n            setData(LS_KEYS.USER, {\n                ...getData(LS_KEYS.USER),\n                email: userDetails.email,\n            });\n            setData(LS_KEYS.SUBSCRIPTION, userDetails.subscription);\n        };\n        main();\n    }, [isOpen]);\n\n    function openFeedbackURL() {\n        const feedbackURL: string = `${getEndpoint()}/users/feedback?token=${encodeURIComponent(\n            getToken()\n        )}`;\n        const win = window.open(feedbackURL, '_blank');\n        win.focus();\n    }\n\n    function initiateEmail(email: string) {\n        const a = document.createElement('a');\n        a.href = 'mailto:' + email;\n        a.rel = 'noreferrer noopener';\n        a.click();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    function exportFiles() {\n        if (isElectron()) {\n            setExportModalView(true);\n        } else {\n            props.setDialogMessage({\n                title: constants.DOWNLOAD_APP,\n                content: constants.DOWNLOAD_APP_MESSAGE(),\n                staticBackdrop: true,\n                proceed: {\n                    text: constants.DOWNLOAD,\n                    action: downloadApp,\n                    variant: 'success',\n                },\n                close: {\n                    text: constants.CLOSE,\n                },\n            });\n        }\n    }\n\n    const router = useRouter();\n    function onManageClick() {\n        setIsOpen(false);\n        galleryContext.showPlanSelectorModal();\n    }\n\n    const Divider = () => (\n        <div\n            style={{\n                height: '1px',\n                marginTop: '40px',\n                background: '#242424',\n                width: '100%',\n            }}\n        />\n    );\n    return (\n        <Menu\n            isOpen={isOpen}\n            onStateChange={(state) => setIsOpen(state.isOpen)}\n            itemListElement=\"div\">\n            <div\n                style={{\n                    display: 'flex',\n                    outline: 'none',\n                    textAlign: 'center',\n                }}>\n                <LogoImage\n                    style={{ height: '24px', padding: '3px' }}\n                    alt=\"logo\"\n                    src=\"/icon.svg\"\n                />\n            </div>\n            <div\n                style={{\n                    outline: 'none',\n                    color: 'rgb(45, 194, 98)',\n                    fontSize: '16px',\n                }}>\n                {user?.email}\n            </div>\n            <div\n                style={{\n                    flex: 1,\n                    overflow: 'auto',\n                    outline: 'none',\n                    paddingTop: '0',\n                }}>\n                <div style={{ outline: 'none' }}>\n                    <div style={{ display: 'flex' }}>\n                        <h5 style={{ margin: '4px 0 12px 2px' }}>\n                            {constants.SUBSCRIPTION_PLAN}\n                        </h5>\n                    </div>\n                    <div style={{ color: '#959595' }}>\n                        {isSubscriptionActive(subscription) ? (\n                            isOnFreePlan(subscription) ? (\n                                constants.FREE_SUBSCRIPTION_INFO(\n                                    subscription?.expiryTime\n                                )\n                            ) : isSubscriptionCancelled(subscription) ? (\n                                constants.RENEWAL_CANCELLED_SUBSCRIPTION_INFO(\n                                    subscription?.expiryTime\n                                )\n                            ) : (\n                                constants.RENEWAL_ACTIVE_SUBSCRIPTION_INFO(\n                                    subscription?.expiryTime\n                                )\n                            )\n                        ) : (\n                            <p>{constants.SUBSCRIPTION_EXPIRED}</p>\n                        )}\n                        <Button\n                            variant=\"outline-success\"\n                            block\n                            size=\"sm\"\n                            onClick={onManageClick}>\n                            {isSubscribed(subscription)\n                                ? constants.MANAGE\n                                : constants.SUBSCRIBE}\n                        </Button>\n                    </div>\n                </div>\n                <div style={{ outline: 'none', marginTop: '30px' }} />\n                <div>\n                    <h5 style={{ marginBottom: '12px' }}>\n                        {constants.USAGE_DETAILS}\n                    </h5>\n                    <div style={{ color: '#959595' }}>\n                        {usage ? (\n                            constants.USAGE_INFO(\n                                usage,\n                                convertToHumanReadable(subscription?.storage)\n                            )\n                        ) : (\n                            <div style={{ textAlign: 'center' }}>\n                                <EnteSpinner\n                                    style={{\n                                        borderWidth: '2px',\n                                        width: '20px',\n                                        height: '20px',\n                                    }}\n                                />\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <Divider />\n                <LinkButton\n                    style={{ marginTop: '30px' }}\n                    onClick={() => {\n                        galleryContext.setActiveCollection(ARCHIVE_SECTION);\n                        setIsOpen(false);\n                    }}>\n                    {constants.ARCHIVE}\n                </LinkButton>\n                <LinkButton\n                    style={{ marginTop: '30px' }}\n                    onClick={() => {\n                        galleryContext.setActiveCollection(TRASH_SECTION);\n                        setIsOpen(false);\n                    }}>\n                    {constants.TRASH}\n                </LinkButton>\n                <>\n                    <RecoveryKeyModal\n                        show={recoverModalView}\n                        onHide={() => setRecoveryModalView(false)}\n                        somethingWentWrong={() =>\n                            props.setDialogMessage({\n                                title: constants.RECOVER_KEY_GENERATION_FAILED,\n                                close: { variant: 'danger' },\n                            })\n                        }\n                    />\n                    <LinkButton\n                        style={{ marginTop: '30px' }}\n                        onClick={() => setRecoveryModalView(true)}>\n                        {constants.DOWNLOAD_RECOVERY_KEY}\n                    </LinkButton>\n                </>\n                <>\n                    <TwoFactorModal\n                        show={twoFactorModalView}\n                        onHide={() => setTwoFactorModalView(false)}\n                        setDialogMessage={props.setDialogMessage}\n                        closeSidebar={() => setIsOpen(false)}\n                        setLoading={props.setLoading}\n                    />\n                    <LinkButton\n                        style={{ marginTop: '30px' }}\n                        onClick={() => setTwoFactorModalView(true)}>\n                        {constants.TWO_FACTOR}\n                    </LinkButton>\n                </>\n                <LinkButton\n                    style={{ marginTop: '30px' }}\n                    onClick={() => {\n                        router.push(PAGES.CHANGE_PASSWORD);\n                    }}>\n                    {constants.CHANGE_PASSWORD}\n                </LinkButton>\n                <LinkButton\n                    style={{ marginTop: '30px' }}\n                    onClick={() => {\n                        router.push(PAGES.CHANGE_EMAIL);\n                    }}>\n                    {constants.UPDATE_EMAIL}\n                </LinkButton>\n                <Divider />\n                <>\n                    <FixLargeThumbnails\n                        isOpen={fixLargeThumbsView}\n                        hide={() => setFixLargeThumbsView(false)}\n                        show={() => setFixLargeThumbsView(true)}\n                    />\n                    <LinkButton\n                        style={{ marginTop: '30px' }}\n                        onClick={() => setFixLargeThumbsView(true)}>\n                        {constants.FIX_LARGE_THUMBNAILS}\n                    </LinkButton>\n                </>\n                <LinkButton\n                    style={{ marginTop: '30px' }}\n                    onClick={openFeedbackURL}>\n                    {constants.REQUEST_FEATURE}\n                </LinkButton>\n                <LinkButton\n                    style={{ marginTop: '30px' }}\n                    onClick={() => initiateEmail('contact@ente.io')}>\n                    {constants.SUPPORT}\n                </LinkButton>\n                <>\n                    <ExportModal\n                        show={exportModalView}\n                        onHide={() => setExportModalView(false)}\n                        usage={usage}\n                    />\n                    <LinkButton\n                        style={{ marginTop: '30px' }}\n                        onClick={exportFiles}>\n                        <div style={{ display: 'flex' }}>\n                            {constants.EXPORT}\n                            <div style={{ width: '20px' }} />\n                            {exportService.isExportInProgress() && (\n                                <InProgressIcon />\n                            )}\n                        </div>\n                    </LinkButton>\n                </>\n                <Divider />\n                <LinkButton\n                    variant=\"danger\"\n                    style={{ marginTop: '30px' }}\n                    onClick={() =>\n                        props.setDialogMessage({\n                            title: `${constants.CONFIRM} ${constants.LOGOUT}`,\n                            content: constants.LOGOUT_MESSAGE,\n                            staticBackdrop: true,\n                            proceed: {\n                                text: constants.LOGOUT,\n                                action: logoutUser,\n                                variant: 'danger',\n                            },\n                            close: { text: constants.CANCEL },\n                        })\n                    }>\n                    {constants.LOGOUT}\n                </LinkButton>\n                <LinkButton\n                    variant=\"danger\"\n                    style={{ marginTop: '30px' }}\n                    onClick={() =>\n                        props.setDialogMessage({\n                            title: `${constants.DELETE_ACCOUNT}`,\n                            content: constants.DELETE_ACCOUNT_MESSAGE(),\n                            staticBackdrop: true,\n                            proceed: {\n                                text: constants.DELETE_ACCOUNT,\n                                action: () => {\n                                    initiateEmail('account-deletion@ente.io');\n                                },\n                                variant: 'danger',\n                            },\n                            close: { text: constants.CANCEL },\n                        })\n                    }>\n                    {constants.DELETE_ACCOUNT}\n                </LinkButton>\n                <div\n                    style={{\n                        marginTop: '40px',\n                        width: '100%',\n                    }}\n                />\n            </div>\n        </Menu>\n    );\n}\n","import styled from 'styled-components';\n\nexport const LoadingOverlay = styled.div`\n    left: 0;\n    top: 0;\n    outline: none;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #fff;\n    font-weight: 900;\n    position: absolute;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 9000;\n`;\n","import React from 'react';\n\nexport default function PlayCircleOutline(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}>\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n        </svg>\n    );\n}\n\nPlayCircleOutline.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React, { useContext, useLayoutEffect, useRef, useState } from 'react';\nimport { File } from 'services/fileService';\nimport styled from 'styled-components';\nimport PlayCircleOutline from 'components/icons/PlayCircleOutline';\nimport DownloadManager from 'services/downloadManager';\nimport useLongPress from 'utils/common/useLongPress';\nimport { GalleryContext } from 'pages/gallery';\nimport { GAP_BTW_TILES } from 'types';\n\ninterface IProps {\n    file: File;\n    updateUrl: (url: string) => void;\n    onClick?: () => void;\n    forcedEnable?: boolean;\n    selectable?: boolean;\n    selected?: boolean;\n    onSelect?: (checked: boolean) => void;\n    onHover?: () => void;\n    onRangeSelect?: () => void;\n    isRangeSelectActive?: boolean;\n    selectOnClick?: boolean;\n    isInsSelectRange?: boolean;\n}\n\nconst Check = styled.input<{ active: boolean }>`\n    appearance: none;\n    position: absolute;\n    z-index: 10;\n    left: 0;\n    opacity: 0;\n    outline: none;\n    cursor: pointer;\n    @media (pointer: coarse) {\n        pointer-events: none;\n    }\n\n    &::before {\n        content: '';\n        width: 16px;\n        height: 16px;\n        border: 2px solid #fff;\n        background-color: #ddd;\n        display: inline-block;\n        border-radius: 50%;\n        vertical-align: bottom;\n        margin: 8px 8px;\n        text-align: center;\n        line-height: 16px;\n        transition: background-color 0.3s ease;\n        pointer-events: inherit;\n        color: #aaa;\n    }\n    &::after {\n        content: '';\n        width: 5px;\n        height: 10px;\n        border-right: 2px solid #333;\n        border-bottom: 2px solid #333;\n        transform: translate(-18px, 8px);\n        transition: transform 0.3s ease;\n        position: absolute;\n        pointer-events: inherit;\n        transform: translate(-18px, 10px) rotate(45deg);\n    }\n\n    /** checked */\n    &:checked::before {\n        content: '';\n        background-color: #51cd7c;\n        border-color: #51cd7c;\n        color: #fff;\n    }\n    &:checked::after {\n        content: '';\n        border-right: 2px solid #ddd;\n        border-bottom: 2px solid #ddd;\n    }\n    ${(props) => props.active && 'opacity: 0.5 '};\n    &:checked {\n        opacity: 1 !important;\n    }\n`;\n\nexport const HoverOverlay = styled.div<{ checked: boolean }>`\n    opacity: 0;\n    left: 0;\n    top: 0;\n    outline: none;\n    height: 40%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #fff;\n    font-weight: 900;\n    position: absolute;\n    ${(props) =>\n        !props.checked &&\n        'background:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0))'};\n`;\n\nexport const InSelectRangeOverLay = styled.div<{ active: boolean }>`\n    opacity: ${(props) => (!props.active ? 0 : 1)});\n    left: 0;\n    top: 0;\n    outline: none;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #fff;\n    font-weight: 900;\n    position: absolute;\n    ${(props) => props.active && 'background:rgba(81, 205, 124, 0.25)'};\n`;\n\nconst Cont = styled.div<{ disabled: boolean; selected: boolean }>`\n    background: #222;\n    display: flex;\n    width: fit-content;\n    margin-bottom: ${GAP_BTW_TILES}px;\n    min-width: 100%;\n    overflow: hidden;\n    position: relative;\n    flex: 1;\n    cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};\n\n    & > img {\n        object-fit: cover;\n        max-width: 100%;\n        min-height: 100%;\n        flex: 1;\n        ${(props) => props.selected && 'border: 5px solid #51cd7c;'}\n        pointer-events: none;\n    }\n\n    & > svg {\n        position: absolute;\n        color: white;\n        width: 50px;\n        height: 50px;\n        margin-left: 50%;\n        margin-top: 50%;\n        top: -25px;\n        left: -25px;\n        filter: drop-shadow(3px 3px 2px rgba(0, 0, 0, 0.7));\n    }\n\n    &:hover ${Check} {\n        opacity: 0.5;\n    }\n    &:hover ${HoverOverlay} {\n        opacity: 1;\n    }\n`;\n\nexport default function PreviewCard(props: IProps) {\n    const [imgSrc, setImgSrc] = useState<string>();\n    const { thumbs, files } = useContext(GalleryContext);\n    const {\n        file,\n        onClick,\n        updateUrl,\n        forcedEnable,\n        selectable,\n        selected,\n        onSelect,\n        selectOnClick,\n        onHover,\n        onRangeSelect,\n        isRangeSelectActive,\n        isInsSelectRange,\n    } = props;\n    const isMounted = useRef(true);\n    useLayoutEffect(() => {\n        if (file && !file.msrc) {\n            const main = async () => {\n                try {\n                    const url = await DownloadManager.getThumbnail(file);\n                    if (isMounted.current) {\n                        setImgSrc(url);\n                        thumbs.set(file.id, url);\n                        file.msrc = url;\n                        if (!file.src) {\n                            file.src = url;\n                        }\n                        updateUrl(url);\n                    }\n                } catch (e) {\n                    // no-op\n                }\n            };\n\n            if (thumbs.has(file.id)) {\n                const thumbImgSrc = thumbs.get(file.id);\n                setImgSrc(thumbImgSrc);\n                file.msrc = thumbImgSrc;\n                if (!file.src) {\n                    if (files.has(file.id)) {\n                        file.src = files.get(file.id);\n                    } else {\n                        file.src = thumbImgSrc;\n                    }\n                }\n            } else {\n                main();\n            }\n        }\n        return () => {\n            // cool cool cool\n            isMounted.current = false;\n        };\n    }, [file]);\n\n    const handleClick = () => {\n        if (selectOnClick) {\n            if (isRangeSelectActive) {\n                onRangeSelect();\n            }\n            onSelect?.(!selected);\n        } else if (file?.msrc || imgSrc) {\n            onClick?.();\n        }\n    };\n\n    const handleSelect: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        if (isRangeSelectActive) {\n            onRangeSelect?.();\n        }\n        onSelect?.(e.target.checked);\n    };\n\n    const longPressCallback = () => {\n        onSelect(!selected);\n    };\n    const handleHover = () => {\n        if (selectOnClick) {\n            onHover();\n        }\n    };\n    return (\n        <Cont\n            id={`thumb-${file?.id}`}\n            onClick={handleClick}\n            onMouseEnter={handleHover}\n            disabled={!forcedEnable && !file?.msrc && !imgSrc}\n            selected={selected}\n            {...(selectable ? useLongPress(longPressCallback, 500) : {})}>\n            {selectable && (\n                <Check\n                    type=\"checkbox\"\n                    checked={selected}\n                    onChange={handleSelect}\n                    active={isRangeSelectActive && isInsSelectRange}\n                    onClick={(e) => e.stopPropagation()}\n                />\n            )}\n            {(file?.msrc || imgSrc) && <img src={file?.msrc || imgSrc} />}\n            {file?.metadata.fileType === 1 && <PlayCircleOutline />}\n            <HoverOverlay checked={selected} />\n            <InSelectRangeOverLay\n                active={isRangeSelectActive && isInsSelectRange}\n            />\n        </Cont>\n    );\n}\n","// https://stackoverflow.com/a/54749871/2760968\nimport { useState, useEffect } from 'react';\n\nexport default function useLongPress(callback: () => void, ms = 300) {\n    const [startLongPress, setStartLongPress] = useState(false);\n\n    useEffect(() => {\n        let timerId: NodeJS.Timeout;\n        if (startLongPress) {\n            timerId = setTimeout(callback, ms);\n        } else {\n            clearTimeout(timerId);\n        }\n\n        return () => {\n            clearTimeout(timerId);\n        };\n    }, [callback, ms, startLongPress]);\n\n    return {\n        onMouseDown: () => setStartLongPress(true),\n        onMouseUp: () => setStartLongPress(false),\n        onMouseLeave: () => setStartLongPress(false),\n        onTouchStart: () => setStartLongPress(true),\n        onTouchEnd: () => setStartLongPress(false),\n    };\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeartUI = styled.button<{\n    isClick: boolean;\n    size: number;\n}>`\n    width: ${(props) => props.size}px;\n    height: ${(props) => props.size}px;\n    float: right;\n    background: url('/fav-button.png') no-repeat;\n    cursor: pointer;\n    background-size: cover;\n    border: none;\n    ${({ isClick, size }) =>\n        isClick &&\n        `background-position: -${\n            28 * size\n        }px;transition: background 1s steps(28);`}\n`;\n\nexport default function FavButton({ isClick, onClick, size }) {\n    return <HeartUI isClick={isClick} onClick={onClick} size={size} />;\n}\n","export default [\n    'beforeChange',\n    'afterChange',\n    'imageLoadComplete',\n    'resize',\n    'gettingData',\n    'mouseUsed',\n    'initialZoomIn',\n    'initialZoomInEnd',\n    'initialZoomOut',\n    'initialZoomOutEnd',\n    'parseVerticalMargin',\n    'close',\n    'unbindEvents',\n    'destroy',\n    'updateScrollOffset',\n    'preventDragEvent',\n    'shareLinkClick',\n];\n","import React from 'react';\n\nexport default function EditIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\" />\n        </svg>\n    );\n}\n\nEditIcon.defaultProps = {\n    height: 20,\n    width: 20,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\nimport {\n    MIN_EDITED_CREATION_TIME,\n    MAX_EDITED_CREATION_TIME,\n    ALL_TIME,\n} from 'services/fileService';\n\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst isSameDay = (first, second) =>\n    first.getFullYear() === second.getFullYear() &&\n    first.getMonth() === second.getMonth() &&\n    first.getDate() === second.getDate();\n\nconst EnteDateTimePicker = ({ isInEditMode, pickedTime, handleChange }) => (\n    <DatePicker\n        open={isInEditMode}\n        selected={pickedTime}\n        onChange={handleChange}\n        timeInputLabel=\"Time:\"\n        dateFormat=\"dd/MM/yyyy h:mm aa\"\n        showTimeSelect\n        autoFocus\n        minDate={MIN_EDITED_CREATION_TIME}\n        maxDate={MAX_EDITED_CREATION_TIME}\n        maxTime={\n            isSameDay(pickedTime, new Date())\n                ? MAX_EDITED_CREATION_TIME\n                : ALL_TIME\n        }\n        minTime={MIN_EDITED_CREATION_TIME}\n        fixedHeight\n        withPortal></DatePicker>\n);\n\nexport default EnteDateTimePicker;\n","import React, { useEffect, useRef, useState } from 'react';\nimport Photoswipe from 'photoswipe';\nimport PhotoswipeUIDefault from 'photoswipe/dist/photoswipe-ui-default';\nimport classnames from 'classnames';\nimport FavButton from 'components/FavButton';\nimport {\n    addToFavorites,\n    removeFromFavorites,\n} from 'services/collectionService';\nimport {\n    File,\n    MAX_EDITED_FILE_NAME_LENGTH,\n    updatePublicMagicMetadata,\n} from 'services/fileService';\nimport constants from 'utils/strings/constants';\nimport exifr from 'exifr';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport styled from 'styled-components';\nimport events from './events';\nimport {\n    changeFileCreationTime,\n    changeFileName,\n    downloadFile,\n    formatDateTime,\n    splitFilenameAndExtension,\n    updateExistingFilePubMetadata,\n} from 'utils/file';\nimport { Col, Form, FormCheck, FormControl } from 'react-bootstrap';\nimport { prettyPrintExif } from 'utils/exif';\nimport EditIcon from 'components/icons/EditIcon';\nimport {\n    FlexWrapper,\n    IconButton,\n    Label,\n    Row,\n    Value,\n} from 'components/Container';\nimport { logError } from 'utils/sentry';\n\nimport CloseIcon from 'components/icons/CloseIcon';\nimport TickIcon from 'components/icons/TickIcon';\nimport { FreeFlowText } from 'components/RecoveryKeyModal';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport EnteSpinner from 'components/EnteSpinner';\nimport EnteDateTimePicker from 'components/EnteDateTimePicker';\n\ninterface Iprops {\n    isOpen: boolean;\n    items: any[];\n    currentIndex?: number;\n    onClose?: (needUpdate: boolean) => void;\n    gettingData: (instance: any, index: number, item: File) => void;\n    id?: string;\n    className?: string;\n    favItemIds: Set<number>;\n    loadingBar: any;\n    isSharedCollection: boolean;\n    isTrashCollection: boolean;\n}\n\nconst LegendContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst Legend = styled.span`\n    font-size: 20px;\n    color: #ddd;\n    display: inline;\n`;\n\nconst Pre = styled.pre`\n    color: #aaa;\n    padding: 7px 15px;\n`;\n\nconst renderInfoItem = (label: string, value: string | JSX.Element) => (\n    <Row>\n        <Label width=\"30%\">{label}</Label>\n        <Value width=\"70%\">{value}</Value>\n    </Row>\n);\n\nfunction RenderCreationTime({\n    file,\n    scheduleUpdate,\n}: {\n    file: File;\n    scheduleUpdate: () => void;\n}) {\n    const originalCreationTime = new Date(file?.metadata.creationTime / 1000);\n    const [isInEditMode, setIsInEditMode] = useState(false);\n\n    const [pickedTime, setPickedTime] = useState(originalCreationTime);\n\n    const openEditMode = () => setIsInEditMode(true);\n    const closeEditMode = () => setIsInEditMode(false);\n\n    const saveEdits = async () => {\n        try {\n            if (isInEditMode && file) {\n                const unixTimeInMicroSec = pickedTime.getTime() * 1000;\n                if (unixTimeInMicroSec === file?.metadata.creationTime) {\n                    closeEditMode();\n                    return;\n                }\n                let updatedFile = await changeFileCreationTime(\n                    file,\n                    unixTimeInMicroSec\n                );\n                updatedFile = (\n                    await updatePublicMagicMetadata([updatedFile])\n                )[0];\n                updateExistingFilePubMetadata(file, updatedFile);\n                scheduleUpdate();\n            }\n        } catch (e) {\n            logError(e, 'failed to update creationTime');\n        }\n        closeEditMode();\n    };\n    const discardEdits = () => {\n        setPickedTime(originalCreationTime);\n        closeEditMode();\n    };\n    const handleChange = (newDate) => {\n        if (newDate instanceof Date) {\n            setPickedTime(newDate);\n        }\n    };\n    return (\n        <>\n            <Row>\n                <Label width=\"30%\">{constants.CREATION_TIME}</Label>\n                <Value width={isInEditMode ? '50%' : '60%'}>\n                    {isInEditMode ? (\n                        <EnteDateTimePicker\n                            isInEditMode={isInEditMode}\n                            pickedTime={pickedTime}\n                            handleChange={handleChange}\n                        />\n                    ) : (\n                        formatDateTime(pickedTime)\n                    )}\n                </Value>\n                <Value\n                    width={isInEditMode ? '20%' : '10%'}\n                    style={{ cursor: 'pointer', marginLeft: '10px' }}>\n                    {!isInEditMode ? (\n                        <IconButton onClick={openEditMode}>\n                            <EditIcon />\n                        </IconButton>\n                    ) : (\n                        <>\n                            <IconButton onClick={saveEdits}>\n                                <TickIcon />\n                            </IconButton>\n                            <IconButton onClick={discardEdits}>\n                                <CloseIcon />\n                            </IconButton>\n                        </>\n                    )}\n                </Value>\n            </Row>\n        </>\n    );\n}\nconst getFileTitle = (filename, extension) => {\n    if (extension) {\n        return filename + '.' + extension;\n    } else {\n        return filename;\n    }\n};\ninterface formValues {\n    filename: string;\n}\n\nconst FileNameEditForm = ({ filename, saveEdits, discardEdits, extension }) => {\n    const [loading, setLoading] = useState(false);\n\n    const onSubmit = async (values: formValues) => {\n        try {\n            setLoading(true);\n            await saveEdits(values.filename);\n        } finally {\n            setLoading(false);\n        }\n    };\n    return (\n        <Formik<formValues>\n            initialValues={{ filename }}\n            validationSchema={Yup.object().shape({\n                filename: Yup.string()\n                    .required(constants.REQUIRED)\n                    .max(\n                        MAX_EDITED_FILE_NAME_LENGTH,\n                        constants.FILE_NAME_CHARACTER_LIMIT\n                    ),\n            })}\n            validateOnBlur={false}\n            onSubmit={onSubmit}>\n            {({ values, errors, handleChange, handleSubmit }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Row>\n                        <Form.Group\n                            bsPrefix=\"ente-form-group\"\n                            as={Col}\n                            xs={extension ? 7 : 8}>\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder={constants.FILE_NAME}\n                                value={values.filename}\n                                onChange={handleChange('filename')}\n                                isInvalid={Boolean(errors.filename)}\n                                autoFocus\n                                disabled={loading}\n                            />\n                            <FormControl.Feedback\n                                type=\"invalid\"\n                                style={{ textAlign: 'center' }}>\n                                {errors.filename}\n                            </FormControl.Feedback>\n                        </Form.Group>\n                        {extension && (\n                            <Form.Group\n                                bsPrefix=\"ente-form-group\"\n                                as={Col}\n                                xs={1}\n                                controlId=\"formHorizontalFileName\">\n                                <FlexWrapper style={{ padding: '5px' }}>\n                                    {`.${extension}`}\n                                </FlexWrapper>\n                            </Form.Group>\n                        )}\n                        <Form.Group bsPrefix=\"ente-form-group\" as={Col} xs={2}>\n                            <Value width={'16.67%'}>\n                                <IconButton type=\"submit\" disabled={loading}>\n                                    {loading ? (\n                                        <EnteSpinner\n                                            style={{\n                                                width: '20px',\n                                                height: '20px',\n                                            }}\n                                        />\n                                    ) : (\n                                        <TickIcon />\n                                    )}\n                                </IconButton>\n                                <IconButton\n                                    onClick={discardEdits}\n                                    disabled={loading}>\n                                    <CloseIcon />\n                                </IconButton>\n                            </Value>\n                        </Form.Group>\n                    </Form.Row>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nfunction RenderFileName({\n    file,\n    scheduleUpdate,\n}: {\n    file: File;\n    scheduleUpdate: () => void;\n}) {\n    const originalTitle = file?.metadata.title;\n    const [isInEditMode, setIsInEditMode] = useState(false);\n    const [originalFileName, extension] =\n        splitFilenameAndExtension(originalTitle);\n    const [filename, setFilename] = useState(originalFileName);\n    const openEditMode = () => setIsInEditMode(true);\n    const closeEditMode = () => setIsInEditMode(false);\n\n    const saveEdits = async (newFilename: string) => {\n        try {\n            if (file) {\n                if (filename === newFilename) {\n                    closeEditMode();\n                    return;\n                }\n                setFilename(newFilename);\n                const newTitle = getFileTitle(newFilename, extension);\n                let updatedFile = await changeFileName(file, newTitle);\n                updatedFile = (\n                    await updatePublicMagicMetadata([updatedFile])\n                )[0];\n                updateExistingFilePubMetadata(file, updatedFile);\n                scheduleUpdate();\n            }\n        } catch (e) {\n            logError(e, 'failed to update file name');\n        } finally {\n            closeEditMode();\n        }\n    };\n    return (\n        <>\n            <Row>\n                <Label width=\"30%\">{constants.FILE_NAME}</Label>\n                {!isInEditMode ? (\n                    <>\n                        <Value width=\"60%\">\n                            <FreeFlowText>\n                                {getFileTitle(filename, extension)}\n                            </FreeFlowText>\n                        </Value>\n                        <Value\n                            width=\"10%\"\n                            style={{ cursor: 'pointer', marginLeft: '10px' }}>\n                            <IconButton onClick={openEditMode}>\n                                <EditIcon />\n                            </IconButton>\n                        </Value>\n                    </>\n                ) : (\n                    <FileNameEditForm\n                        extension={extension}\n                        filename={filename}\n                        saveEdits={saveEdits}\n                        discardEdits={closeEditMode}\n                    />\n                )}\n            </Row>\n        </>\n    );\n}\nfunction ExifData(props: { exif: any }) {\n    const { exif } = props;\n    const [showAll, setShowAll] = useState(false);\n\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setShowAll(e.target.checked);\n    };\n\n    const renderAllValues = () => <Pre>{exif.raw}</Pre>;\n\n    const renderSelectedValues = () => (\n        <>\n            {exif?.Make &&\n                exif?.Model &&\n                renderInfoItem(constants.DEVICE, `${exif.Make} ${exif.Model}`)}\n            {exif?.ImageWidth &&\n                exif?.ImageHeight &&\n                renderInfoItem(\n                    constants.IMAGE_SIZE,\n                    `${exif.ImageWidth} x ${exif.ImageHeight}`\n                )}\n            {exif?.Flash && renderInfoItem(constants.FLASH, exif.Flash)}\n            {exif?.FocalLength &&\n                renderInfoItem(\n                    constants.FOCAL_LENGTH,\n                    exif.FocalLength.toString()\n                )}\n            {exif?.ApertureValue &&\n                renderInfoItem(\n                    constants.APERTURE,\n                    exif.ApertureValue.toString()\n                )}\n            {exif?.ISOSpeedRatings &&\n                renderInfoItem(constants.ISO, exif.ISOSpeedRatings.toString())}\n        </>\n    );\n\n    return (\n        <>\n            <LegendContainer>\n                <Legend>{constants.EXIF}</Legend>\n                <FormCheck>\n                    <FormCheck.Label>\n                        <FormCheck.Input onChange={changeHandler} />\n                        {constants.SHOW_ALL}\n                    </FormCheck.Label>\n                </FormCheck>\n            </LegendContainer>\n            {showAll ? renderAllValues() : renderSelectedValues()}\n        </>\n    );\n}\n\nfunction InfoModal({\n    showInfo,\n    handleCloseInfo,\n    items,\n    photoSwipe,\n    metadata,\n    exif,\n    scheduleUpdate,\n}) {\n    return (\n        <Modal show={showInfo} onHide={handleCloseInfo}>\n            <Modal.Header closeButton>\n                <Modal.Title>{constants.INFO}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div>\n                    <Legend>{constants.METADATA}</Legend>\n                </div>\n                {renderInfoItem(\n                    constants.FILE_ID,\n                    items[photoSwipe?.getCurrentIndex()]?.id\n                )}\n                {metadata?.title && (\n                    <RenderFileName\n                        file={items[photoSwipe?.getCurrentIndex()]}\n                        scheduleUpdate={scheduleUpdate}\n                    />\n                )}\n                {metadata?.creationTime && (\n                    <RenderCreationTime\n                        file={items[photoSwipe?.getCurrentIndex()]}\n                        scheduleUpdate={scheduleUpdate}\n                    />\n                )}\n                {metadata?.modificationTime &&\n                    renderInfoItem(\n                        constants.UPDATED_ON,\n                        formatDateTime(metadata.modificationTime / 1000)\n                    )}\n                {metadata?.longitude > 0 &&\n                    metadata?.longitude > 0 &&\n                    renderInfoItem(\n                        constants.LOCATION,\n                        <a\n                            href={`https://www.openstreetmap.org/?mlat=${metadata.latitude}&mlon=${metadata.longitude}#map=15/${metadata.latitude}/${metadata.longitude}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\">\n                            {constants.SHOW_MAP}\n                        </a>\n                    )}\n                {exif && (\n                    <>\n                        <ExifData exif={exif} />\n                    </>\n                )}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"outline-secondary\" onClick={handleCloseInfo}>\n                    {constants.CLOSE}\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nfunction PhotoSwipe(props: Iprops) {\n    const pswpElement = useRef<HTMLDivElement>();\n    const [photoSwipe, setPhotoSwipe] = useState<Photoswipe<any>>();\n\n    const { isOpen, items } = props;\n    const [isFav, setIsFav] = useState(false);\n    const [showInfo, setShowInfo] = useState(false);\n    const [metadata, setMetaData] = useState<File['metadata']>(null);\n    const [exif, setExif] = useState<any>(null);\n    const needUpdate = useRef(false);\n\n    useEffect(() => {\n        if (!pswpElement) return;\n        if (isOpen) {\n            openPhotoSwipe();\n        }\n        if (!isOpen) {\n            closePhotoSwipe();\n        }\n        return () => {\n            closePhotoSwipe();\n        };\n    }, [isOpen]);\n\n    useEffect(() => {\n        updateItems(items);\n    }, [items]);\n\n    useEffect(() => {\n        if (photoSwipe) {\n            photoSwipe.options.arrowKeys = !showInfo;\n            photoSwipe.options.escKey = !showInfo;\n        }\n    }, [showInfo]);\n\n    function updateFavButton() {\n        setIsFav(isInFav(this?.currItem));\n    }\n\n    const openPhotoSwipe = () => {\n        const { items, currentIndex } = props;\n        const options = {\n            history: false,\n            maxSpreadZoom: 5,\n            index: currentIndex,\n            showHideOpacity: true,\n            getDoubleTapZoom(isMouseClick, item) {\n                if (isMouseClick) {\n                    return 2.5;\n                }\n                // zoom to original if initial zoom is less than 0.7x,\n                // otherwise to 1.5x, to make sure that double-tap gesture always zooms image\n                return item.initialZoomLevel < 0.7 ? 1 : 1.5;\n            },\n            getThumbBoundsFn: (index) => {\n                try {\n                    const file = items[index];\n                    const ele = document.getElementById(`thumb-${file.id}`);\n                    if (ele) {\n                        const rect = ele.getBoundingClientRect();\n                        const pageYScroll =\n                            window.pageYOffset ||\n                            document.documentElement.scrollTop;\n                        return {\n                            x: rect.left,\n                            y: rect.top + pageYScroll,\n                            w: rect.width,\n                        };\n                    }\n                    return null;\n                } catch (e) {\n                    return null;\n                }\n            },\n        };\n        const photoSwipe = new Photoswipe(\n            pswpElement.current,\n            PhotoswipeUIDefault,\n            items,\n            options\n        );\n        events.forEach((event) => {\n            const callback = props[event];\n            if (callback || event === 'destroy') {\n                photoSwipe.listen(event, function (...args) {\n                    if (callback) {\n                        args.unshift(this);\n                        callback(...args);\n                    }\n                    if (event === 'destroy') {\n                        handleClose();\n                    }\n                    if (event === 'close') {\n                        handleClose();\n                    }\n                });\n            }\n        });\n        photoSwipe.listen('beforeChange', function () {\n            updateInfo.call(this);\n            updateFavButton.call(this);\n        });\n        photoSwipe.listen('resize', checkExifAvailable);\n        photoSwipe.init();\n        needUpdate.current = false;\n        setPhotoSwipe(photoSwipe);\n    };\n\n    const closePhotoSwipe = () => {\n        if (photoSwipe) photoSwipe.close();\n    };\n\n    const handleClose = () => {\n        const { onClose } = props;\n        if (typeof onClose === 'function') {\n            onClose(needUpdate.current);\n        }\n        const videoTags = document.getElementsByTagName('video');\n        for (const videoTag of videoTags) {\n            videoTag.pause();\n        }\n        handleCloseInfo();\n    };\n    const isInFav = (file) => {\n        const { favItemIds } = props;\n        if (favItemIds && file) {\n            return favItemIds.has(file.id);\n        }\n        return false;\n    };\n\n    const onFavClick = async (file) => {\n        const { favItemIds } = props;\n        if (!isInFav(file)) {\n            favItemIds.add(file.id);\n            addToFavorites(file);\n            setIsFav(true);\n        } else {\n            favItemIds.delete(file.id);\n            removeFromFavorites(file);\n            setIsFav(false);\n        }\n        needUpdate.current = true;\n    };\n\n    const updateItems = (items = []) => {\n        if (photoSwipe) {\n            photoSwipe.items.length = 0;\n            items.forEach((item) => {\n                photoSwipe.items.push(item);\n            });\n            photoSwipe.invalidateCurrItems();\n            // photoSwipe.updateSize(true);\n        }\n    };\n\n    const checkExifAvailable = () => {\n        setExif(null);\n        setTimeout(() => {\n            const img: HTMLImageElement = document.querySelector(\n                '.pswp__img:not(.pswp__img--placeholder)'\n            );\n            if (img) {\n                exifr.parse(img).then(function (exifData) {\n                    if (!exifData) {\n                        return;\n                    }\n                    exifData.raw = prettyPrintExif(exifData);\n                    setExif(exifData);\n                });\n            }\n        }, 100);\n    };\n\n    function updateInfo() {\n        const file: File = this?.currItem;\n        if (file?.metadata) {\n            setMetaData(file.metadata);\n            setExif(null);\n            checkExifAvailable();\n        }\n    }\n\n    const handleCloseInfo = () => {\n        setShowInfo(false);\n    };\n    const handleOpenInfo = () => {\n        setShowInfo(true);\n    };\n\n    const downloadFileHelper = async (file) => {\n        const { loadingBar } = props;\n        loadingBar.current.continuousStart();\n        await downloadFile(file);\n        loadingBar.current.complete();\n    };\n    const scheduleUpdate = () => (needUpdate.current = true);\n    const { id } = props;\n    let { className } = props;\n    className = classnames(['pswp', className]).trim();\n    return (\n        <>\n            <div\n                id={id}\n                className={className}\n                tabIndex={Number('-1')}\n                role=\"dialog\"\n                aria-hidden=\"true\"\n                ref={pswpElement}>\n                <div className=\"pswp__bg\" />\n                <div className=\"pswp__scroll-wrap\">\n                    <div className=\"pswp__container\">\n                        <div className=\"pswp__item\" />\n                        <div className=\"pswp__item\" />\n                        <div className=\"pswp__item\" />\n                    </div>\n                    <div className=\"pswp__ui pswp__ui--hidden\">\n                        <div className=\"pswp__top-bar\">\n                            <div className=\"pswp__counter\" />\n\n                            <button\n                                className=\"pswp__button pswp__button--close\"\n                                title={constants.CLOSE}\n                            />\n\n                            <button\n                                className=\"pswp-custom download-btn\"\n                                title={constants.DOWNLOAD}\n                                onClick={() =>\n                                    downloadFileHelper(photoSwipe.currItem)\n                                }\n                            />\n\n                            <button\n                                className=\"pswp__button pswp__button--fs\"\n                                title={constants.TOGGLE_FULLSCREEN}\n                            />\n                            <button\n                                className=\"pswp__button pswp__button--zoom\"\n                                title={constants.ZOOM_IN_OUT}\n                            />\n                            {!props.isSharedCollection &&\n                                !props.isTrashCollection && (\n                                    <FavButton\n                                        size={44}\n                                        isClick={isFav}\n                                        onClick={() => {\n                                            onFavClick(photoSwipe?.currItem);\n                                        }}\n                                    />\n                                )}\n                            <button\n                                className=\"pswp-custom info-btn\"\n                                title={constants.INFO}\n                                onClick={handleOpenInfo}\n                            />\n                            <div className=\"pswp__preloader\">\n                                <div className=\"pswp__preloader__icn\">\n                                    <div className=\"pswp__preloader__cut\">\n                                        <div className=\"pswp__preloader__donut\" />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\n                            <div className=\"pswp__share-tooltip\" />\n                        </div>\n                        <button\n                            className=\"pswp__button pswp__button--arrow--left\"\n                            title={constants.PREVIOUS}\n                        />\n                        <button\n                            className=\"pswp__button pswp__button--arrow--right\"\n                            title={constants.NEXT}\n                        />\n                        <div className=\"pswp__caption\">\n                            <div />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <InfoModal\n                showInfo={showInfo}\n                handleCloseInfo={handleCloseInfo}\n                items={items}\n                photoSwipe={photoSwipe}\n                metadata={metadata}\n                exif={exif}\n                scheduleUpdate={scheduleUpdate}\n            />\n        </>\n    );\n}\n\nexport default PhotoSwipe;\n","export function prettyPrintExif(exifData: Object) {\n    let strPretty = '';\n    for (const [tagName, tagValue] of Object.entries(exifData)) {\n        if (tagValue instanceof Uint8Array) {\n            strPretty += tagName + ' : ' + '[' + tagValue + ']' + '\\r\\n';\n        } else if (tagValue instanceof Date) {\n            strPretty += tagName + ' : ' + tagValue.toDateString() + '\\r\\n';\n        } else {\n            strPretty += tagName + ' : ' + tagValue + '\\r\\n';\n        }\n    }\n    return strPretty;\n}\n","import { DateValue } from 'components/SearchBar';\nimport { File } from 'services/fileService';\nimport { Bbox } from 'services/searchService';\n\nexport function isInsideBox(\n    file: { longitude: number; latitude: number },\n    bbox: Bbox\n) {\n    if (file.latitude === null && file.longitude === null) {\n        return false;\n    }\n    if (\n        file.longitude >= bbox[0] &&\n        file.latitude >= bbox[1] &&\n        file.longitude <= bbox[2] &&\n        file.latitude <= bbox[3]\n    ) {\n        return true;\n    }\n}\n\nexport const isSameDay = (baseDate: DateValue) => (compareDate: Date) => {\n    let same = true;\n\n    if (baseDate.month || baseDate.month === 0) {\n        same = baseDate.month === compareDate.getMonth();\n    }\n    if (same && baseDate.date) {\n        same = baseDate.date === compareDate.getDate();\n    }\n    if (same && baseDate.year) {\n        same = baseDate.year === compareDate.getFullYear();\n    }\n\n    return same;\n};\n\nexport function getFilesWithCreationDay(\n    files: File[],\n    searchedDate: DateValue\n) {\n    const isSearchedDate = isSameDay(searchedDate);\n    return files.filter((file) =>\n        isSearchedDate(new Date(file.metadata.creationTime / 1000))\n    );\n}\nexport function getFormattedDate(date: DateValue) {\n    const options = {};\n    date.date && (options['day'] = 'numeric');\n    (date.month || date.month === 0) && (options['month'] = 'long');\n    date.year && (options['year'] = 'numeric');\n    return new Intl.DateTimeFormat('en-IN', options).format(\n        new Date(date.year ?? 1, date.month ?? 1, date.date ?? 1)\n    );\n}\n","const WAIT_FOR_VIDEO_PLAYBACK = 1 * 1000;\n\nexport async function isPlaybackPossible(url: string): Promise<boolean> {\n    return await new Promise((resolve) => {\n        const t = setTimeout(() => {\n            resolve(false);\n        }, WAIT_FOR_VIDEO_PLAYBACK);\n        const video = document.createElement('video');\n        video.addEventListener('canplay', function () {\n            clearTimeout(t);\n            resolve(true);\n        });\n        video.src = url;\n    });\n}\n","import React, { useRef, useEffect } from 'react';\nimport { VariableSizeList as List } from 'react-window';\nimport styled from 'styled-components';\nimport { File } from 'services/fileService';\nimport {\n    IMAGE_CONTAINER_MAX_WIDTH,\n    IMAGE_CONTAINER_MAX_HEIGHT,\n    MIN_COLUMNS,\n    DATE_CONTAINER_HEIGHT,\n    GAP_BTW_TILES,\n    SPACE_BTW_DATES,\n} from 'types';\nimport constants from 'utils/strings/constants';\n\nconst A_DAY = 24 * 60 * 60 * 1000;\nconst NO_OF_PAGES = 2;\n\nenum ITEM_TYPE {\n    TIME = 'TIME',\n    TILE = 'TILE',\n    BANNER = 'BANNER',\n}\n\ninterface TimeStampListItem {\n    itemType: ITEM_TYPE;\n    items?: File[];\n    itemStartIndex?: number;\n    date?: string;\n    dates?: {\n        date: string;\n        span: number;\n    }[];\n    groups?: number[];\n    banner?: any;\n    id?: string;\n    height?: number;\n}\n\nconst ListItem = styled.div`\n    display: flex;\n    justify-content: center;\n`;\n\nconst getTemplateColumns = (columns: number, groups?: number[]): string => {\n    if (groups) {\n        const sum = groups.reduce((acc, item) => acc + item, 0);\n        if (sum < columns) {\n            groups[groups.length - 1] += columns - sum;\n        }\n        return groups\n            .map((x) => `repeat(${x}, 1fr)`)\n            .join(` ${SPACE_BTW_DATES}px `);\n    } else {\n        return `repeat(${columns}, 1fr)`;\n    }\n};\n\nconst ListContainer = styled.div<{ columns: number; groups?: number[] }>`\n    user-select: none;\n    display: grid;\n    grid-template-columns: ${({ columns, groups }) =>\n        getTemplateColumns(columns, groups)};\n    grid-column-gap: ${GAP_BTW_TILES}px;\n    padding: 0 24px;\n    width: 100%;\n    color: #fff;\n\n    @media (max-width: ${IMAGE_CONTAINER_MAX_WIDTH * 4}px) {\n        padding: 0 4px;\n    }\n`;\n\nconst DateContainer = styled.div<{ span: number }>`\n    user-select: none;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    grid-column: span ${(props) => props.span};\n    display: flex;\n    align-items: center;\n    height: ${DATE_CONTAINER_HEIGHT}px;\n`;\n\nconst BannerContainer = styled.div<{ span: number }>`\n    color: #979797;\n    text-align: center;\n    grid-column: span ${(props) => props.span};\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n`;\n\nconst NothingContainer = styled.div<{ span: number }>`\n    color: #979797;\n    text-align: center;\n    grid-column: span ${(props) => props.span};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\ninterface Props {\n    height: number;\n    width: number;\n    filteredData: File[];\n    showBanner: boolean;\n    getThumbnail: (file: File[], index: number) => JSX.Element;\n    activeCollection: number;\n    resetFetching: () => void;\n}\n\nexport function PhotoList({\n    height,\n    width,\n    filteredData,\n    showBanner,\n    getThumbnail,\n    activeCollection,\n    resetFetching,\n}: Props) {\n    const timeStampListRef = useRef([]);\n    const timeStampList = timeStampListRef?.current ?? [];\n    const filteredDataCopyRef = useRef([]);\n    const filteredDataCopy = filteredDataCopyRef.current ?? [];\n    const listRef = useRef(null);\n\n    let columns = Math.floor(width / IMAGE_CONTAINER_MAX_WIDTH);\n    let listItemHeight = IMAGE_CONTAINER_MAX_HEIGHT;\n\n    let skipMerge = false;\n    if (columns < MIN_COLUMNS) {\n        columns = MIN_COLUMNS;\n        listItemHeight = width / MIN_COLUMNS;\n        skipMerge = true;\n    }\n\n    const refreshList = () => {\n        listRef.current?.resetAfterIndex(0);\n        resetFetching();\n    };\n\n    useEffect(() => {\n        let timeStampList: TimeStampListItem[] = [];\n        let listItemIndex = 0;\n        let currentDate = -1;\n\n        filteredData.forEach((item, index) => {\n            if (\n                !isSameDay(\n                    new Date(item.metadata.creationTime / 1000),\n                    new Date(currentDate)\n                )\n            ) {\n                currentDate = item.metadata.creationTime / 1000;\n                const dateTimeFormat = new Intl.DateTimeFormat('en-IN', {\n                    weekday: 'short',\n                    year: 'numeric',\n                    month: 'short',\n                    day: 'numeric',\n                });\n                timeStampList.push({\n                    itemType: ITEM_TYPE.TIME,\n                    date: isSameDay(new Date(currentDate), new Date())\n                        ? 'Today'\n                        : isSameDay(\n                              new Date(currentDate),\n                              new Date(Date.now() - A_DAY)\n                          )\n                        ? 'Yesterday'\n                        : dateTimeFormat.format(currentDate),\n                    id: currentDate.toString(),\n                });\n                timeStampList.push({\n                    itemType: ITEM_TYPE.TILE,\n                    items: [item],\n                    itemStartIndex: index,\n                });\n                listItemIndex = 1;\n            } else if (listItemIndex < columns) {\n                timeStampList[timeStampList.length - 1].items.push(item);\n                listItemIndex++;\n            } else {\n                listItemIndex = 1;\n                timeStampList.push({\n                    itemType: ITEM_TYPE.TILE,\n                    items: [item],\n                    itemStartIndex: index,\n                });\n            }\n        });\n\n        if (!skipMerge) {\n            timeStampList = mergeTimeStampList(timeStampList, columns);\n        }\n        if (timeStampList.length === 0) {\n            timeStampList.push(getEmptyListItem());\n        }\n        if (showBanner) {\n            timeStampList.push(getBannerItem(timeStampList));\n        }\n\n        timeStampListRef.current = timeStampList;\n        filteredDataCopyRef.current = filteredData;\n        refreshList();\n    }, [width, height, filteredData, showBanner]);\n\n    const isSameDay = (first, second) =>\n        first.getFullYear() === second.getFullYear() &&\n        first.getMonth() === second.getMonth() &&\n        first.getDate() === second.getDate();\n\n    const getEmptyListItem = () => {\n        return {\n            itemType: ITEM_TYPE.BANNER,\n            banner: (\n                <NothingContainer span={columns}>\n                    <div>{constants.NOTHING_HERE}</div>\n                </NothingContainer>\n            ),\n            id: 'empty-list-banner',\n            height: height - 48,\n        };\n    };\n\n    const getBannerItem = (timeStampList) => {\n        const photoFrameHeight = (() => {\n            let sum = 0;\n            const getCurrentItemSize = getItemSize(timeStampList);\n            for (let i = 0; i < timeStampList.length; i++) {\n                sum += getCurrentItemSize(i);\n            }\n            return sum;\n        })();\n        return {\n            itemType: ITEM_TYPE.BANNER,\n            banner: (\n                <BannerContainer span={columns}>\n                    <p>{constants.INSTALL_MOBILE_APP()}</p>\n                </BannerContainer>\n            ),\n            id: 'install-banner',\n            height: Math.max(48, height - photoFrameHeight),\n        };\n    };\n    /**\n     * Checks and merge multiple dates into a single row.\n     *\n     * @param items\n     * @param columns\n     * @returns\n     */\n    const mergeTimeStampList = (\n        items: TimeStampListItem[],\n        columns: number\n    ): TimeStampListItem[] => {\n        const newList: TimeStampListItem[] = [];\n        let index = 0;\n        let newIndex = 0;\n        while (index < items.length) {\n            const currItem = items[index];\n            // If the current item is of type time, then it is not part of an ongoing date.\n            // So, there is a possibility of merge.\n            if (currItem.itemType === ITEM_TYPE.TIME) {\n                // If new list pointer is not at the end of list then\n                // we can add more items to the same list.\n                if (newList[newIndex]) {\n                    // Check if items can be added to same list\n                    if (\n                        newList[newIndex + 1].items.length +\n                            items[index + 1].items.length <=\n                        columns\n                    ) {\n                        newList[newIndex].dates.push({\n                            date: currItem.date,\n                            span: items[index + 1].items.length,\n                        });\n                        newList[newIndex + 1].items = newList[\n                            newIndex + 1\n                        ].items.concat(items[index + 1].items);\n                        index += 2;\n                    } else {\n                        // Adding items would exceed the number of columns.\n                        // So, move new list pointer to the end. Hence, in next iteration,\n                        // items will be added to a new list.\n                        newIndex += 2;\n                    }\n                } else {\n                    // New list pointer was at the end of list so simply add new items to the list.\n                    newList.push({\n                        ...currItem,\n                        date: null,\n                        dates: [\n                            {\n                                date: currItem.date,\n                                span: items[index + 1].items.length,\n                            },\n                        ],\n                    });\n                    newList.push(items[index + 1]);\n                    index += 2;\n                }\n            } else {\n                // Merge cannot happen. Simply add all items to new list\n                // and set new list point to the end of list.\n                newList.push(currItem);\n                index++;\n                newIndex = newList.length;\n            }\n        }\n        for (let i = 0; i < newList.length; i++) {\n            const currItem = newList[i];\n            const nextItem = newList[i + 1];\n            if (currItem.itemType === ITEM_TYPE.TIME) {\n                if (currItem.dates.length > 1) {\n                    currItem.groups = currItem.dates.map((item) => item.span);\n                    nextItem.groups = currItem.groups;\n                }\n            }\n        }\n        return newList;\n    };\n\n    const getItemSize = (timeStampList) => (index) => {\n        switch (timeStampList[index].itemType) {\n            case ITEM_TYPE.TIME:\n                return DATE_CONTAINER_HEIGHT;\n            case ITEM_TYPE.TILE:\n                return listItemHeight;\n            default:\n                return timeStampList[index].height;\n        }\n    };\n\n    const extraRowsToRender = Math.ceil(\n        (NO_OF_PAGES * height) / IMAGE_CONTAINER_MAX_HEIGHT\n    );\n\n    const generateKey = (index) => {\n        switch (timeStampList[index].itemType) {\n            case ITEM_TYPE.TILE:\n                return `${timeStampList[index].items[0].id}-${\n                    timeStampList[index].items.slice(-1)[0].id\n                }`;\n            default:\n                return `${timeStampList[index].id}-${index}`;\n        }\n    };\n\n    const renderListItem = (listItem: TimeStampListItem) => {\n        switch (listItem.itemType) {\n            case ITEM_TYPE.TIME:\n                return listItem.dates ? (\n                    listItem.dates.map((item) => (\n                        <>\n                            <DateContainer key={item.date} span={item.span}>\n                                {item.date}\n                            </DateContainer>\n                            <div />\n                        </>\n                    ))\n                ) : (\n                    <DateContainer span={columns}>\n                        {listItem.date}\n                    </DateContainer>\n                );\n            case ITEM_TYPE.BANNER:\n                return listItem.banner;\n            default: {\n                const ret = listItem.items.map((item, idx) =>\n                    getThumbnail(\n                        filteredDataCopy,\n                        listItem.itemStartIndex + idx\n                    )\n                );\n                if (listItem.groups) {\n                    let sum = 0;\n                    for (let i = 0; i < listItem.groups.length - 1; i++) {\n                        sum = sum + listItem.groups[i];\n                        ret.splice(sum, 0, <div />);\n                        sum += 1;\n                    }\n                }\n                return ret;\n            }\n        }\n    };\n\n    return (\n        <List\n            key={`${activeCollection}`}\n            ref={listRef}\n            itemSize={getItemSize(timeStampList)}\n            height={height}\n            width={width}\n            itemCount={timeStampList.length}\n            itemKey={generateKey}\n            overscanCount={extraRowsToRender}>\n            {({ index, style }) => (\n                <ListItem style={style}>\n                    <ListContainer\n                        columns={columns}\n                        groups={timeStampList[index].groups}>\n                        {renderListItem(timeStampList[index])}\n                    </ListContainer>\n                </ListItem>\n            )}\n        </List>\n    );\n}\n","import {\n    GalleryContext,\n    Search,\n    SelectedState,\n    SetFiles,\n    setSearchStats,\n} from 'pages/gallery';\nimport PreviewCard from './pages/gallery/PreviewCard';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { File, FILE_TYPE } from 'services/fileService';\nimport styled from 'styled-components';\nimport DownloadManager from 'services/downloadManager';\nimport constants from 'utils/strings/constants';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport PhotoSwipe from 'components/PhotoSwipe/PhotoSwipe';\nimport { isInsideBox, isSameDay as isSameDayAnyYear } from 'utils/search';\nimport { SetDialogMessage } from './MessageDialog';\nimport { fileIsArchived, formatDateRelative } from 'utils/file';\nimport {\n    ALL_SECTION,\n    ARCHIVE_SECTION,\n    TRASH_SECTION,\n} from './pages/gallery/Collections';\nimport { isSharedFile } from 'utils/file';\nimport { isPlaybackPossible } from 'utils/photoFrame';\nimport { PhotoList } from './PhotoList';\n\nconst Container = styled.div`\n    display: block;\n    flex: 1;\n    width: 100%;\n    flex-wrap: wrap;\n    margin: 0 auto;\n    overflow-x: hidden;\n    .pswp-thumbnail {\n        display: inline-block;\n        cursor: pointer;\n    }\n`;\n\nconst EmptyScreen = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    flex: 1;\n    color: #51cd7c;\n\n    & > svg {\n        filter: drop-shadow(3px 3px 5px rgba(45, 194, 98, 0.5));\n    }\n`;\n\ninterface Props {\n    files: File[];\n    setFiles: SetFiles;\n    syncWithRemote: () => Promise<void>;\n    favItemIds: Set<number>;\n    setSelected: (\n        selected: SelectedState | ((selected: SelectedState) => SelectedState)\n    ) => void;\n    selected: SelectedState;\n    isFirstLoad;\n    openFileUploader;\n    loadingBar;\n    isInSearchMode: boolean;\n    search: Search;\n    setSearchStats: setSearchStats;\n    deleted?: number[];\n    setDialogMessage: SetDialogMessage;\n    activeCollection: number;\n    isSharedCollection: boolean;\n}\n\nconst PhotoFrame = ({\n    files,\n    setFiles,\n    syncWithRemote,\n    favItemIds,\n    setSelected,\n    selected,\n    isFirstLoad,\n    openFileUploader,\n    loadingBar,\n    isInSearchMode,\n    search,\n    setSearchStats,\n    deleted,\n    activeCollection,\n    isSharedCollection,\n}: Props) => {\n    const [open, setOpen] = useState(false);\n    const [currentIndex, setCurrentIndex] = useState<number>(0);\n    const [fetching, setFetching] = useState<{ [k: number]: boolean }>({});\n    const startTime = Date.now();\n    const galleryContext = useContext(GalleryContext);\n    const [rangeStart, setRangeStart] = useState(null);\n    const [currentHover, setCurrentHover] = useState(null);\n    const [isShiftKeyPressed, setIsShiftKeyPressed] = useState(false);\n    const filteredDataRef = useRef([]);\n    const filteredData = filteredDataRef?.current ?? [];\n    useEffect(() => {\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Shift') {\n                setIsShiftKeyPressed(true);\n            }\n        };\n        const handleKeyUp = (e: KeyboardEvent) => {\n            if (e.key === 'Shift') {\n                setIsShiftKeyPressed(false);\n            }\n        };\n        document.addEventListener('keydown', handleKeyDown, false);\n        document.addEventListener('keyup', handleKeyUp, false);\n        return () => {\n            document.addEventListener('keydown', handleKeyDown, false);\n            document.addEventListener('keyup', handleKeyUp, false);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (isInSearchMode) {\n            setSearchStats({\n                resultCount: filteredData.length,\n                timeTaken: (Date.now() - startTime) / 1000,\n            });\n        }\n        if (search.fileIndex || search.fileIndex === 0) {\n            const filteredDataIdx = filteredData.findIndex(\n                (data) => data.dataIndex === search.fileIndex\n            );\n            if (filteredDataIdx || filteredDataIdx === 0) {\n                onThumbnailClick(filteredDataIdx)();\n            }\n        }\n    }, [search]);\n\n    const resetFetching = () => {\n        setFetching({});\n    };\n\n    useEffect(() => {\n        if (selected.count === 0) {\n            setRangeStart(null);\n        }\n    }, [selected]);\n\n    useEffect(() => {\n        const idSet = new Set();\n        filteredDataRef.current = files\n            .map((item, index) => ({\n                ...item,\n                dataIndex: index,\n                w: window.innerWidth,\n                h: window.innerHeight,\n                ...(item.deleteBy && {\n                    title: constants.AUTOMATIC_BIN_DELETE_MESSAGE(\n                        formatDateRelative(item.deleteBy / 1000)\n                    ),\n                }),\n            }))\n            .filter((item) => {\n                if (deleted.includes(item.id)) {\n                    return false;\n                }\n                if (\n                    search.date &&\n                    !isSameDayAnyYear(search.date)(\n                        new Date(item.metadata.creationTime / 1000)\n                    )\n                ) {\n                    return false;\n                }\n                if (\n                    search.location &&\n                    !isInsideBox(item.metadata, search.location)\n                ) {\n                    return false;\n                }\n                if (activeCollection === ALL_SECTION && fileIsArchived(item)) {\n                    return false;\n                }\n                if (\n                    activeCollection === ARCHIVE_SECTION &&\n                    !fileIsArchived(item)\n                ) {\n                    return false;\n                }\n\n                if (isSharedFile(item) && !isSharedCollection) {\n                    return false;\n                }\n                if (activeCollection === TRASH_SECTION && !item.isTrashed) {\n                    return false;\n                }\n                if (activeCollection !== TRASH_SECTION && item.isTrashed) {\n                    return false;\n                }\n                if (!idSet.has(item.id)) {\n                    if (\n                        activeCollection === ALL_SECTION ||\n                        activeCollection === ARCHIVE_SECTION ||\n                        activeCollection === TRASH_SECTION ||\n                        activeCollection === item.collectionID\n                    ) {\n                        idSet.add(item.id);\n                        return true;\n                    }\n                    return false;\n                }\n                return false;\n            });\n    }, [files, deleted, search, activeCollection]);\n\n    const updateUrl = (index: number) => (url: string) => {\n        files[index] = {\n            ...files[index],\n            msrc: url,\n            src: files[index].src ? files[index].src : url,\n            w: window.innerWidth,\n            h: window.innerHeight,\n        };\n        if (\n            files[index].metadata.fileType === FILE_TYPE.VIDEO &&\n            !files[index].html\n        ) {\n            files[index].html = `\n                <div class=\"video-loading\">\n                    <img src=\"${url}\" />\n                    <div class=\"spinner-border text-light\" role=\"status\">\n                        <span class=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            `;\n            delete files[index].src;\n        }\n        if (\n            files[index].metadata.fileType === FILE_TYPE.IMAGE &&\n            !files[index].src\n        ) {\n            files[index].src = url;\n        }\n        setFiles(files);\n    };\n\n    const updateSrcUrl = async (index: number, url: string) => {\n        files[index] = {\n            ...files[index],\n            w: window.innerWidth,\n            h: window.innerHeight,\n        };\n        if (files[index].metadata.fileType === FILE_TYPE.VIDEO) {\n            if (await isPlaybackPossible(url)) {\n                files[index].html = `\n                <video controls>\n                    <source src=\"${url}\" />\n                    Your browser does not support the video tag.\n                </video>\n            `;\n            } else {\n                files[index].html = `\n                <div class=\"video-loading\">\n                    <img src=\"${files[index].msrc}\" />\n                    <div class=\"download-message\" >\n                        ${constants.VIDEO_PLAYBACK_FAILED_DOWNLOAD_INSTEAD}\n                        <a class=\"btn btn-outline-success\" href=${url} download=\"${files[index].metadata.title}\"\">Download</button>\n                    </div>\n                </div>\n                `;\n            }\n        } else {\n            files[index].src = url;\n        }\n        setFiles(files);\n    };\n\n    const handleClose = (needUpdate) => {\n        setOpen(false);\n        needUpdate && syncWithRemote();\n    };\n\n    const onThumbnailClick = (index: number) => () => {\n        setCurrentIndex(index);\n        setOpen(true);\n    };\n\n    const handleSelect = (id: number, index?: number) => (checked: boolean) => {\n        if (selected.collectionID !== activeCollection) {\n            setSelected({ count: 0, collectionID: 0 });\n        }\n        if (checked) {\n            setRangeStart(index);\n        }\n\n        setSelected((selected) => ({\n            ...selected,\n            [id]: checked,\n            count: checked ? selected.count + 1 : selected.count - 1,\n            collectionID: activeCollection,\n        }));\n    };\n    const onHoverOver = (index: number) => () => {\n        setCurrentHover(index);\n    };\n\n    const handleRangeSelect = (index: number) => () => {\n        if (rangeStart !== index) {\n            let leftEnd = -1;\n            let rightEnd = -1;\n            if (index < rangeStart) {\n                leftEnd = index + 1;\n                rightEnd = rangeStart - 1;\n            } else {\n                leftEnd = rangeStart + 1;\n                rightEnd = index - 1;\n            }\n            for (let i = leftEnd; i <= rightEnd; i++) {\n                handleSelect(filteredData[i].id)(true);\n            }\n        }\n    };\n    const getThumbnail = (file: File[], index: number) => (\n        <PreviewCard\n            key={`tile-${file[index].id}-selected-${\n                selected[file[index].id] ?? false\n            }`}\n            file={file[index]}\n            updateUrl={updateUrl(file[index].dataIndex)}\n            onClick={onThumbnailClick(index)}\n            selectable={!isSharedCollection}\n            onSelect={handleSelect(file[index].id, index)}\n            selected={\n                selected.collectionID === activeCollection &&\n                selected[file[index].id]\n            }\n            selectOnClick={selected.count > 0}\n            onHover={onHoverOver(index)}\n            onRangeSelect={handleRangeSelect(index)}\n            isRangeSelectActive={\n                isShiftKeyPressed && (rangeStart || rangeStart === 0)\n            }\n            isInsSelectRange={\n                (index >= rangeStart && index <= currentHover) ||\n                (index >= currentHover && index <= rangeStart)\n            }\n        />\n    );\n\n    const getSlideData = async (instance: any, index: number, item: File) => {\n        if (!item.msrc) {\n            try {\n                let url: string;\n                if (galleryContext.thumbs.has(item.id)) {\n                    url = galleryContext.thumbs.get(item.id);\n                } else {\n                    url = await DownloadManager.getThumbnail(item);\n                    galleryContext.thumbs.set(item.id, url);\n                }\n                updateUrl(item.dataIndex)(url);\n                item.msrc = url;\n                if (!item.src) {\n                    item.src = url;\n                }\n                item.w = window.innerWidth;\n                item.h = window.innerHeight;\n                try {\n                    instance.invalidateCurrItems();\n                    instance.updateSize(true);\n                } catch (e) {\n                    // ignore\n                }\n            } catch (e) {\n                // no-op\n            }\n        }\n        if (!fetching[item.dataIndex]) {\n            try {\n                fetching[item.dataIndex] = true;\n                let url: string;\n                if (galleryContext.files.has(item.id)) {\n                    url = galleryContext.files.get(item.id);\n                } else {\n                    url = await DownloadManager.getFile(item, true);\n                    galleryContext.files.set(item.id, url);\n                }\n                await updateSrcUrl(item.dataIndex, url);\n                item.html = files[item.dataIndex].html;\n                item.src = files[item.dataIndex].src;\n                item.w = files[item.dataIndex].w;\n                item.h = files[item.dataIndex].h;\n                try {\n                    instance.invalidateCurrItems();\n                    instance.updateSize(true);\n                } catch (e) {\n                    // ignore\n                }\n            } catch (e) {\n                // no-op\n            } finally {\n                fetching[item.dataIndex] = false;\n            }\n        }\n    };\n\n    return (\n        <>\n            {!isFirstLoad && files.length === 0 && !isInSearchMode ? (\n                <EmptyScreen>\n                    <img height={150} src=\"/images/gallery.png\" />\n                    <div style={{ color: '#a6a6a6', marginTop: '16px' }}>\n                        {constants.UPLOAD_FIRST_PHOTO_DESCRIPTION}\n                    </div>\n                    <Button\n                        variant=\"outline-success\"\n                        onClick={openFileUploader}\n                        style={{\n                            marginTop: '32px',\n                            paddingLeft: '32px',\n                            paddingRight: '32px',\n                            paddingTop: '12px',\n                            paddingBottom: '12px',\n                            fontWeight: 900,\n                        }}>\n                        {constants.UPLOAD_FIRST_PHOTO}\n                    </Button>\n                </EmptyScreen>\n            ) : (\n                <Container>\n                    <AutoSizer>\n                        {({ height, width }) => (\n                            <PhotoList\n                                width={width}\n                                height={height}\n                                getThumbnail={getThumbnail}\n                                filteredData={filteredData}\n                                activeCollection={activeCollection}\n                                showBanner={\n                                    files.length < 30 && !isInSearchMode\n                                }\n                                resetFetching={resetFetching}\n                            />\n                        )}\n                    </AutoSizer>\n                    <PhotoSwipe\n                        isOpen={open}\n                        items={filteredData}\n                        currentIndex={currentIndex}\n                        onClose={handleClose}\n                        gettingData={getSlideData}\n                        favItemIds={favItemIds}\n                        loadingBar={loadingBar}\n                        isSharedCollection={isSharedCollection}\n                        isTrashCollection={activeCollection === TRASH_SECTION}\n                    />\n                </Container>\n            )}\n        </>\n    );\n};\n\nexport default PhotoFrame;\n","import * as chrono from 'chrono-node';\nimport { getEndpoint } from 'utils/common/apiUtil';\nimport { getToken } from 'utils/common/key';\nimport { DateValue, Suggestion, SuggestionType } from 'components/SearchBar';\nimport HTTPService from './HTTPService';\nimport { Collection } from './collectionService';\nimport { File } from './fileService';\nimport { logError } from 'utils/sentry';\n\nconst ENDPOINT = getEndpoint();\nconst DIGITS = new Set(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']);\nexport type Bbox = [number, number, number, number];\nexport interface LocationSearchResponse {\n    place: string;\n    bbox: Bbox;\n}\nexport const getMapboxToken = () => process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n\nexport function parseHumanDate(humanDate: string): DateValue[] {\n    const date = chrono.parseDate(humanDate);\n    const date1 = chrono.parseDate(`${humanDate} 1`);\n    if (date !== null) {\n        const dates = [\n            { month: date.getMonth() },\n            { date: date.getDate(), month: date.getMonth() },\n        ];\n        let reverse = false;\n        humanDate.split('').forEach((c) => {\n            if (DIGITS.has(c)) {\n                reverse = true;\n            }\n        });\n        if (reverse) {\n            return dates.reverse();\n        }\n        return dates;\n    }\n    if (date1) {\n        return [{ month: date1.getMonth() }];\n    }\n    return [];\n}\n\nexport async function searchLocation(\n    searchPhrase: string\n): Promise<LocationSearchResponse[]> {\n    try {\n        const resp = await HTTPService.get(\n            `${ENDPOINT}/search/location`,\n            {\n                query: searchPhrase,\n                limit: 4,\n            },\n            {\n                'X-Auth-Token': getToken(),\n            }\n        );\n        return resp.data.results ?? [];\n    } catch (e) {\n        logError(e, 'location search failed');\n    }\n    return [];\n}\n\nexport function getHolidaySuggestion(searchPhrase: string): Suggestion[] {\n    return [\n        {\n            label: 'Christmas',\n            value: { month: 11, date: 25 },\n            type: SuggestionType.DATE,\n        },\n        {\n            label: 'Christmas Eve',\n            value: { month: 11, date: 24 },\n            type: SuggestionType.DATE,\n        },\n        {\n            label: 'New Year',\n            value: { month: 0, date: 1 },\n            type: SuggestionType.DATE,\n        },\n        {\n            label: 'New Year Eve',\n            value: { month: 11, date: 31 },\n            type: SuggestionType.DATE,\n        },\n    ].filter((suggestion) =>\n        suggestion.label.toLowerCase().includes(searchPhrase)\n    );\n}\n\nexport function getYearSuggestion(searchPhrase: string): Suggestion[] {\n    if (searchPhrase.length === 4) {\n        try {\n            const year = parseInt(searchPhrase);\n            if (year >= 1970 && year <= new Date().getFullYear()) {\n                return [\n                    {\n                        label: searchPhrase,\n                        value: { year },\n                        type: SuggestionType.DATE,\n                    },\n                ];\n            }\n        } catch (e) {\n            logError(e, 'getYearSuggestion failed');\n        }\n    }\n    return [];\n}\n\nexport function searchCollection(\n    searchPhrase: string,\n    collections: Collection[]\n): Collection[] {\n    return collections.filter((collection) =>\n        collection.name.toLowerCase().includes(searchPhrase)\n    );\n}\n\nexport function searchFiles(searchPhrase: string, files: File[]) {\n    return files\n        .map((file, idx) => ({\n            title: file.metadata.title,\n            index: idx,\n            type: file.metadata.fileType,\n            ownerID: file.ownerID,\n            id: file.id,\n        }))\n        .filter(({ title }) => title.toLowerCase().includes(searchPhrase))\n        .slice(0, 4);\n}\n","import React from 'react';\n\nexport default function LocationIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}>\n            <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zM7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 2.88-2.88 7.19-5 9.88C9.92 16.21 7 11.85 7 9z\" />\n            <circle cx=\"12\" cy=\"9\" r=\"2.5\" />\n        </svg>\n    );\n}\n\nLocationIcon.defaultProps = {\n    height: 20,\n    width: 20,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function DateIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}>\n            <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V10h14v10zm-4.5-7a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z\" />\n        </svg>\n    );\n}\n\nDateIcon.defaultProps = {\n    height: 20,\n    width: 20,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function SearchIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}>\n            <path d=\"M20.49 19l-5.73-5.73C15.53 12.2 16 10.91 16 9.5A6.5 6.5 0 1 0 9.5 16c1.41 0 2.7-.47 3.77-1.24L19 20.49 20.49 19zM5 9.5C5 7.01 7.01 5 9.5 5S14 7.01 14 9.5 11.99 14 9.5 14 5 11.99 5 9.5z\" />\n        </svg>\n    );\n}\n\nSearchIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n    open: false,\n};\n","import React from 'react';\n\nexport default function CollectionIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}>\n            <path d=\"M6.083 4c1.38 1.612 2.578 3 4.917 3h11v13h-20v-16h4.083zm.917-2h-7v20h24v-17h-13c-1.629 0-2.305-1.058-4-3z\" />\n        </svg>\n    );\n}\n\nCollectionIcon.defaultProps = {\n    height: 20,\n    width: 20,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function ImageIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n            <path d=\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4.86 8.86l-3 3.87L9 13.14 6 17h12l-3.86-5.14z\" />\n        </svg>\n    );\n}\n\nImageIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React from 'react';\n\nexport default function VideoIcon(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            fill=\"currentColor\">\n            <path d=\"M4 6.47L5.76 10H20v8H4V6.47M22 4h-4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4z\" />\n        </svg>\n    );\n}\n\nVideoIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import { Search, SearchStats } from 'pages/gallery';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport AsyncSelect from 'react-select/async';\nimport { components } from 'react-select';\nimport debounce from 'debounce-promise';\nimport {\n    Bbox,\n    getHolidaySuggestion,\n    getYearSuggestion,\n    parseHumanDate,\n    searchCollection,\n    searchFiles,\n    searchLocation,\n} from 'services/searchService';\nimport { getFormattedDate } from 'utils/search';\nimport constants from 'utils/strings/constants';\nimport LocationIcon from './icons/LocationIcon';\nimport DateIcon from './icons/DateIcon';\nimport SearchIcon from './icons/SearchIcon';\nimport CloseIcon from './icons/CloseIcon';\nimport { Collection } from 'services/collectionService';\nimport CollectionIcon from './icons/CollectionIcon';\nimport { File, FILE_TYPE } from 'services/fileService';\nimport ImageIcon from './icons/ImageIcon';\nimport VideoIcon from './icons/VideoIcon';\nimport { IconButton } from './Container';\n\nconst Wrapper = styled.div<{ isDisabled: boolean; isOpen: boolean }>`\n    position: fixed;\n    top: 0;\n    z-index: 1000;\n    display: ${({ isOpen }) => (isOpen ? 'flex' : 'none')};\n    width: 100%;\n    background: #111;\n    @media (min-width: 625px) {\n        display: flex;\n        width: calc(100vw - 140px);\n        margin: 0 70px;\n    }\n    align-items: center;\n    min-height: 64px;\n    transition: opacity 1s ease;\n    opacity: ${(props) => (props.isDisabled ? 0 : 1)};\n    margin-bottom: 10px;\n`;\n\nconst SearchButton = styled.div<{ isOpen: boolean }>`\n    display: none;\n    @media (max-width: 624px) {\n        display: ${({ isOpen }) => (!isOpen ? 'flex' : 'none')};\n        right: 80px;\n        cursor: pointer;\n        position: fixed;\n        top: 0;\n        z-index: 1000;\n        align-items: center;\n        min-height: 64px;\n    }\n`;\n\nconst SearchStatsContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #979797;\n    margin-bottom: 8px;\n`;\n\nconst SearchInput = styled.div`\n    width: 100%;\n    display: flex;\n    align-items: center;\n    max-width: 484px;\n    margin: auto;\n`;\n\nexport enum SuggestionType {\n    DATE,\n    LOCATION,\n    COLLECTION,\n    IMAGE,\n    VIDEO,\n}\nexport interface DateValue {\n    date?: number;\n    month?: number;\n    year?: number;\n}\nexport interface Suggestion {\n    type: SuggestionType;\n    label: string;\n    value: Bbox | DateValue | number;\n}\ninterface Props {\n    isOpen: boolean;\n    isFirstFetch: boolean;\n    setOpen: (value: boolean) => void;\n    loadingBar: any;\n    setSearch: (search: Search) => void;\n    searchStats: SearchStats;\n    collections: Collection[];\n    setActiveCollection: (id: number) => void;\n    files: File[];\n}\nexport default function SearchBar(props: Props) {\n    const [value, setValue] = useState<Suggestion>(null);\n\n    const handleChange = (value) => {\n        setValue(value);\n    };\n\n    useEffect(() => search(value), [value]);\n\n    // = =========================\n    // Functionality\n    // = =========================\n    const getAutoCompleteSuggestions = async (searchPhrase: string) => {\n        searchPhrase = searchPhrase.trim().toLowerCase();\n        if (!searchPhrase?.length) {\n            return [];\n        }\n        const options = [\n            ...getHolidaySuggestion(searchPhrase),\n            ...getYearSuggestion(searchPhrase),\n        ];\n\n        const searchedDates = parseHumanDate(searchPhrase);\n\n        options.push(\n            ...searchedDates.map((searchedDate) => ({\n                type: SuggestionType.DATE,\n                value: searchedDate,\n                label: getFormattedDate(searchedDate),\n            }))\n        );\n\n        const collectionResults = searchCollection(\n            searchPhrase,\n            props.collections\n        );\n        options.push(\n            ...collectionResults.map(\n                (searchResult) =>\n                    ({\n                        type: SuggestionType.COLLECTION,\n                        value: searchResult.id,\n                        label: searchResult.name,\n                    } as Suggestion)\n            )\n        );\n        const fileResults = searchFiles(searchPhrase, props.files);\n        options.push(\n            ...fileResults.map((file) => ({\n                type:\n                    file.type === FILE_TYPE.IMAGE\n                        ? SuggestionType.IMAGE\n                        : SuggestionType.VIDEO,\n                value: file.index,\n                label: file.title,\n            }))\n        );\n\n        const locationResults = await searchLocation(searchPhrase);\n        options.push(\n            ...locationResults.map(\n                (searchResult) =>\n                    ({\n                        type: SuggestionType.LOCATION,\n                        value: searchResult.bbox,\n                        label: searchResult.place,\n                    } as Suggestion)\n            )\n        );\n        return options;\n    };\n\n    const getOptions = debounce(getAutoCompleteSuggestions, 250);\n\n    const search = (selectedOption: Suggestion) => {\n        if (!selectedOption) {\n            return;\n        }\n        switch (selectedOption.type) {\n            case SuggestionType.DATE:\n                props.setSearch({\n                    date: selectedOption.value as DateValue,\n                });\n                props.setOpen(true);\n                break;\n            case SuggestionType.LOCATION:\n                props.setSearch({\n                    location: selectedOption.value as Bbox,\n                });\n                props.setOpen(true);\n                break;\n            case SuggestionType.COLLECTION:\n                props.setActiveCollection(selectedOption.value as number);\n                setValue(null);\n                break;\n            case SuggestionType.IMAGE:\n            case SuggestionType.VIDEO:\n                props.setSearch({ fileIndex: selectedOption.value as number });\n                setValue(null);\n                break;\n        }\n    };\n    const resetSearch = () => {\n        if (props.isOpen) {\n            props.loadingBar.current?.continuousStart();\n            props.setSearch({});\n            setTimeout(() => {\n                props.loadingBar.current?.complete();\n            }, 10);\n            props.setOpen(false);\n            setValue(null);\n        }\n    };\n\n    // = =========================\n    // UI\n    // = =========================\n\n    const getIconByType = (type: SuggestionType) => {\n        switch (type) {\n            case SuggestionType.DATE:\n                return <DateIcon />;\n            case SuggestionType.LOCATION:\n                return <LocationIcon />;\n            case SuggestionType.COLLECTION:\n                return <CollectionIcon />;\n            case SuggestionType.IMAGE:\n                return <ImageIcon />;\n            case SuggestionType.VIDEO:\n                return <VideoIcon />;\n            default:\n                return <SearchIcon />;\n        }\n    };\n\n    const LabelWithIcon = (props: { type: SuggestionType; label: string }) => (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ paddingRight: '10px', paddingBottom: '4px' }}>\n                {getIconByType(props.type)}\n            </span>\n            <span>{props.label}</span>\n        </div>\n    );\n    const { Option, Control } = components;\n\n    const OptionWithIcon = (props) => (\n        <Option {...props}>\n            <LabelWithIcon type={props.data.type} label={props.data.label} />\n        </Option>\n    );\n    const ControlWithIcon = (props) => (\n        <Control {...props}>\n            <span\n                className=\"icon\"\n                style={{\n                    paddingLeft: '10px',\n                    paddingBottom: '4px',\n                }}>\n                {getIconByType(props.getValue()[0]?.type)}\n            </span>\n            {props.children}\n        </Control>\n    );\n\n    const customStyles = {\n        control: (style, { isFocused }) => ({\n            ...style,\n            backgroundColor: '#282828',\n            color: '#d1d1d1',\n            borderColor: isFocused ? '#51cd7c' : '#444',\n            boxShadow: 'none',\n            ':hover': {\n                borderColor: '#51cd7c',\n                cursor: 'text',\n                '&>.icon': { color: '#51cd7c' },\n            },\n        }),\n        input: (style) => ({\n            ...style,\n            color: '#d1d1d1',\n        }),\n        menu: (style) => ({\n            ...style,\n            marginTop: '10px',\n            backgroundColor: '#282828',\n        }),\n        option: (style, { isFocused }) => ({\n            ...style,\n            backgroundColor: isFocused && '#343434',\n        }),\n        dropdownIndicator: (style) => ({\n            ...style,\n            display: 'none',\n        }),\n        indicatorSeparator: (style) => ({\n            ...style,\n            display: 'none',\n        }),\n        clearIndicator: (style) => ({\n            ...style,\n            display: 'none',\n        }),\n        singleValue: (style, state) => ({\n            ...style,\n            backgroundColor: '#282828',\n            color: '#d1d1d1',\n            display: state.selectProps.menuIsOpen ? 'none' : 'block',\n        }),\n        placeholder: (style) => ({\n            ...style,\n            color: '#686868',\n            wordSpacing: '2px',\n            whiteSpace: 'nowrap',\n        }),\n    };\n    return (\n        <>\n            {props.searchStats && (\n                <SearchStatsContainer>\n                    {constants.SEARCH_STATS(props.searchStats)}\n                </SearchStatsContainer>\n            )}\n            <Wrapper isDisabled={props.isFirstFetch} isOpen={props.isOpen}>\n                <SearchInput>\n                    <div\n                        style={{\n                            flex: 1,\n                            margin: '10px',\n                        }}>\n                        <AsyncSelect\n                            value={value}\n                            components={{\n                                Option: OptionWithIcon,\n                                Control: ControlWithIcon,\n                            }}\n                            placeholder={constants.SEARCH_HINT()}\n                            loadOptions={getOptions}\n                            onChange={handleChange}\n                            isClearable\n                            escapeClearsValue\n                            styles={customStyles}\n                            noOptionsMessage={() => null}\n                        />\n                    </div>\n                    {props.isOpen && (\n                        <IconButton onClick={() => resetSearch()}>\n                            <CloseIcon />\n                        </IconButton>\n                    )}\n                </SearchInput>\n            </Wrapper>\n            <SearchButton\n                isOpen={props.isOpen}\n                onClick={() => !props.isFirstFetch && props.setOpen(true)}>\n                <SearchIcon />\n            </SearchButton>\n        </>\n    );\n}\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport constants from 'utils/strings/constants';\nimport { CollectionIcon } from './CollectionSelector';\n\nconst ImageContainer = styled.div`\n    min-height: 192px;\n    max-width: 192px;\n    border: 1px solid #555;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 42px;\n    cursor: pointer;\n`;\n\nexport default function AddCollectionButton({\n    showNextModal,\n}: {\n    showNextModal: () => void;\n}) {\n    return (\n        <CollectionIcon\n            style={{ margin: '10px' }}\n            onClick={() => showNextModal()}>\n            <Card>\n                <ImageContainer>+</ImageContainer>\n                <Card.Text style={{ textAlign: 'center' }}>\n                    {constants.CREATE_COLLECTION}\n                </Card.Text>\n            </Card>\n        </CollectionIcon>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Modal } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport {\n    Collection,\n    CollectionAndItsLatestFile,\n    CollectionType,\n} from 'services/collectionService';\nimport AddCollectionButton from './AddCollectionButton';\nimport PreviewCard from './PreviewCard';\nimport { getData, LS_KEYS } from 'utils/storage/localStorage';\nimport { User } from 'services/userService';\n\nexport const CollectionIcon = styled.div`\n    width: 200px;\n    margin: 10px;\n    height: 240px;\n    padding: 4px;\n    color: black;\n    border-width: 4px;\n    border-radius: 34px;\n    outline: none;\n`;\n\nexport interface CollectionSelectorAttributes {\n    callback: (collection: Collection) => void;\n    showNextModal: () => void;\n    title: string;\n    fromCollection?: number;\n}\nexport type SetCollectionSelectorAttributes = React.Dispatch<\n    React.SetStateAction<CollectionSelectorAttributes>\n>;\n\nconst CollectionCard = styled(Card)`\n    display: flex;\n    flex-direction: column;\n    height: 221px;\n`;\n\ninterface Props {\n    show: boolean;\n    onHide: (closeBtnClick?: boolean) => void;\n    collectionsAndTheirLatestFile: CollectionAndItsLatestFile[];\n    attributes: CollectionSelectorAttributes;\n}\nfunction CollectionSelector({\n    attributes,\n    collectionsAndTheirLatestFile,\n    ...props\n}: Props) {\n    const [collectionToShow, setCollectionToShow] = useState<\n        CollectionAndItsLatestFile[]\n    >([]);\n    useEffect(() => {\n        if (!attributes) {\n            return;\n        }\n        const user: User = getData(LS_KEYS.USER);\n        const personalCollectionsOtherThanFrom =\n            collectionsAndTheirLatestFile?.filter(\n                (item) =>\n                    item.collection.id !== attributes.fromCollection &&\n                    item.collection.owner.id === user?.id &&\n                    item.collection.type !== CollectionType.favorites\n            );\n        if (personalCollectionsOtherThanFrom.length === 0) {\n            props.onHide();\n            attributes.showNextModal();\n        } else {\n            setCollectionToShow(personalCollectionsOtherThanFrom);\n        }\n    }, [props.show]);\n\n    if (!attributes) {\n        return <Modal />;\n    }\n    const CollectionIcons: JSX.Element[] = collectionToShow?.map((item) => (\n        <CollectionIcon\n            key={item.collection.id}\n            onClick={() => {\n                attributes.callback(item.collection);\n                props.onHide();\n            }}>\n            <CollectionCard>\n                <PreviewCard\n                    file={item.file}\n                    updateUrl={() => {}}\n                    forcedEnable\n                />\n                <Card.Text className=\"text-center\">\n                    {item.collection.name}\n                </Card.Text>\n            </CollectionCard>\n        </CollectionIcon>\n    ));\n\n    return (\n        <Modal\n            {...props}\n            size=\"xl\"\n            centered\n            contentClassName=\"plan-selector-modal-content\">\n            <Modal.Header closeButton onHide={() => props.onHide(true)}>\n                <Modal.Title>{attributes.title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body\n                style={{\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                }}>\n                <AddCollectionButton showNextModal={attributes.showNextModal} />\n                {CollectionIcons}\n            </Modal.Body>\n        </Modal>\n    );\n}\n\nexport default CollectionSelector;\n","import React, { useEffect, useRef } from 'react';\nimport { Form } from 'react-bootstrap';\nimport constants from 'utils/strings/constants';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport SubmitButton from 'components/SubmitButton';\nimport MessageDialog from 'components/MessageDialog';\n\nexport interface CollectionNamerAttributes {\n    callback: (name) => void;\n    title: string;\n    autoFilledName: string;\n    buttonText: string;\n}\n\nexport type SetCollectionNamerAttributes = React.Dispatch<\n    React.SetStateAction<CollectionNamerAttributes>\n>;\n\ninterface Props {\n    show: boolean;\n    onHide: () => void;\n    attributes: CollectionNamerAttributes;\n}\ninterface formValues {\n    albumName: string;\n}\n\nexport default function CollectionNamer({ attributes, ...props }: Props) {\n    const collectionNameInputRef = useRef(null);\n    useEffect(() => {\n        if (attributes) {\n            setTimeout(() => {\n                collectionNameInputRef.current?.focus();\n            }, 200);\n        }\n    }, [attributes]);\n    if (!attributes) {\n        return (\n            <MessageDialog show={false} onHide={() => null} attributes={{}} />\n        );\n    }\n    const onSubmit = ({ albumName }: formValues) => {\n        attributes.callback(albumName);\n        props.onHide();\n    };\n    return (\n        <MessageDialog\n            show={props.show}\n            onHide={props.onHide}\n            size=\"sm\"\n            attributes={{\n                title: attributes?.title,\n            }}>\n            <Formik<formValues>\n                initialValues={{ albumName: attributes.autoFilledName }}\n                validationSchema={Yup.object().shape({\n                    albumName: Yup.string().required(constants.REQUIRED),\n                })}\n                validateOnChange={false}\n                validateOnBlur={false}\n                onSubmit={onSubmit}>\n                {({ values, touched, errors, handleChange, handleSubmit }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group>\n                            <Form.Control\n                                className=\"text-center\"\n                                type=\"text\"\n                                value={values.albumName}\n                                onChange={handleChange('albumName')}\n                                isInvalid={Boolean(\n                                    touched.albumName && errors.albumName\n                                )}\n                                placeholder={constants.ENTER_ALBUM_NAME}\n                                ref={collectionNameInputRef}\n                                autoFocus\n                            />\n\n                            <Form.Control.Feedback\n                                type=\"invalid\"\n                                className=\"text-center\">\n                                {errors.albumName}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <SubmitButton\n                            buttonText={attributes.buttonText}\n                            loading={false}\n                        />\n                    </Form>\n                )}\n            </Formik>\n        </MessageDialog>\n    );\n}\n","import {\n    ButtonVariant,\n    getVariantColor,\n} from 'components/pages/gallery/LinkButton';\nimport React from 'react';\n\nexport default function WarningIcon(props) {\n    return (\n        <div\n            style={{\n                color: getVariantColor(ButtonVariant.danger),\n                display: 'inline-block',\n                padding: '0 10px',\n            }}>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                height={props.height}\n                viewBox={props.viewBox}\n                width={props.width}\n                fill=\"currentColor\">\n                <path d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm-1 6h2v8h-2v-8zm1 12.25c-.69 0-1.25-.56-1.25-1.25s.56-1.25 1.25-1.25 1.25.56 1.25 1.25-.56 1.25-1.25 1.25z\" />\n            </svg>\n        </div>\n    );\n}\n\nWarningIcon.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import { FlexWrapper } from 'components/Container';\nimport WarningIcon from 'components/icons/WarningIcon';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { ButtonVariant, getVariantColor } from './LinkButton';\n\ninterface Props {\n    bannerMessage?: any;\n    variant?: string;\n}\nconst Banner = styled.div`\n    border: 1px solid ${getVariantColor(ButtonVariant.warning)};\n    border-radius: 8px;\n    padding: 16px 28px;\n    color: #eee;\n    margin-top: 10px;\n`;\nexport default function AlertBanner(props: Props) {\n    return props.bannerMessage ? (\n        <FlexWrapper>\n            <Banner>\n                <WarningIcon />\n                {props.bannerMessage && props.bannerMessage}\n            </Banner>\n        </FlexWrapper>\n    ) : (\n        <></>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div<{ isDisabled: boolean }>`\n    position: fixed;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    top: 0;\n    z-index: 100;\n    min-height: 64px;\n    right: 32px;\n    transition: opacity 1s ease;\n    cursor: pointer;\n    opacity: ${(props) => (props.isDisabled ? 0 : 1)};\n`;\nfunction UploadButton({ openFileUploader, isFirstFetch }) {\n    return (\n        <Wrapper onClick={openFileUploader} isDisabled={isFirstFetch}>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"green\"\n                width=\"32px\"\n                height=\"32px\">\n                <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n                <path\n                    fill=\"#51cd7c\"\n                    d=\"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10zM8 13.01l1.41 1.41L11 12.84V17h2v-4.16l1.59 1.59L16 13.01 12.01 9 8 13.01z\"\n                />\n            </svg>\n        </Wrapper>\n    );\n}\n\nexport default UploadButton;\n","import React from 'react';\n\nexport default function ArrowEast(props) {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height={props.height}\n            viewBox={props.viewBox}\n            width={props.width}\n            {...props}>\n            <rect fill=\"none\" height=\"24\" width=\"24\" />\n            <path d=\"M15,5l-1.41,1.41L18.17,11H2V13h16.17l-4.59,4.59L15,19l7-7L15,5z\" />\n        </svg>\n    );\n}\n\nArrowEast.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import React, { useEffect, useState } from 'react';\nimport { Form, Modal, Button } from 'react-bootstrap';\nimport constants from 'utils/strings/constants';\nimport styled from 'styled-components';\nimport billingService, { Plan, Subscription } from 'services/billingService';\nimport {\n    convertBytesToGBs,\n    getUserSubscription,\n    isUserSubscribedPlan,\n    isSubscriptionCancelled,\n    updatePaymentMethod,\n    updateSubscription,\n    activateSubscription,\n    cancelSubscription,\n    hasStripeSubscription,\n    hasPaidSubscription,\n    isOnFreePlan,\n    planForSubscription,\n} from 'utils/billingUtil';\nimport { reverseString } from 'utils/common';\nimport { SetDialogMessage } from 'components/MessageDialog';\nimport ArrowEast from 'components/icons/ArrowEast';\nimport LinkButton from './LinkButton';\nimport { DeadCenter, SetLoading } from 'pages/gallery';\n\nexport const PlanIcon = styled.div<{ selected: boolean }>`\n    border-radius: 20px;\n    width: 220px;\n    border: 2px solid #333;\n    padding: 30px;\n    margin: 10px;\n    text-align: center;\n    font-size: 20px;\n    background-color: #ffffff00;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    cursor: ${(props) => (props.selected ? 'not-allowed' : 'pointer')};\n    border-color: ${(props) => props.selected && '#56e066'};\n    transition: all 0.3s ease-out;\n    overflow: hidden;\n    position: relative;\n\n    & > div:first-child::before {\n        content: ' ';\n        height: 600px;\n        width: 50px;\n        background-color: #444;\n        left: 0;\n        top: -50%;\n        position: absolute;\n        transform: rotate(45deg) translateX(-200px);\n        transition: all 0.5s ease-out;\n    }\n\n    &:hover {\n        transform: scale(1.1);\n        background-color: #ffffff11;\n    }\n\n    &:hover > div:first-child::before {\n        transform: rotate(45deg) translateX(300px);\n    }\n`;\n\ninterface Props {\n    modalView: boolean;\n    closeModal: any;\n    setDialogMessage: SetDialogMessage;\n    setLoading: SetLoading;\n}\nenum PLAN_PERIOD {\n    MONTH = 'month',\n    YEAR = 'year',\n}\nfunction PlanSelector(props: Props) {\n    const subscription: Subscription = getUserSubscription();\n    const [plans, setPlans] = useState<Plan[]>(null);\n    const [planPeriod, setPlanPeriod] = useState<PLAN_PERIOD>(PLAN_PERIOD.YEAR);\n    const togglePeriod = () => {\n        setPlanPeriod((prevPeriod) =>\n            prevPeriod === PLAN_PERIOD.MONTH\n                ? PLAN_PERIOD.YEAR\n                : PLAN_PERIOD.MONTH\n        );\n    };\n    useEffect(() => {\n        if (props.modalView) {\n            const main = async () => {\n                props.setLoading(true);\n                let plans = await billingService.getPlans();\n\n                const planNotListed =\n                    plans.filter((plan) =>\n                        isUserSubscribedPlan(plan, subscription)\n                    ).length === 0;\n                if (\n                    subscription &&\n                    !isOnFreePlan(subscription) &&\n                    planNotListed\n                ) {\n                    plans = [planForSubscription(subscription), ...plans];\n                }\n                setPlans(plans);\n                props.setLoading(false);\n            };\n            main();\n        }\n    }, [props.modalView]);\n\n    async function onPlanSelect(plan: Plan) {\n        if (\n            hasPaidSubscription(subscription) &&\n            !hasStripeSubscription(subscription) &&\n            !isSubscriptionCancelled(subscription)\n        ) {\n            props.setDialogMessage({\n                title: constants.ERROR,\n                content: constants.CANCEL_SUBSCRIPTION_ON_MOBILE,\n                close: { variant: 'danger' },\n            });\n        } else if (hasStripeSubscription(subscription)) {\n            props.setDialogMessage({\n                title: `${constants.CONFIRM} ${reverseString(\n                    constants.UPDATE_SUBSCRIPTION\n                )}`,\n                content: constants.UPDATE_SUBSCRIPTION_MESSAGE,\n                staticBackdrop: true,\n                proceed: {\n                    text: constants.UPDATE_SUBSCRIPTION,\n                    action: updateSubscription.bind(\n                        null,\n                        plan,\n                        props.setDialogMessage,\n                        props.setLoading,\n                        props.closeModal\n                    ),\n                    variant: 'success',\n                },\n                close: { text: constants.CANCEL },\n            });\n        } else {\n            try {\n                props.setLoading(true);\n                await billingService.buySubscription(plan.stripeID);\n            } catch (e) {\n                props.setLoading(false);\n                props.setDialogMessage({\n                    title: constants.ERROR,\n                    content: constants.SUBSCRIPTION_PURCHASE_FAILED,\n                    close: { variant: 'danger' },\n                });\n            }\n        }\n    }\n\n    const PlanIcons: JSX.Element[] = plans\n        ?.filter((plan) => plan.period === planPeriod)\n        ?.map((plan) => (\n            <PlanIcon\n                key={plan.stripeID}\n                className=\"subscription-plan-selector\"\n                selected={isUserSubscribedPlan(plan, subscription)}\n                onClick={async () => await onPlanSelect(plan)}>\n                <div>\n                    <span\n                        style={{\n                            color: '#ECECEC',\n                            fontWeight: 900,\n                            fontSize: '40px',\n                            lineHeight: '40px',\n                        }}>\n                        {convertBytesToGBs(plan.storage, 0)}\n                    </span>\n                    <span\n                        style={{\n                            color: '#858585',\n                            fontSize: '24px',\n                            fontWeight: 900,\n                        }}>\n                        {' '}\n                        GB\n                    </span>\n                </div>\n                <div\n                    className=\"bold-text\"\n                    style={{\n                        color: '#aaa',\n                        lineHeight: '36px',\n                        fontSize: '20px',\n                    }}>\n                    {`${plan.price} / ${plan.period}`}\n                </div>\n                <Button\n                    variant=\"outline-success\"\n                    block\n                    style={{\n                        marginTop: '20px',\n                        fontSize: '14px',\n                        display: 'flex',\n                        justifyContent: 'center',\n                    }}\n                    disabled={isUserSubscribedPlan(plan, subscription)}>\n                    {constants.CHOOSE_PLAN_BTN}\n                    <ArrowEast style={{ marginLeft: '5px' }} />\n                </Button>\n            </PlanIcon>\n        ));\n    return (\n        <Modal\n            show={props.modalView}\n            onHide={props.closeModal}\n            size=\"xl\"\n            centered\n            backdrop={hasPaidSubscription(subscription) ? true : 'static'}\n            contentClassName=\"plan-selector-modal-content\">\n            <Modal.Header closeButton>\n                <Modal.Title\n                    style={{\n                        marginLeft: '12px',\n                        width: '100%',\n                        textAlign: 'center',\n                    }}>\n                    <span>\n                        {hasPaidSubscription(subscription)\n                            ? constants.MANAGE_PLAN\n                            : constants.CHOOSE_PLAN}\n                    </span>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body style={{ marginTop: '20px' }}>\n                <DeadCenter>\n                    <div style={{ display: 'flex' }}>\n                        <span\n                            className=\"bold-text\"\n                            style={{ fontSize: '16px' }}>\n                            {constants.MONTHLY}\n                        </span>\n\n                        <Form.Switch\n                            checked={planPeriod === PLAN_PERIOD.YEAR}\n                            id=\"plan-period-toggler\"\n                            style={{\n                                margin: '-4px 0 20px 15px',\n                                fontSize: '10px',\n                            }}\n                            className=\"custom-switch-md\"\n                            onChange={togglePeriod}\n                        />\n                        <span\n                            className=\"bold-text\"\n                            style={{ fontSize: '16px' }}>\n                            {constants.YEARLY}\n                        </span>\n                    </div>\n                </DeadCenter>\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'space-around',\n                        flexWrap: 'wrap',\n                        minHeight: '212px',\n                        margin: '5px 0',\n                    }}>\n                    {plans && PlanIcons}\n                </div>\n                <DeadCenter style={{ marginBottom: '30px' }}>\n                    {hasStripeSubscription(subscription) ? (\n                        <>\n                            {isSubscriptionCancelled(subscription) ? (\n                                <LinkButton\n                                    variant=\"success\"\n                                    onClick={() =>\n                                        props.setDialogMessage({\n                                            title: constants.CONFIRM_ACTIVATE_SUBSCRIPTION,\n                                            content:\n                                                constants.ACTIVATE_SUBSCRIPTION_MESSAGE(\n                                                    subscription.expiryTime\n                                                ),\n                                            staticBackdrop: true,\n                                            proceed: {\n                                                text: constants.ACTIVATE_SUBSCRIPTION,\n                                                action: activateSubscription.bind(\n                                                    null,\n                                                    props.setDialogMessage,\n                                                    props.closeModal,\n                                                    props.setLoading\n                                                ),\n                                                variant: 'success',\n                                            },\n                                            close: {\n                                                text: constants.CANCEL,\n                                            },\n                                        })\n                                    }>\n                                    {constants.ACTIVATE_SUBSCRIPTION}\n                                </LinkButton>\n                            ) : (\n                                <LinkButton\n                                    variant=\"danger\"\n                                    onClick={() =>\n                                        props.setDialogMessage({\n                                            title: constants.CONFIRM_CANCEL_SUBSCRIPTION,\n                                            content:\n                                                constants.CANCEL_SUBSCRIPTION_MESSAGE(),\n                                            staticBackdrop: true,\n                                            proceed: {\n                                                text: constants.CANCEL_SUBSCRIPTION,\n                                                action: cancelSubscription.bind(\n                                                    null,\n                                                    props.setDialogMessage,\n                                                    props.closeModal,\n                                                    props.setLoading\n                                                ),\n                                                variant: 'danger',\n                                            },\n                                            close: {\n                                                text: constants.CANCEL,\n                                            },\n                                        })\n                                    }>\n                                    {constants.CANCEL_SUBSCRIPTION}\n                                </LinkButton>\n                            )}\n                            <LinkButton\n                                variant=\"primary\"\n                                onClick={updatePaymentMethod.bind(\n                                    null,\n                                    props.setDialogMessage,\n                                    props.setLoading\n                                )}\n                                style={{ marginTop: '20px' }}>\n                                {constants.MANAGEMENT_PORTAL}\n                            </LinkButton>\n                        </>\n                    ) : (\n                        <LinkButton\n                            variant=\"primary\"\n                            onClick={props.closeModal}\n                            style={{\n                                color: 'rgb(121, 121, 121)',\n                                marginTop: '20px',\n                            }}>\n                            {isOnFreePlan(subscription)\n                                ? constants.SKIP\n                                : constants.CLOSE}\n                        </LinkButton>\n                    )}\n                </DeadCenter>\n            </Modal.Body>\n        </Modal>\n    );\n}\n\nexport default PlanSelector;\n","import React from 'react';\nexport default function ExpandLess(props) {\n    return (\n        <div>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                height={props.height}\n                viewBox={props.viewBox}\n                width={props.width}\n                fill=\"#000000\">\n                <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n                <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14l-6-6z\" />\n            </svg>\n        </div>\n    );\n}\n\nExpandLess.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n    open: false,\n};\n","import React from 'react';\nexport default function ExpandMore(props) {\n    return (\n        <div>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                height={props.height}\n                viewBox={props.viewBox}\n                width={props.width}\n                fill=\"#000000\">\n                <path d=\"M24 24H0V0h24v24z\" fill=\"none\" opacity=\".87\" />\n                <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\" />\n            </svg>\n        </div>\n    );\n}\n\nExpandMore.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n    open: false,\n};\n","import { FileWithCollection } from 'services/upload/uploadManager';\nimport { MetadataObject } from 'services/upload/uploadService';\nimport { File } from 'services/fileService';\nconst TYPE_JSON = 'json';\n\nexport function fileAlreadyInCollection(\n    existingFilesInCollection: File[],\n    newFileMetadata: MetadataObject\n): boolean {\n    for (const existingFile of existingFilesInCollection) {\n        if (areFilesSame(existingFile.metadata, newFileMetadata)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function areFilesSame(\n    existingFile: MetadataObject,\n    newFile: MetadataObject\n): boolean {\n    if (\n        existingFile.fileType === newFile.fileType &&\n        existingFile.creationTime === newFile.creationTime &&\n        existingFile.modificationTime === newFile.modificationTime &&\n        existingFile.title === newFile.title\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function segregateFiles(\n    filesWithCollectionToUpload: FileWithCollection[]\n) {\n    const metadataFiles: FileWithCollection[] = [];\n    const mediaFiles: FileWithCollection[] = [];\n    filesWithCollectionToUpload.forEach((fileWithCollection) => {\n        const file = fileWithCollection.file;\n        if (file.name.startsWith('.')) {\n            // ignore files with name starting with . (hidden files)\n            return;\n        }\n        if (file.name.toLowerCase().endsWith(TYPE_JSON)) {\n            metadataFiles.push(fileWithCollection);\n        } else {\n            mediaFiles.push(fileWithCollection);\n        }\n    });\n    return { mediaFiles, metadataFiles };\n}\n","import { File, FILE_TYPE } from 'services/fileService';\nimport { sleep } from 'utils/common';\nimport { handleUploadError, CustomError } from 'utils/common/errorUtil';\nimport { decryptFile } from 'utils/file';\nimport { logError } from 'utils/sentry';\nimport { fileAlreadyInCollection } from 'utils/upload';\nimport UploadHttpClient from './uploadHttpClient';\nimport UIService from './uiService';\nimport { FileUploadResults, FileWithCollection } from './uploadManager';\nimport UploadService, {\n    BackupedFile,\n    EncryptedFile,\n    FileInMemory,\n    FileWithMetadata,\n    MetadataObject,\n    UploadFile,\n} from './uploadService';\nimport uploadService from './uploadService';\nimport { FileTypeInfo, getFileType } from './readFileService';\n\nconst TwoSecondInMillSeconds = 2000;\nconst FIVE_GB_IN_BYTES = 5 * 1024 * 1024 * 1024;\ninterface UploadResponse {\n    fileUploadResult: FileUploadResults;\n    file?: File;\n}\nexport default async function uploader(\n    worker: any,\n    existingFilesInCollection: File[],\n    fileWithCollection: FileWithCollection\n): Promise<UploadResponse> {\n    const { file: rawFile, collection } = fileWithCollection;\n\n    UIService.setFileProgress(rawFile.name, 0);\n\n    let file: FileInMemory = null;\n    let encryptedFile: EncryptedFile = null;\n    let metadata: MetadataObject = null;\n    let fileTypeInfo: FileTypeInfo = null;\n    let fileWithMetadata: FileWithMetadata = null;\n\n    try {\n        if (rawFile.size >= FIVE_GB_IN_BYTES) {\n            UIService.setFileProgress(\n                rawFile.name,\n                FileUploadResults.TOO_LARGE\n            );\n            // wait two second before removing the file from the progress in file section\n            await sleep(TwoSecondInMillSeconds);\n            return { fileUploadResult: FileUploadResults.TOO_LARGE };\n        }\n        fileTypeInfo = await getFileType(worker, rawFile);\n        if (fileTypeInfo.fileType === FILE_TYPE.OTHERS) {\n            throw Error(CustomError.UNSUPPORTED_FILE_FORMAT);\n        }\n        metadata = await uploadService.getFileMetadata(\n            rawFile,\n            collection,\n            fileTypeInfo\n        );\n\n        if (fileAlreadyInCollection(existingFilesInCollection, metadata)) {\n            UIService.setFileProgress(rawFile.name, FileUploadResults.SKIPPED);\n            // wait two second before removing the file from the progress in file section\n            await sleep(TwoSecondInMillSeconds);\n            return { fileUploadResult: FileUploadResults.SKIPPED };\n        }\n\n        file = await UploadService.readFile(worker, rawFile, fileTypeInfo);\n        if (file.hasStaticThumbnail) {\n            metadata.hasStaticThumbnail = true;\n        }\n        fileWithMetadata = {\n            filedata: file.filedata,\n            thumbnail: file.thumbnail,\n            metadata,\n        };\n\n        encryptedFile = await UploadService.encryptFile(\n            worker,\n            fileWithMetadata,\n            collection.key\n        );\n\n        const backupedFile: BackupedFile = await UploadService.uploadToBucket(\n            encryptedFile.file\n        );\n\n        const uploadFile: UploadFile = UploadService.getUploadFile(\n            collection,\n            backupedFile,\n            encryptedFile.fileKey\n        );\n\n        const uploadedFile = await UploadHttpClient.uploadFile(uploadFile);\n        const decryptedFile = await decryptFile(uploadedFile, collection);\n\n        UIService.setFileProgress(rawFile.name, FileUploadResults.UPLOADED);\n        UIService.increaseFileUploaded();\n        return {\n            fileUploadResult: FileUploadResults.UPLOADED,\n            file: decryptedFile,\n        };\n    } catch (e) {\n        logError(e, 'file upload failed', {\n            fileFormat: fileTypeInfo.exactType,\n        });\n        const error = handleUploadError(e);\n        switch (error.message) {\n            case CustomError.ETAG_MISSING:\n                UIService.setFileProgress(\n                    rawFile.name,\n                    FileUploadResults.BLOCKED\n                );\n                return { fileUploadResult: FileUploadResults.BLOCKED };\n            case CustomError.UNSUPPORTED_FILE_FORMAT:\n                UIService.setFileProgress(\n                    rawFile.name,\n                    FileUploadResults.UNSUPPORTED\n                );\n                return { fileUploadResult: FileUploadResults.UNSUPPORTED };\n\n            case CustomError.FILE_TOO_LARGE:\n                UIService.setFileProgress(\n                    rawFile.name,\n                    FileUploadResults.TOO_LARGE\n                );\n                return { fileUploadResult: FileUploadResults.TOO_LARGE };\n            default:\n                UIService.setFileProgress(\n                    rawFile.name,\n                    FileUploadResults.FAILED\n                );\n                return { fileUploadResult: FileUploadResults.FAILED };\n        }\n    } finally {\n        file = null;\n        fileWithMetadata = null;\n        encryptedFile = null;\n    }\n}\n","import { File, getLocalFiles, setLocalFiles } from '../fileService';\nimport { Collection, getLocalCollections } from '../collectionService';\nimport { SetFiles } from 'pages/gallery';\nimport { ComlinkWorker, getDedicatedCryptoWorker } from 'utils/crypto';\nimport {\n    sortFilesIntoCollections,\n    sortFiles,\n    removeUnnecessaryFileProps,\n} from 'utils/file';\nimport { logError } from 'utils/sentry';\nimport {\n    getMetadataMapKey,\n    ParsedMetaDataJSON,\n    parseMetadataJSON,\n} from './metadataService';\nimport { segregateFiles } from 'utils/upload';\nimport { ProgressUpdater } from 'components/pages/gallery/Upload';\nimport uploader from './uploader';\nimport UIService from './uiService';\nimport UploadService from './uploadService';\nimport { CustomError } from 'utils/common/errorUtil';\n\nconst MAX_CONCURRENT_UPLOADS = 4;\nconst FILE_UPLOAD_COMPLETED = 100;\n\nexport enum FileUploadResults {\n    FAILED = -1,\n    SKIPPED = -2,\n    UNSUPPORTED = -3,\n    BLOCKED = -4,\n    TOO_LARGE = -5,\n    UPLOADED = 100,\n}\n\nexport interface FileWithCollection {\n    file: globalThis.File;\n    collectionID?: number;\n    collection?: Collection;\n}\n\nexport enum UPLOAD_STAGES {\n    START,\n    READING_GOOGLE_METADATA_FILES,\n    UPLOADING,\n    FINISH,\n}\n\nexport type MetadataMap = Map<string, ParsedMetaDataJSON>;\n\nclass UploadManager {\n    private cryptoWorkers = new Array<ComlinkWorker>(MAX_CONCURRENT_UPLOADS);\n    private metadataMap: MetadataMap;\n    private filesToBeUploaded: FileWithCollection[];\n    private failedFiles: FileWithCollection[];\n    private existingFilesCollectionWise: Map<number, File[]>;\n    private existingFiles: File[];\n    private setFiles: SetFiles;\n    private collections: Map<number, Collection>;\n    public initUploader(progressUpdater: ProgressUpdater, setFiles: SetFiles) {\n        UIService.init(progressUpdater);\n        this.setFiles = setFiles;\n    }\n\n    private async init(newCollections?: Collection[]) {\n        this.filesToBeUploaded = [];\n        this.failedFiles = [];\n        this.metadataMap = new Map<string, ParsedMetaDataJSON>();\n        this.existingFiles = await getLocalFiles();\n        this.existingFilesCollectionWise = sortFilesIntoCollections(\n            this.existingFiles\n        );\n        const collections = await getLocalCollections();\n        if (newCollections) {\n            collections.push(...newCollections);\n        }\n        this.collections = new Map(\n            collections.map((collection) => [collection.id, collection])\n        );\n    }\n\n    public async queueFilesForUpload(\n        fileWithCollectionToBeUploaded: FileWithCollection[],\n        newCreatedCollections?: Collection[]\n    ) {\n        try {\n            await this.init(newCreatedCollections);\n            const { metadataFiles, mediaFiles } = segregateFiles(\n                fileWithCollectionToBeUploaded\n            );\n            if (metadataFiles.length) {\n                UIService.setUploadStage(\n                    UPLOAD_STAGES.READING_GOOGLE_METADATA_FILES\n                );\n                await this.seedMetadataMap(metadataFiles);\n            }\n            if (mediaFiles.length) {\n                UIService.setUploadStage(UPLOAD_STAGES.START);\n                await this.uploadMediaFiles(mediaFiles);\n            }\n            UIService.setUploadStage(UPLOAD_STAGES.FINISH);\n            UIService.setPercentComplete(FILE_UPLOAD_COMPLETED);\n        } catch (e) {\n            logError(e, 'uploading failed with error');\n            throw e;\n        } finally {\n            for (let i = 0; i < MAX_CONCURRENT_UPLOADS; i++) {\n                this.cryptoWorkers[i]?.worker.terminate();\n            }\n        }\n    }\n\n    private async seedMetadataMap(metadataFiles: FileWithCollection[]) {\n        try {\n            UIService.reset(metadataFiles.length);\n\n            for (const fileWithCollection of metadataFiles) {\n                const parsedMetaDataJSONWithTitle = await parseMetadataJSON(\n                    fileWithCollection.file\n                );\n                if (parsedMetaDataJSONWithTitle) {\n                    const { title, parsedMetaDataJSON } =\n                        parsedMetaDataJSONWithTitle;\n                    this.metadataMap.set(\n                        getMetadataMapKey(\n                            fileWithCollection.collectionID,\n                            title\n                        ),\n                        parsedMetaDataJSON\n                    );\n                    UIService.increaseFileUploaded();\n                }\n            }\n        } catch (e) {\n            logError(e, 'error seeding MetadataMap');\n            // silently ignore the error\n        }\n    }\n\n    private async uploadMediaFiles(mediaFiles: FileWithCollection[]) {\n        this.filesToBeUploaded.push(...mediaFiles);\n        UIService.reset(mediaFiles.length);\n\n        await UploadService.init(mediaFiles.length, this.metadataMap);\n\n        UIService.setUploadStage(UPLOAD_STAGES.UPLOADING);\n\n        const uploadProcesses = [];\n        for (\n            let i = 0;\n            i < MAX_CONCURRENT_UPLOADS && this.filesToBeUploaded.length > 0;\n            i++\n        ) {\n            const cryptoWorker = getDedicatedCryptoWorker();\n            if (!cryptoWorker) {\n                throw Error(CustomError.FAILED_TO_LOAD_WEB_WORKER);\n            }\n            this.cryptoWorkers[i] = cryptoWorker;\n            uploadProcesses.push(\n                this.uploadNextFileInQueue(\n                    await new this.cryptoWorkers[i].comlink()\n                )\n            );\n        }\n        await Promise.all(uploadProcesses);\n    }\n\n    private async uploadNextFileInQueue(worker: any) {\n        while (this.filesToBeUploaded.length > 0) {\n            const fileWithCollection = this.filesToBeUploaded.pop();\n            const existingFilesInCollection =\n                this.existingFilesCollectionWise.get(\n                    fileWithCollection.collectionID\n                ) ?? [];\n            const collection = this.collections.get(\n                fileWithCollection.collectionID\n            );\n            fileWithCollection.collection = collection;\n            const { fileUploadResult, file } = await uploader(\n                worker,\n                existingFilesInCollection,\n                fileWithCollection\n            );\n\n            if (fileUploadResult === FileUploadResults.UPLOADED) {\n                this.existingFiles.push(file);\n                this.existingFiles = sortFiles(this.existingFiles);\n                await setLocalFiles(\n                    removeUnnecessaryFileProps(this.existingFiles)\n                );\n                this.setFiles(this.existingFiles);\n                if (!this.existingFilesCollectionWise.has(file.collectionID)) {\n                    this.existingFilesCollectionWise.set(file.collectionID, []);\n                }\n                this.existingFilesCollectionWise\n                    .get(file.collectionID)\n                    .push(file);\n            }\n            if (\n                fileUploadResult === FileUploadResults.BLOCKED ||\n                fileUploadResult === FileUploadResults.FAILED\n            ) {\n                this.failedFiles.push(fileWithCollection);\n            }\n\n            UIService.moveFileToResultList(fileWithCollection.file.name);\n        }\n    }\n\n    async retryFailedFiles() {\n        await this.queueFilesForUpload(this.failedFiles);\n    }\n}\n\nexport default new UploadManager();\n","import ExpandLess from 'components/icons/ExpandLess';\nimport ExpandMore from 'components/icons/ExpandMore';\nimport React, { useState } from 'react';\nimport { Button, Modal, ProgressBar } from 'react-bootstrap';\nimport { FileRejection } from 'react-dropzone';\nimport {\n    FileUploadResults,\n    UPLOAD_STAGES,\n} from 'services/upload/uploadManager';\nimport styled from 'styled-components';\nimport { DESKTOP_APP_DOWNLOAD_URL } from 'utils/common';\nimport constants from 'utils/strings/constants';\nimport { Collapse } from 'react-collapse';\nimport { ButtonVariant, getVariantColor } from './LinkButton';\n\ninterface Props {\n    fileCounter;\n    uploadStage;\n    now;\n    closeModal;\n    retryFailed;\n    fileProgress: Map<string, number>;\n    show;\n    fileRejections: FileRejection[];\n    uploadResult: Map<string, number>;\n}\ninterface FileProgresses {\n    fileName: string;\n    progress: number;\n}\n\nconst FileList = styled.ul`\n    padding-left: 30px;\n    margin-top: 5px;\n    margin-bottom: 0px;\n    & > li {\n        padding-left: 5px;\n        margin-bottom: 10px;\n        color: #ccc;\n    }\n`;\n\nconst SectionTitle = styled.div`\n    display: flex;\n    justify-content: space-between;\n    color: #eee;\n    font-size: 20px;\n    cursor: pointer;\n`;\n\nconst Section = styled.div`\n    margin: 20px 0;\n    & > .ReactCollapse--collapse {\n        transition: height 200ms;\n    }\n    word-break: break-word;\n    padding: 0 20px;\n`;\nconst SectionInfo = styled.div`\n    margin: 4px 0;\n    padding-left: 15px;\n`;\n\nconst Content = styled.div`\n    padding-right: 30px;\n`;\n\nconst NotUploadSectionHeader = styled.div`\n    margin-top: 30px;\n    text-align: center;\n    color: ${getVariantColor(ButtonVariant.warning)};\n    border-bottom: 1px solid ${getVariantColor(ButtonVariant.warning)};\n    margin: 0 20px;\n`;\n\ninterface ResultSectionProps {\n    fileUploadResultMap: Map<FileUploadResults, string[]>;\n    fileUploadResult: FileUploadResults;\n    sectionTitle: any;\n    sectionInfo?: any;\n}\nconst ResultSection = (props: ResultSectionProps) => {\n    const [listView, setListView] = useState(false);\n    const fileList = props.fileUploadResultMap?.get(props.fileUploadResult);\n    if (!fileList?.length) {\n        return <></>;\n    }\n    return (\n        <Section>\n            <SectionTitle onClick={() => setListView(!listView)}>\n                {props.sectionTitle}\n                {listView ? <ExpandLess /> : <ExpandMore />}\n            </SectionTitle>\n            <Collapse isOpened={listView}>\n                <Content>\n                    {props.sectionInfo && (\n                        <SectionInfo>{props.sectionInfo}</SectionInfo>\n                    )}\n                    <FileList>\n                        {fileList.map((fileName) => (\n                            <li key={fileName}>{fileName}</li>\n                        ))}\n                    </FileList>\n                </Content>\n            </Collapse>\n        </Section>\n    );\n};\n\ninterface InProgressProps {\n    sectionTitle: string;\n    fileProgressStatuses: FileProgresses[];\n}\nconst InProgressSection = (props: InProgressProps) => {\n    const [listView, setListView] = useState(true);\n    const fileList = props.fileProgressStatuses;\n    if (!fileList?.length) {\n        return <></>;\n    }\n    if (!fileList?.length) {\n        return <></>;\n    }\n    return (\n        <Section>\n            <SectionTitle onClick={() => setListView(!listView)}>\n                {props.sectionTitle}\n                {listView ? <ExpandLess /> : <ExpandMore />}\n            </SectionTitle>\n            <Collapse isOpened={listView}>\n                <Content>\n                    <FileList>\n                        {fileList.map(({ fileName, progress }) => (\n                            <li key={fileName}>\n                                {constants.FILE_UPLOAD_PROGRESS(\n                                    fileName,\n                                    progress\n                                )}\n                            </li>\n                        ))}\n                    </FileList>\n                </Content>\n            </Collapse>\n        </Section>\n    );\n};\n\nexport default function UploadProgress(props: Props) {\n    const fileProgressStatuses = [] as FileProgresses[];\n    const fileUploadResultMap = new Map<FileUploadResults, string[]>();\n    let filesNotUploaded = false;\n\n    if (props.fileProgress) {\n        for (const [fileName, progress] of props.fileProgress) {\n            fileProgressStatuses.push({ fileName, progress });\n        }\n    }\n    if (props.uploadResult) {\n        for (const [fileName, progress] of props.uploadResult) {\n            if (!fileUploadResultMap.has(progress)) {\n                fileUploadResultMap.set(progress, []);\n            }\n            if (progress < 0) {\n                filesNotUploaded = true;\n            }\n            const fileList = fileUploadResultMap.get(progress);\n            fileUploadResultMap.set(progress, [...fileList, fileName]);\n        }\n    }\n\n    return (\n        <Modal\n            show={props.show}\n            onHide={\n                props.uploadStage !== UPLOAD_STAGES.FINISH\n                    ? () => null\n                    : props.closeModal\n            }\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            backdrop={fileProgressStatuses?.length !== 0 ? 'static' : true}>\n            <Modal.Header\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    textAlign: 'center',\n                    borderBottom: 'none',\n                    paddingTop: '30px',\n                    paddingBottom: '0px',\n                }}\n                closeButton={props.uploadStage === UPLOAD_STAGES.FINISH}>\n                <h4 style={{ width: '100%' }}>\n                    {props.uploadStage === UPLOAD_STAGES.UPLOADING\n                        ? constants.UPLOAD[props.uploadStage](props.fileCounter)\n                        : constants.UPLOAD[props.uploadStage]}\n                </h4>\n            </Modal.Header>\n            <Modal.Body>\n                {(props.uploadStage ===\n                    UPLOAD_STAGES.READING_GOOGLE_METADATA_FILES ||\n                    props.uploadStage === UPLOAD_STAGES.UPLOADING) && (\n                    <ProgressBar\n                        now={props.now}\n                        animated\n                        variant=\"upload-progress-bar\"\n                    />\n                )}\n                <InProgressSection\n                    fileProgressStatuses={fileProgressStatuses}\n                    sectionTitle={constants.INPROGRESS_UPLOADS}\n                />\n\n                <ResultSection\n                    fileUploadResultMap={fileUploadResultMap}\n                    fileUploadResult={FileUploadResults.UPLOADED}\n                    sectionTitle={constants.SUCCESSFUL_UPLOADS}\n                />\n\n                {props.uploadStage === UPLOAD_STAGES.FINISH &&\n                    filesNotUploaded && (\n                        <NotUploadSectionHeader>\n                            {constants.FILE_NOT_UPLOADED_LIST}\n                        </NotUploadSectionHeader>\n                    )}\n\n                <ResultSection\n                    fileUploadResultMap={fileUploadResultMap}\n                    fileUploadResult={FileUploadResults.BLOCKED}\n                    sectionTitle={constants.BLOCKED_UPLOADS}\n                    sectionInfo={constants.ETAGS_BLOCKED(\n                        DESKTOP_APP_DOWNLOAD_URL\n                    )}\n                />\n                <ResultSection\n                    fileUploadResultMap={fileUploadResultMap}\n                    fileUploadResult={FileUploadResults.FAILED}\n                    sectionTitle={constants.FAILED_UPLOADS}\n                />\n                <ResultSection\n                    fileUploadResultMap={fileUploadResultMap}\n                    fileUploadResult={FileUploadResults.SKIPPED}\n                    sectionTitle={constants.SKIPPED_FILES}\n                    sectionInfo={constants.SKIPPED_INFO}\n                />\n                <ResultSection\n                    fileUploadResultMap={fileUploadResultMap}\n                    fileUploadResult={FileUploadResults.UNSUPPORTED}\n                    sectionTitle={constants.UNSUPPORTED_FILES}\n                    sectionInfo={constants.UNSUPPORTED_INFO}\n                />\n                <ResultSection\n                    fileUploadResultMap={fileUploadResultMap}\n                    fileUploadResult={FileUploadResults.TOO_LARGE}\n                    sectionTitle={constants.TOO_LARGE_UPLOADS}\n                    sectionInfo={constants.TOO_LARGE_INFO}\n                />\n            </Modal.Body>\n            {props.uploadStage === UPLOAD_STAGES.FINISH && (\n                <Modal.Footer style={{ border: 'none' }}>\n                    {props.uploadStage === UPLOAD_STAGES.FINISH &&\n                        (fileUploadResultMap?.get(FileUploadResults.FAILED)\n                            ?.length > 0 ||\n                        fileUploadResultMap?.get(FileUploadResults.BLOCKED)\n                            ?.length > 0 ? (\n                            <Button\n                                variant=\"outline-success\"\n                                style={{ width: '100%' }}\n                                onClick={props.retryFailed}>\n                                {constants.RETRY_FAILED}\n                            </Button>\n                        ) : (\n                            <Button\n                                variant=\"outline-secondary\"\n                                style={{ width: '100%' }}\n                                onClick={props.closeModal}>\n                                {constants.CLOSE}\n                            </Button>\n                        ))}\n                </Modal.Footer>\n            )}\n        </Modal>\n    );\n}\n","import MessageDialog from 'components/MessageDialog';\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport constants from 'utils/strings/constants';\n\ninterface Props {\n    uploadToMultipleCollection: () => void;\n    show: boolean;\n    onHide: () => void;\n    uploadToSingleCollection: () => void;\n}\nfunction ChoiceModal({\n    uploadToMultipleCollection,\n    uploadToSingleCollection,\n    ...props\n}: Props) {\n    return (\n        <MessageDialog\n            {...props}\n            attributes={{ title: constants.MULTI_FOLDER_UPLOAD }}>\n            <p\n                style={{\n                    fontSize: '18px',\n                    textAlign: 'center',\n                    marginBottom: '24px',\n                    marginTop: '4px',\n                }}>\n                {constants.UPLOAD_STRATEGY_CHOICE}\n            </p>\n            <div\n                style={{\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    paddingBottom: '12px',\n                    justifyContent: 'center',\n                }}>\n                <Button\n                    variant=\"outline-success\"\n                    onClick={() => {\n                        props.onHide();\n                        uploadToSingleCollection();\n                    }}\n                    style={{\n                        padding: '12px 24px',\n                        whiteSpace: 'nowrap',\n                        fontWeight: 900,\n                    }}>\n                    {constants.UPLOAD_STRATEGY_SINGLE_COLLECTION}\n                </Button>\n                <div\n                    style={{\n                        textAlign: 'center',\n                        minWidth: '100px',\n                        margin: '2%',\n                    }}>\n                    <strong>{constants.OR}</strong>\n                </div>\n                <Button\n                    variant=\"outline-success\"\n                    onClick={() => {\n                        props.onHide();\n                        uploadToMultipleCollection();\n                    }}\n                    style={{\n                        padding: '12px 24px',\n                        whiteSpace: 'nowrap',\n                        fontWeight: 900,\n                    }}>\n                    {constants.UPLOAD_STRATEGY_COLLECTION_PER_FOLDER}\n                </Button>\n            </div>\n        </MessageDialog>\n    );\n}\nexport default ChoiceModal;\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport {\n    Collection,\n    syncCollections,\n    createAlbum,\n} from 'services/collectionService';\nimport constants from 'utils/strings/constants';\nimport { SetDialogMessage } from 'components/MessageDialog';\nimport UploadProgress from './UploadProgress';\n\nimport ChoiceModal from './ChoiceModal';\nimport { SetCollectionNamerAttributes } from './CollectionNamer';\nimport { SetCollectionSelectorAttributes } from './CollectionSelector';\nimport { GalleryContext, SetFiles, SetLoading } from 'pages/gallery';\nimport { AppContext } from 'pages/_app';\nimport { logError } from 'utils/sentry';\nimport { FileRejection } from 'react-dropzone';\nimport UploadManager, {\n    FileWithCollection,\n    UPLOAD_STAGES,\n} from 'services/upload/uploadManager';\nimport uploadManager from 'services/upload/uploadManager';\nimport { METADATA_FOLDER_NAME } from 'services/exportService';\nimport { getUserFacingErrorMessage } from 'utils/common/errorUtil';\n\nconst FIRST_ALBUM_NAME = 'My First Album';\n\ninterface Props {\n    syncWithRemote: (force?: boolean, silent?: boolean) => Promise<void>;\n    setBannerMessage: (message: string | JSX.Element) => void;\n    acceptedFiles: globalThis.File[];\n    closeCollectionSelector: () => void;\n    setCollectionSelectorAttributes: SetCollectionSelectorAttributes;\n    setCollectionNamerAttributes: SetCollectionNamerAttributes;\n    setLoading: SetLoading;\n    setDialogMessage: SetDialogMessage;\n    setUploadInProgress: any;\n    showCollectionSelector: () => void;\n    fileRejections: FileRejection[];\n    setFiles: SetFiles;\n    isFirstUpload: boolean;\n}\n\nexport enum UPLOAD_STRATEGY {\n    SINGLE_COLLECTION,\n    COLLECTION_PER_FOLDER,\n}\n\ninterface AnalysisResult {\n    suggestedCollectionName: string;\n    multipleFolders: boolean;\n}\nexport interface ProgressUpdater {\n    setPercentComplete: React.Dispatch<React.SetStateAction<number>>;\n    setFileCounter: React.Dispatch<\n        React.SetStateAction<{\n            finished: number;\n            total: number;\n        }>\n    >;\n    setUploadStage: React.Dispatch<React.SetStateAction<UPLOAD_STAGES>>;\n    setFileProgress: React.Dispatch<React.SetStateAction<Map<string, number>>>;\n    setUploadResult: React.Dispatch<React.SetStateAction<Map<string, number>>>;\n}\n\nexport default function Upload(props: Props) {\n    const [progressView, setProgressView] = useState(false);\n    const [uploadStage, setUploadStage] = useState<UPLOAD_STAGES>(\n        UPLOAD_STAGES.START\n    );\n    const [fileCounter, setFileCounter] = useState({ finished: 0, total: 0 });\n    const [fileProgress, setFileProgress] = useState(new Map<string, number>());\n    const [uploadResult, setUploadResult] = useState(new Map<string, number>());\n    const [percentComplete, setPercentComplete] = useState(0);\n    const [choiceModalView, setChoiceModalView] = useState(false);\n    const [analysisResult, setAnalysisResult] = useState<AnalysisResult>({\n        suggestedCollectionName: '',\n        multipleFolders: false,\n    });\n    const appContext = useContext(AppContext);\n    const galleryContext = useContext(GalleryContext);\n\n    useEffect(() => {\n        UploadManager.initUploader(\n            {\n                setPercentComplete,\n                setFileCounter,\n                setFileProgress,\n                setUploadResult,\n                setUploadStage,\n            },\n            props.setFiles\n        );\n    }, []);\n\n    useEffect(() => {\n        if (\n            props.acceptedFiles?.length > 0 ||\n            appContext.sharedFiles?.length > 0\n        ) {\n            props.setLoading(true);\n\n            let analysisResult: AnalysisResult;\n            if (props.acceptedFiles?.length > 0) {\n                // File selection by drag and drop or selection of file.\n                analysisResult = analyseUploadFiles();\n                if (analysisResult) {\n                    setAnalysisResult(analysisResult);\n                }\n            } else {\n                props.acceptedFiles = appContext.sharedFiles;\n            }\n            handleCollectionCreationAndUpload(\n                analysisResult,\n                props.isFirstUpload\n            );\n            props.setLoading(false);\n        }\n    }, [props.acceptedFiles, appContext.sharedFiles]);\n\n    const uploadInit = function () {\n        setUploadStage(UPLOAD_STAGES.START);\n        setFileCounter({ finished: 0, total: 0 });\n        setFileProgress(new Map<string, number>());\n        setUploadResult(new Map<string, number>());\n        setPercentComplete(0);\n        props.closeCollectionSelector();\n        setProgressView(true);\n    };\n\n    function analyseUploadFiles(): AnalysisResult {\n        if (props.acceptedFiles.length === 0) {\n            return null;\n        }\n        const paths: string[] = props.acceptedFiles.map((file) => file['path']);\n        const getCharCount = (str: string) => (str.match(/\\//g) ?? []).length;\n        paths.sort((path1, path2) => getCharCount(path1) - getCharCount(path2));\n        const firstPath = paths[0];\n        const lastPath = paths[paths.length - 1];\n        const L = firstPath.length;\n        let i = 0;\n        const firstFileFolder = firstPath.substr(0, firstPath.lastIndexOf('/'));\n        const lastFileFolder = lastPath.substr(0, lastPath.lastIndexOf('/'));\n        while (i < L && firstPath.charAt(i) === lastPath.charAt(i)) i++;\n        let commonPathPrefix = firstPath.substring(0, i);\n        if (commonPathPrefix) {\n            commonPathPrefix = commonPathPrefix.substr(\n                1,\n                commonPathPrefix.lastIndexOf('/') - 1\n            );\n            if (commonPathPrefix) {\n                commonPathPrefix = commonPathPrefix.substr(\n                    commonPathPrefix.lastIndexOf('/') + 1\n                );\n            }\n        }\n        return {\n            suggestedCollectionName: commonPathPrefix,\n            multipleFolders: firstFileFolder !== lastFileFolder,\n        };\n    }\n    function getCollectionWiseFiles() {\n        const collectionWiseFiles = new Map<string, globalThis.File[]>();\n        for (const file of props.acceptedFiles) {\n            const filePath = file['path'] as string;\n\n            let folderPath = filePath.substr(0, filePath.lastIndexOf('/'));\n            if (folderPath.endsWith(METADATA_FOLDER_NAME)) {\n                folderPath = folderPath.substr(0, folderPath.lastIndexOf('/'));\n            }\n            const folderName = folderPath.substr(\n                folderPath.lastIndexOf('/') + 1\n            );\n            if (!collectionWiseFiles.has(folderName)) {\n                collectionWiseFiles.set(folderName, []);\n            }\n            collectionWiseFiles.get(folderName).push(file);\n        }\n        return collectionWiseFiles;\n    }\n\n    const uploadFilesToExistingCollection = async (collection) => {\n        try {\n            uploadInit();\n            const filesWithCollectionToUpload: FileWithCollection[] =\n                props.acceptedFiles.map((file) => ({\n                    file,\n                    collectionID: collection.id,\n                }));\n            await uploadFiles(filesWithCollectionToUpload);\n        } catch (e) {\n            logError(e, 'Failed to upload files to existing collections');\n        }\n    };\n\n    const uploadFilesToNewCollections = async (\n        strategy: UPLOAD_STRATEGY,\n        collectionName?: string\n    ) => {\n        try {\n            uploadInit();\n\n            const filesWithCollectionToUpload: FileWithCollection[] = [];\n            const collections: Collection[] = [];\n            let collectionWiseFiles = new Map<string, globalThis.File[]>();\n            if (strategy === UPLOAD_STRATEGY.SINGLE_COLLECTION) {\n                collectionWiseFiles.set(collectionName, props.acceptedFiles);\n            } else {\n                collectionWiseFiles = getCollectionWiseFiles();\n            }\n            try {\n                const existingCollection = await syncCollections();\n                for (const [collectionName, files] of collectionWiseFiles) {\n                    const collection = await createAlbum(\n                        collectionName,\n                        existingCollection\n                    );\n                    collections.push(collection);\n                    for (const file of files) {\n                        filesWithCollectionToUpload.push({\n                            collectionID: collection.id,\n                            file,\n                        });\n                    }\n                }\n            } catch (e) {\n                setProgressView(false);\n                logError(e, 'Failed to create album');\n                props.setDialogMessage({\n                    title: constants.ERROR,\n                    staticBackdrop: true,\n                    close: { variant: 'danger' },\n                    content: constants.CREATE_ALBUM_FAILED,\n                });\n                throw e;\n            }\n            await uploadFiles(filesWithCollectionToUpload, collections);\n        } catch (e) {\n            logError(e, 'Failed to upload files to new collections');\n        }\n    };\n\n    const uploadFiles = async (\n        filesWithCollectionToUpload: FileWithCollection[],\n        collections?: Collection[]\n    ) => {\n        try {\n            props.setUploadInProgress(true);\n            props.closeCollectionSelector();\n            await props.syncWithRemote(true, true);\n            await uploadManager.queueFilesForUpload(\n                filesWithCollectionToUpload,\n                collections\n            );\n        } catch (err) {\n            const message = getUserFacingErrorMessage(\n                err.message,\n                galleryContext.showPlanSelectorModal\n            );\n            props.setBannerMessage(message);\n            setProgressView(false);\n            throw err;\n        } finally {\n            appContext.resetSharedFiles();\n            props.setUploadInProgress(false);\n            props.syncWithRemote();\n        }\n    };\n    const retryFailed = async () => {\n        try {\n            props.setUploadInProgress(true);\n            uploadInit();\n            await props.syncWithRemote(true, true);\n            await uploadManager.retryFailedFiles();\n        } catch (err) {\n            const message = getUserFacingErrorMessage(\n                err.message,\n                galleryContext.showPlanSelectorModal\n            );\n            appContext.resetSharedFiles();\n            props.setBannerMessage(message);\n            setProgressView(false);\n        } finally {\n            props.setUploadInProgress(false);\n            props.syncWithRemote();\n        }\n    };\n\n    const uploadToSingleNewCollection = (collectionName: string) => {\n        uploadFilesToNewCollections(\n            UPLOAD_STRATEGY.SINGLE_COLLECTION,\n            collectionName\n        );\n    };\n    const showCollectionCreateModal = (analysisResult: AnalysisResult) => {\n        props.setCollectionNamerAttributes({\n            title: constants.CREATE_COLLECTION,\n            buttonText: constants.CREATE,\n            autoFilledName: analysisResult?.suggestedCollectionName,\n            callback: uploadToSingleNewCollection,\n        });\n    };\n\n    const handleCollectionCreationAndUpload = (\n        analysisResult: AnalysisResult,\n        isFirstUpload: boolean\n    ) => {\n        if (!analysisResult.suggestedCollectionName) {\n            if (isFirstUpload) {\n                uploadToSingleNewCollection(FIRST_ALBUM_NAME);\n            } else {\n                props.setCollectionSelectorAttributes({\n                    callback: uploadFilesToExistingCollection,\n                    showNextModal: () =>\n                        showCollectionCreateModal(analysisResult),\n                    title: constants.UPLOAD_TO_COLLECTION,\n                });\n            }\n        } else {\n            if (analysisResult.multipleFolders) {\n                setChoiceModalView(true);\n            } else if (analysisResult.suggestedCollectionName) {\n                uploadToSingleNewCollection(\n                    analysisResult.suggestedCollectionName\n                );\n            }\n        }\n    };\n\n    return (\n        <>\n            <ChoiceModal\n                show={choiceModalView}\n                onHide={() => setChoiceModalView(false)}\n                uploadToSingleCollection={() =>\n                    uploadToSingleNewCollection(\n                        analysisResult.suggestedCollectionName\n                    )\n                }\n                uploadToMultipleCollection={() =>\n                    uploadFilesToNewCollections(\n                        UPLOAD_STRATEGY.COLLECTION_PER_FOLDER\n                    )\n                }\n            />\n            <UploadProgress\n                now={percentComplete}\n                fileCounter={fileCounter}\n                uploadStage={uploadStage}\n                fileProgress={fileProgress}\n                show={progressView}\n                closeModal={() => setProgressView(false)}\n                retryFailed={retryFailed}\n                fileRejections={props.fileRejections}\n                uploadResult={uploadResult}\n            />\n        </>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport constants from 'utils/strings/constants';\nimport { IconWithMessage } from './pages/gallery/SelectedFileOptions';\n\nconst Wrapper = styled.button`\n    border: none;\n    background-color: #ff6666;\n    position: fixed;\n    z-index: 1;\n    bottom: 30px;\n    right: 30px;\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    color: #fff;\n`;\nexport default function DeleteBtn(props) {\n    return (\n        <IconWithMessage message={constants.EMPTY_TRASH}>\n            <Wrapper onClick={props.onClick}>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    height={props.height}\n                    viewBox={props.viewBox}\n                    width={props.width}>\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\" />\n                </svg>\n            </Wrapper>\n        </IconWithMessage>\n    );\n}\n\nDeleteBtn.defaultProps = {\n    height: 24,\n    width: 24,\n    viewBox: '0 0 24 24',\n};\n","import { FIX_OPTIONS } from 'components/FixCreationTime';\nimport { SetProgressTracker } from 'components/FixLargeThumbnail';\nimport CryptoWorker from 'utils/crypto';\nimport {\n    changeFileCreationTime,\n    getFileFromURL,\n    updateExistingFilePubMetadata,\n} from 'utils/file';\nimport { logError } from 'utils/sentry';\nimport downloadManager from './downloadManager';\nimport { File, FILE_TYPE, updatePublicMagicMetadata } from './fileService';\nimport { getRawExif, getUNIXTime } from './upload/exifService';\nimport { getFileType } from './upload/readFileService';\n\nexport async function updateCreationTimeWithExif(\n    filesToBeUpdated: File[],\n    fixOption: FIX_OPTIONS,\n    customTime: Date,\n    setProgressTracker: SetProgressTracker\n) {\n    let completedWithError = false;\n    try {\n        if (filesToBeUpdated.length === 0) {\n            return completedWithError;\n        }\n        setProgressTracker({ current: 0, total: filesToBeUpdated.length });\n        for (const [index, file] of filesToBeUpdated.entries()) {\n            try {\n                if (file.metadata.fileType !== FILE_TYPE.IMAGE) {\n                    continue;\n                }\n                let correctCreationTime: number;\n                if (fixOption === FIX_OPTIONS.CUSTOM_TIME) {\n                    correctCreationTime = getUNIXTime(customTime);\n                } else {\n                    const fileURL = await downloadManager.getFile(file);\n                    const fileObject = await getFileFromURL(fileURL);\n                    const worker = await new CryptoWorker();\n                    const fileTypeInfo = await getFileType(worker, fileObject);\n                    const exifData = await getRawExif(fileObject, fileTypeInfo);\n                    if (fixOption === FIX_OPTIONS.DATE_TIME_ORIGINAL) {\n                        correctCreationTime = getUNIXTime(\n                            exifData?.DateTimeOriginal\n                        );\n                    } else {\n                        correctCreationTime = getUNIXTime(exifData?.CreateDate);\n                    }\n                }\n                if (\n                    correctCreationTime &&\n                    correctCreationTime !== file.metadata.creationTime\n                ) {\n                    let updatedFile = await changeFileCreationTime(\n                        file,\n                        correctCreationTime\n                    );\n                    updatedFile = (\n                        await updatePublicMagicMetadata([updatedFile])\n                    )[0];\n                    updateExistingFilePubMetadata(file, updatedFile);\n                }\n            } catch (e) {\n                logError(e, 'failed to updated a CreationTime With Exif');\n                completedWithError = true;\n            } finally {\n                setProgressTracker({\n                    current: index + 1,\n                    total: filesToBeUpdated.length,\n                });\n            }\n        }\n    } catch (e) {\n        logError(e, 'update CreationTime With Exif failed');\n        completedWithError = true;\n    }\n    return completedWithError;\n}\n","import constants from 'utils/strings/constants';\nimport { ComfySpan } from 'components/ExportInProgress';\nimport React from 'react';\nimport { ProgressBar } from 'react-bootstrap';\n\nexport default function FixCreationTimeRunning({ progressTracker }) {\n    return (\n        <>\n            <div style={{ marginBottom: '10px' }}>\n                <ComfySpan>\n                    {' '}\n                    {progressTracker.current} / {progressTracker.total}{' '}\n                </ComfySpan>{' '}\n                <span style={{ marginLeft: '10px' }}>\n                    {' '}\n                    {constants.CREATION_TIME_UPDATED}\n                </span>\n            </div>\n            <div\n                style={{\n                    width: '100%',\n                    marginTop: '10px',\n                    marginBottom: '20px',\n                }}>\n                <ProgressBar\n                    now={Math.round(\n                        (progressTracker.current * 100) / progressTracker.total\n                    )}\n                    animated={true}\n                    variant=\"upload-progress-bar\"\n                />\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { FIX_STATE } from '.';\nimport constants from 'utils/strings/constants';\n\nexport default function FixCreationTimeFooter({\n    fixState,\n    startFix,\n    ...props\n}) {\n    return (\n        fixState !== FIX_STATE.RUNNING && (\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    marginTop: '30px',\n                    justifyContent: 'space-around',\n                }}>\n                {(fixState === FIX_STATE.NOT_STARTED ||\n                    fixState === FIX_STATE.COMPLETED_WITH_ERRORS) && (\n                    <Button\n                        block\n                        variant={'outline-secondary'}\n                        onClick={() => {\n                            props.hide();\n                        }}>\n                        {constants.CANCEL}\n                    </Button>\n                )}\n                {fixState === FIX_STATE.COMPLETED && (\n                    <Button\n                        block\n                        variant={'outline-secondary'}\n                        onClick={props.hide}>\n                        {constants.CLOSE}\n                    </Button>\n                )}\n                {(fixState === FIX_STATE.NOT_STARTED ||\n                    fixState === FIX_STATE.COMPLETED_WITH_ERRORS) && (\n                    <>\n                        <div style={{ width: '30px' }} />\n\n                        <Button\n                            block\n                            variant={'outline-success'}\n                            onClick={startFix}>\n                            {constants.FIX_CREATION_TIME}\n                        </Button>\n                    </>\n                )}\n            </div>\n        )\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { FIX_OPTIONS } from '.';\nimport { Form } from 'react-bootstrap';\nimport EnteDateTimePicker from 'components/EnteDateTimePicker';\nimport { Row, Value } from 'components/Container';\nimport constants from 'utils/strings/constants';\n\nconst Option = ({\n    value,\n    selected,\n    onChange,\n    label,\n}: {\n    value: FIX_OPTIONS;\n    selected: FIX_OPTIONS;\n    onChange: (e: string | ChangeEvent<any>) => void;\n    label: string;\n}) => (\n    <Form.Check\n        name=\"group1\"\n        style={{\n            margin: '5px 0',\n            color: value !== Number(selected) ? '#aaa' : '#fff',\n        }}>\n        <Form.Check.Input\n            style={{ marginTop: '6px' }}\n            id={value.toString()}\n            type=\"radio\"\n            value={value}\n            checked={value === Number(selected)}\n            onChange={onChange}\n        />\n        <Form.Check.Label\n            style={{ cursor: 'pointer' }}\n            htmlFor={value.toString()}>\n            {label}\n        </Form.Check.Label>\n    </Form.Check>\n);\n\nexport default function FixCreationTimeOptions({ handleChange, values }) {\n    return (\n        <Form noValidate>\n            <Row style={{ margin: '0' }}>\n                <Option\n                    value={FIX_OPTIONS.DATE_TIME_ORIGINAL}\n                    onChange={handleChange('option')}\n                    label={constants.DATE_TIME_ORIGINAL}\n                    selected={Number(values.option)}\n                />\n            </Row>\n            <Row style={{ margin: '0' }}>\n                <Option\n                    value={FIX_OPTIONS.DATE_TIME_DIGITIZED}\n                    onChange={handleChange('option')}\n                    label={constants.DATE_TIME_DIGITIZED}\n                    selected={Number(values.option)}\n                />\n            </Row>\n            <Row style={{ margin: '0' }}>\n                <Value width=\"50%\">\n                    <Option\n                        value={FIX_OPTIONS.CUSTOM_TIME}\n                        onChange={handleChange('option')}\n                        label={constants.CUSTOM_TIME}\n                        selected={Number(values.option)}\n                    />\n                </Value>\n                {Number(values.option) === FIX_OPTIONS.CUSTOM_TIME && (\n                    <Value width=\"40%\">\n                        <EnteDateTimePicker\n                            isInEditMode\n                            pickedTime={new Date(values.customTime)}\n                            handleChange={(x: Date) =>\n                                handleChange('customTime')(x.toUTCString())\n                            }\n                        />\n                    </Value>\n                )}\n            </Row>\n        </Form>\n    );\n}\n","import constants from 'utils/strings/constants';\nimport MessageDialog from '../MessageDialog';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { updateCreationTimeWithExif } from 'services/updateCreationTimeWithExif';\nimport { GalleryContext } from 'pages/gallery';\nimport { File } from 'services/fileService';\nimport FixCreationTimeRunning from './running';\nimport FixCreationTimeFooter from './footer';\nimport { Formik } from 'formik';\n\nimport FixCreationTimeOptions from './options';\nexport interface FixCreationTimeAttributes {\n    files: File[];\n}\n\ninterface Props {\n    isOpen: boolean;\n    show: () => void;\n    hide: () => void;\n    attributes: FixCreationTimeAttributes;\n}\nexport enum FIX_STATE {\n    NOT_STARTED,\n    RUNNING,\n    COMPLETED,\n    COMPLETED_WITH_ERRORS,\n}\n\nexport enum FIX_OPTIONS {\n    DATE_TIME_ORIGINAL,\n    DATE_TIME_DIGITIZED,\n    CUSTOM_TIME,\n}\n\ninterface formValues {\n    option: FIX_OPTIONS;\n    customTime: Date;\n}\n\nfunction Message(props: { fixState: FIX_STATE }) {\n    let message = null;\n    switch (props.fixState) {\n        case FIX_STATE.NOT_STARTED:\n            message = constants.UPDATE_CREATION_TIME_NOT_STARTED();\n            break;\n        case FIX_STATE.COMPLETED:\n            message = constants.UPDATE_CREATION_TIME_COMPLETED();\n            break;\n        case FIX_STATE.COMPLETED_WITH_ERRORS:\n            message = constants.UPDATE_CREATION_TIME_COMPLETED_WITH_ERROR();\n            break;\n    }\n    return message ? <div>{message}</div> : <></>;\n}\nexport default function FixCreationTime(props: Props) {\n    const [fixState, setFixState] = useState(FIX_STATE.NOT_STARTED);\n    const [progressTracker, setProgressTracker] = useState({\n        current: 0,\n        total: 0,\n    });\n    const galleryContext = useContext(GalleryContext);\n    useEffect(() => {\n        if (\n            props.attributes &&\n            props.isOpen &&\n            fixState !== FIX_STATE.RUNNING\n        ) {\n            setFixState(FIX_STATE.NOT_STARTED);\n        }\n    }, [props.isOpen]);\n\n    const startFix = async (option: FIX_OPTIONS, customTime: Date) => {\n        setFixState(FIX_STATE.RUNNING);\n        const completedWithoutError = await updateCreationTimeWithExif(\n            props.attributes.files,\n            option,\n            customTime,\n            setProgressTracker\n        );\n        if (!completedWithoutError) {\n            setFixState(FIX_STATE.COMPLETED);\n        } else {\n            setFixState(FIX_STATE.COMPLETED_WITH_ERRORS);\n        }\n        await galleryContext.syncWithRemote();\n    };\n    if (!props.attributes) {\n        return <></>;\n    }\n\n    const onSubmit = (values: formValues) => {\n        console.log(values);\n        startFix(Number(values.option), new Date(values.customTime));\n    };\n\n    return (\n        <MessageDialog\n            show={props.isOpen}\n            onHide={props.hide}\n            attributes={{\n                title:\n                    fixState === FIX_STATE.RUNNING\n                        ? constants.FIX_CREATION_TIME_IN_PROGRESS\n                        : constants.FIX_CREATION_TIME,\n                staticBackdrop: true,\n                nonClosable: true,\n            }}>\n            <div\n                style={{\n                    marginBottom: '10px',\n                    padding: '0 5%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    ...(fixState === FIX_STATE.RUNNING\n                        ? { alignItems: 'center' }\n                        : {}),\n                }}>\n                <Message fixState={fixState} />\n\n                {fixState === FIX_STATE.RUNNING && (\n                    <FixCreationTimeRunning progressTracker={progressTracker} />\n                )}\n                <Formik<formValues>\n                    initialValues={{\n                        option: FIX_OPTIONS.DATE_TIME_ORIGINAL,\n                        customTime: new Date(),\n                    }}\n                    validateOnBlur={false}\n                    onSubmit={onSubmit}>\n                    {({ values, handleChange, handleSubmit }) => (\n                        <>\n                            {(fixState === FIX_STATE.NOT_STARTED ||\n                                fixState ===\n                                    FIX_STATE.COMPLETED_WITH_ERRORS) && (\n                                <div style={{ marginTop: '10px' }}>\n                                    <FixCreationTimeOptions\n                                        handleChange={handleChange}\n                                        values={values}\n                                    />\n                                </div>\n                            )}\n                            <FixCreationTimeFooter\n                                fixState={fixState}\n                                startFix={handleSubmit}\n                                hide={props.hide}\n                            />\n                        </>\n                    )}\n                </Formik>\n            </div>\n        </MessageDialog>\n    );\n}\n","import React, {\n    createContext,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { useRouter } from 'next/router';\nimport { clearKeys, getKey, SESSION_KEYS } from 'utils/storage/sessionStorage';\nimport {\n    File,\n    getLocalFiles,\n    syncFiles,\n    updateMagicMetadata,\n    VISIBILITY_STATE,\n    trashFiles,\n    deleteFromTrash,\n} from 'services/fileService';\nimport styled from 'styled-components';\nimport LoadingBar from 'react-top-loading-bar';\nimport {\n    Collection,\n    syncCollections,\n    CollectionAndItsLatestFile,\n    getCollectionsAndTheirLatestFile,\n    getFavItemIds,\n    getLocalCollections,\n    getNonEmptyCollections,\n    createCollection,\n    CollectionType,\n} from 'services/collectionService';\nimport constants from 'utils/strings/constants';\nimport billingService from 'services/billingService';\nimport { checkSubscriptionPurchase } from 'utils/billingUtil';\n\nimport FullScreenDropZone from 'components/FullScreenDropZone';\nimport Sidebar from 'components/Sidebar';\nimport { checkConnectivity } from 'utils/common';\nimport {\n    isFirstLogin,\n    justSignedUp,\n    setIsFirstLogin,\n    setJustSignedUp,\n} from 'utils/storage';\nimport { isTokenValid, logoutUser } from 'services/userService';\nimport MessageDialog, { MessageAttributes } from 'components/MessageDialog';\nimport { useDropzone } from 'react-dropzone';\nimport EnteSpinner from 'components/EnteSpinner';\nimport { LoadingOverlay } from 'components/LoadingOverlay';\nimport PhotoFrame from 'components/PhotoFrame';\nimport {\n    changeFilesVisibility,\n    downloadFiles,\n    getNonTrashedUniqueUserFiles,\n    getSelectedFiles,\n    mergeMetadata,\n    sortFiles,\n    sortFilesIntoCollections,\n} from 'utils/file';\nimport SearchBar, { DateValue } from 'components/SearchBar';\nimport { Bbox } from 'services/searchService';\nimport SelectedFileOptions from 'components/pages/gallery/SelectedFileOptions';\nimport CollectionSelector, {\n    CollectionSelectorAttributes,\n} from 'components/pages/gallery/CollectionSelector';\nimport CollectionNamer, {\n    CollectionNamerAttributes,\n} from 'components/pages/gallery/CollectionNamer';\nimport AlertBanner from 'components/pages/gallery/AlertBanner';\nimport UploadButton from 'components/pages/gallery/UploadButton';\nimport PlanSelector from 'components/pages/gallery/PlanSelector';\nimport Upload from 'components/pages/gallery/Upload';\nimport Collections, {\n    ALL_SECTION,\n    ARCHIVE_SECTION,\n    TRASH_SECTION,\n} from 'components/pages/gallery/Collections';\nimport { AppContext } from 'pages/_app';\nimport { CustomError, ServerErrorCodes } from 'utils/common/errorUtil';\nimport { PAGES } from 'types';\nimport {\n    COLLECTION_OPS_TYPE,\n    isSharedCollection,\n    handleCollectionOps,\n    getSelectedCollection,\n    isFavoriteCollection,\n} from 'utils/collection';\nimport { logError } from 'utils/sentry';\nimport {\n    clearLocalTrash,\n    emptyTrash,\n    getLocalTrash,\n    getTrashedFiles,\n    syncTrash,\n    Trash,\n} from 'services/trashService';\nimport DeleteBtn from 'components/DeleteBtn';\nimport FixCreationTime, {\n    FixCreationTimeAttributes,\n} from 'components/FixCreationTime';\n\nexport const DeadCenter = styled.div`\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    flex-direction: column;\n`;\nconst AlertContainer = styled.div`\n    background-color: #111;\n    padding: 5px 0;\n    font-size: 14px;\n    text-align: center;\n`;\n\nexport type SelectedState = {\n    [k: number]: boolean;\n    count: number;\n    collectionID: number;\n};\nexport type SetFiles = React.Dispatch<React.SetStateAction<File[]>>;\nexport type SetCollections = React.Dispatch<React.SetStateAction<Collection[]>>;\nexport type SetLoading = React.Dispatch<React.SetStateAction<Boolean>>;\nexport type setSearchStats = React.Dispatch<React.SetStateAction<SearchStats>>;\n\nexport type Search = {\n    date?: DateValue;\n    location?: Bbox;\n    fileIndex?: number;\n};\nexport interface SearchStats {\n    resultCount: number;\n    timeTaken: number;\n}\n\ntype GalleryContextType = {\n    thumbs: Map<number, string>;\n    files: Map<number, string>;\n    showPlanSelectorModal: () => void;\n    setActiveCollection: (collection: number) => void;\n    syncWithRemote: (force?: boolean, silent?: boolean) => Promise<void>;\n};\n\nconst defaultGalleryContext: GalleryContextType = {\n    thumbs: new Map(),\n    files: new Map(),\n    showPlanSelectorModal: () => null,\n    setActiveCollection: () => null,\n    syncWithRemote: () => null,\n};\n\nexport const GalleryContext = createContext<GalleryContextType>(\n    defaultGalleryContext\n);\n\nexport default function Gallery() {\n    const router = useRouter();\n    const [collections, setCollections] = useState<Collection[]>([]);\n    const [collectionsAndTheirLatestFile, setCollectionsAndTheirLatestFile] =\n        useState<CollectionAndItsLatestFile[]>([]);\n    const [files, setFiles] = useState<File[]>(null);\n    const [favItemIds, setFavItemIds] = useState<Set<number>>();\n    const [bannerMessage, setBannerMessage] = useState<JSX.Element | string>(\n        null\n    );\n    const [isFirstLoad, setIsFirstLoad] = useState(false);\n    const [isFirstFetch, setIsFirstFetch] = useState(false);\n    const [selected, setSelected] = useState<SelectedState>({\n        count: 0,\n        collectionID: 0,\n    });\n    const [dialogMessage, setDialogMessage] = useState<MessageAttributes>();\n    const [dialogView, setDialogView] = useState(false);\n    const [planModalView, setPlanModalView] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [collectionSelectorAttributes, setCollectionSelectorAttributes] =\n        useState<CollectionSelectorAttributes>(null);\n    const [collectionSelectorView, setCollectionSelectorView] = useState(false);\n    const [collectionNamerAttributes, setCollectionNamerAttributes] =\n        useState<CollectionNamerAttributes>(null);\n    const [collectionNamerView, setCollectionNamerView] = useState(false);\n    const [search, setSearch] = useState<Search>({\n        date: null,\n        location: null,\n        fileIndex: null,\n    });\n    const [uploadInProgress, setUploadInProgress] = useState(false);\n    const {\n        getRootProps,\n        getInputProps,\n        open: openFileUploader,\n        acceptedFiles,\n        fileRejections,\n    } = useDropzone({\n        noClick: true,\n        noKeyboard: true,\n        disabled: uploadInProgress,\n    });\n\n    const loadingBar = useRef(null);\n    const [isInSearchMode, setIsInSearchMode] = useState(false);\n    const [searchStats, setSearchStats] = useState(null);\n    const syncInProgress = useRef(true);\n    const resync = useRef(false);\n    const [deleted, setDeleted] = useState<number[]>([]);\n    const appContext = useContext(AppContext);\n    const [collectionFilesCount, setCollectionFilesCount] =\n        useState<Map<number, number>>();\n    const [activeCollection, setActiveCollection] = useState<number>(undefined);\n    const [trash, setTrash] = useState<Trash>([]);\n    const [fixCreationTimeView, setFixCreationTimeView] = useState(false);\n    const [fixCreationTimeAttributes, setFixCreationTimeAttributes] =\n        useState<FixCreationTimeAttributes>(null);\n\n    useEffect(() => {\n        const key = getKey(SESSION_KEYS.ENCRYPTION_KEY);\n        if (!key) {\n            appContext.setRedirectUrl(router.asPath);\n            router.push(PAGES.ROOT);\n            return;\n        }\n        const main = async () => {\n            setActiveCollection(ALL_SECTION);\n            setIsFirstLoad(isFirstLogin());\n            setIsFirstFetch(true);\n            if (justSignedUp()) {\n                setPlanModalView(true);\n            }\n            setIsFirstLogin(false);\n            const files = mergeMetadata(await getLocalFiles());\n            const collections = await getLocalCollections();\n            const trash = await getLocalTrash();\n            const trashedFile = getTrashedFiles(trash);\n            setFiles(sortFiles([...files, ...trashedFile]));\n            setCollections(collections);\n            setTrash(trash);\n            await setDerivativeState(collections, files);\n            await syncWithRemote(true);\n            setIsFirstLoad(false);\n            setJustSignedUp(false);\n            setIsFirstFetch(false);\n        };\n        main();\n        appContext.showNavBar(true);\n    }, []);\n\n    useEffect(() => setDialogView(true), [dialogMessage]);\n\n    useEffect(\n        () => collectionSelectorAttributes && setCollectionSelectorView(true),\n        [collectionSelectorAttributes]\n    );\n\n    useEffect(\n        () => collectionNamerAttributes && setCollectionNamerView(true),\n        [collectionNamerAttributes]\n    );\n    useEffect(\n        () => fixCreationTimeAttributes && setFixCreationTimeView(true),\n        [fixCreationTimeAttributes]\n    );\n\n    useEffect(() => {\n        if (typeof activeCollection === 'undefined') {\n            return;\n        }\n        let collectionURL = '';\n        if (activeCollection !== ALL_SECTION) {\n            collectionURL += '?collection=';\n            if (activeCollection === ARCHIVE_SECTION) {\n                collectionURL += constants.ARCHIVE;\n            } else if (activeCollection === TRASH_SECTION) {\n                collectionURL += constants.TRASH;\n            } else {\n                collectionURL += activeCollection;\n            }\n        }\n        const href = `/gallery${collectionURL}`;\n        router.push(href, undefined, { shallow: true });\n    }, [activeCollection]);\n\n    useEffect(() => {\n        const key = getKey(SESSION_KEYS.ENCRYPTION_KEY);\n        if (router.isReady && key) {\n            checkSubscriptionPurchase(setDialogMessage, router, setLoading);\n        }\n    }, [router.isReady]);\n\n    const syncWithRemote = async (force = false, silent = false) => {\n        if (syncInProgress.current && !force) {\n            resync.current = true;\n            return;\n        }\n        syncInProgress.current = true;\n        try {\n            checkConnectivity();\n            if (!(await isTokenValid())) {\n                throw new Error(ServerErrorCodes.SESSION_EXPIRED);\n            }\n            !silent && loadingBar.current?.continuousStart();\n            await billingService.syncSubscription();\n            const collections = await syncCollections();\n            setCollections(collections);\n            const files = await syncFiles(collections, setFiles);\n            await setDerivativeState(collections, files);\n            const trash = await syncTrash(collections, setFiles, files);\n            setTrash(trash);\n        } catch (e) {\n            switch (e.message) {\n                case ServerErrorCodes.SESSION_EXPIRED:\n                    setBannerMessage(constants.SESSION_EXPIRED_MESSAGE);\n                    setDialogMessage({\n                        title: constants.SESSION_EXPIRED,\n                        content: constants.SESSION_EXPIRED_MESSAGE,\n                        staticBackdrop: true,\n                        nonClosable: true,\n                        proceed: {\n                            text: constants.LOGIN,\n                            action: logoutUser,\n                            variant: 'success',\n                        },\n                    });\n                    break;\n                case CustomError.KEY_MISSING:\n                    clearKeys();\n                    router.push(PAGES.CREDENTIALS);\n                    break;\n            }\n        } finally {\n            !silent && loadingBar.current?.complete();\n        }\n        syncInProgress.current = false;\n        if (resync.current) {\n            resync.current = false;\n            syncWithRemote();\n        }\n    };\n\n    const setDerivativeState = async (\n        collections: Collection[],\n        files: File[]\n    ) => {\n        const favItemIds = await getFavItemIds(files);\n        setFavItemIds(favItemIds);\n        const nonEmptyCollections = getNonEmptyCollections(collections, files);\n        setCollections(nonEmptyCollections);\n        const collectionsAndTheirLatestFile = getCollectionsAndTheirLatestFile(\n            nonEmptyCollections,\n            files\n        );\n        setCollectionsAndTheirLatestFile(collectionsAndTheirLatestFile);\n        const collectionWiseFiles = sortFilesIntoCollections(files);\n        const collectionFilesCount = new Map<number, number>();\n        for (const [id, files] of collectionWiseFiles) {\n            collectionFilesCount.set(id, files.length);\n        }\n        setCollectionFilesCount(collectionFilesCount);\n    };\n\n    const clearSelection = function () {\n        setSelected({ count: 0, collectionID: 0 });\n    };\n\n    if (!files) {\n        return <div />;\n    }\n    const collectionOpsHelper =\n        (ops: COLLECTION_OPS_TYPE) => async (collection: Collection) => {\n            loadingBar.current?.continuousStart();\n            try {\n                await handleCollectionOps(\n                    ops,\n                    setCollectionSelectorView,\n                    selected,\n                    files,\n                    setActiveCollection,\n                    collection\n                );\n                clearSelection();\n            } catch (e) {\n                logError(e, 'collection ops failed', { ops });\n                setDialogMessage({\n                    title: constants.ERROR,\n                    staticBackdrop: true,\n                    close: { variant: 'danger' },\n                    content: constants.UNKNOWN_ERROR,\n                });\n            } finally {\n                await syncWithRemote(false, true);\n                loadingBar.current.complete();\n            }\n        };\n\n    const changeFilesVisibilityHelper = async (\n        visibility: VISIBILITY_STATE\n    ) => {\n        loadingBar.current?.continuousStart();\n        try {\n            const updatedFiles = await changeFilesVisibility(\n                files,\n                selected,\n                visibility\n            );\n            await updateMagicMetadata(updatedFiles);\n            clearSelection();\n        } catch (e) {\n            logError(e, 'change file visibility failed');\n            switch (e.status?.toString()) {\n                case ServerErrorCodes.FORBIDDEN:\n                    setDialogMessage({\n                        title: constants.ERROR,\n                        staticBackdrop: true,\n                        close: { variant: 'danger' },\n                        content: constants.NOT_FILE_OWNER,\n                    });\n                    return;\n            }\n            setDialogMessage({\n                title: constants.ERROR,\n                staticBackdrop: true,\n                close: { variant: 'danger' },\n                content: constants.UNKNOWN_ERROR,\n            });\n        } finally {\n            await syncWithRemote(false, true);\n            loadingBar.current.complete();\n        }\n    };\n\n    const showCreateCollectionModal = (ops: COLLECTION_OPS_TYPE) => {\n        const callback = async (collectionName: string) => {\n            try {\n                const collection = await createCollection(\n                    collectionName,\n                    CollectionType.album,\n                    collections\n                );\n\n                await collectionOpsHelper(ops)(collection);\n            } catch (e) {\n                logError(e, 'create and collection ops failed');\n                setDialogMessage({\n                    title: constants.ERROR,\n                    staticBackdrop: true,\n                    close: { variant: 'danger' },\n                    content: constants.UNKNOWN_ERROR,\n                });\n            }\n        };\n        return () =>\n            setCollectionNamerAttributes({\n                title: constants.CREATE_COLLECTION,\n                buttonText: constants.CREATE,\n                autoFilledName: '',\n                callback,\n            });\n    };\n\n    const deleteFileHelper = async (permanent?: boolean) => {\n        loadingBar.current?.continuousStart();\n        try {\n            const selectedFiles = getSelectedFiles(selected, files);\n            if (permanent) {\n                await deleteFromTrash(selectedFiles.map((file) => file.id));\n                setDeleted([\n                    ...deleted,\n                    ...selectedFiles.map((file) => file.id),\n                ]);\n            } else {\n                await trashFiles(selectedFiles);\n            }\n            clearSelection();\n        } catch (e) {\n            switch (e.status?.toString()) {\n                case ServerErrorCodes.FORBIDDEN:\n                    setDialogMessage({\n                        title: constants.ERROR,\n                        staticBackdrop: true,\n                        close: { variant: 'danger' },\n                        content: constants.NOT_FILE_OWNER,\n                    });\n            }\n            setDialogMessage({\n                title: constants.ERROR,\n                staticBackdrop: true,\n                close: { variant: 'danger' },\n                content: constants.UNKNOWN_ERROR,\n            });\n        } finally {\n            await syncWithRemote(false, true);\n            loadingBar.current.complete();\n        }\n    };\n\n    const updateSearch = (newSearch: Search) => {\n        setActiveCollection(ALL_SECTION);\n        setSearch(newSearch);\n        setSearchStats(null);\n    };\n\n    const closeCollectionSelector = (closeBtnClick?: boolean) => {\n        if (closeBtnClick === true) {\n            appContext.resetSharedFiles();\n        }\n        setCollectionSelectorView(false);\n    };\n\n    const emptyTrashHandler = () =>\n        setDialogMessage({\n            title: constants.CONFIRM_EMPTY_TRASH,\n            content: constants.EMPTY_TRASH_MESSAGE,\n            staticBackdrop: true,\n            proceed: {\n                action: emptyTrashHelper,\n                text: constants.EMPTY_TRASH,\n                variant: 'danger',\n            },\n            close: { text: constants.CANCEL },\n        });\n    const emptyTrashHelper = async () => {\n        loadingBar.current?.continuousStart();\n        try {\n            await emptyTrash();\n            if (selected.collectionID === TRASH_SECTION) {\n                clearSelection();\n            }\n            await clearLocalTrash();\n            setActiveCollection(ALL_SECTION);\n        } catch (e) {\n            setDialogMessage({\n                title: constants.ERROR,\n                staticBackdrop: true,\n                close: { variant: 'danger' },\n                content: constants.UNKNOWN_ERROR,\n            });\n        } finally {\n            await syncWithRemote(false, true);\n            loadingBar.current.complete();\n        }\n    };\n\n    const fixTimeHelper = async () => {\n        const selectedFiles = getSelectedFiles(selected, files);\n        setFixCreationTimeAttributes({ files: selectedFiles });\n        clearSelection();\n    };\n\n    const downloadHelper = async () => {\n        const selectedFiles = getSelectedFiles(selected, files);\n        clearSelection();\n        !syncInProgress.current && loadingBar.current?.continuousStart();\n        await downloadFiles(selectedFiles);\n        !syncInProgress.current && loadingBar.current.complete();\n    };\n\n    return (\n        <GalleryContext.Provider\n            value={{\n                ...defaultGalleryContext,\n                showPlanSelectorModal: () => setPlanModalView(true),\n                setActiveCollection,\n                syncWithRemote,\n            }}>\n            <FullScreenDropZone\n                getRootProps={getRootProps}\n                getInputProps={getInputProps}>\n                {loading && (\n                    <LoadingOverlay>\n                        <EnteSpinner />\n                    </LoadingOverlay>\n                )}\n                <LoadingBar color=\"#51cd7c\" ref={loadingBar} />\n                {isFirstLoad && (\n                    <AlertContainer>\n                        {constants.INITIAL_LOAD_DELAY_WARNING}\n                    </AlertContainer>\n                )}\n                <PlanSelector\n                    modalView={planModalView}\n                    closeModal={() => setPlanModalView(false)}\n                    setDialogMessage={setDialogMessage}\n                    setLoading={setLoading}\n                />\n                <AlertBanner bannerMessage={bannerMessage} />\n                <MessageDialog\n                    size=\"lg\"\n                    show={dialogView}\n                    onHide={() => setDialogView(false)}\n                    attributes={dialogMessage}\n                />\n                <SearchBar\n                    isOpen={isInSearchMode}\n                    setOpen={setIsInSearchMode}\n                    loadingBar={loadingBar}\n                    isFirstFetch={isFirstFetch}\n                    collections={collections}\n                    files={getNonTrashedUniqueUserFiles(files)}\n                    setActiveCollection={setActiveCollection}\n                    setSearch={updateSearch}\n                    searchStats={searchStats}\n                />\n                <Collections\n                    collections={collections}\n                    collectionAndTheirLatestFile={collectionsAndTheirLatestFile}\n                    isInSearchMode={isInSearchMode}\n                    activeCollection={activeCollection}\n                    setActiveCollection={setActiveCollection}\n                    syncWithRemote={syncWithRemote}\n                    setDialogMessage={setDialogMessage}\n                    setCollectionNamerAttributes={setCollectionNamerAttributes}\n                    startLoadingBar={loadingBar.current?.continuousStart}\n                    collectionFilesCount={collectionFilesCount}\n                />\n                <CollectionNamer\n                    show={collectionNamerView}\n                    onHide={setCollectionNamerView.bind(null, false)}\n                    attributes={collectionNamerAttributes}\n                />\n                <CollectionSelector\n                    show={collectionSelectorView}\n                    onHide={closeCollectionSelector}\n                    collectionsAndTheirLatestFile={\n                        collectionsAndTheirLatestFile\n                    }\n                    attributes={collectionSelectorAttributes}\n                />\n                <FixCreationTime\n                    isOpen={fixCreationTimeView}\n                    hide={() => setFixCreationTimeView(false)}\n                    show={() => setFixCreationTimeView(true)}\n                    attributes={fixCreationTimeAttributes}\n                />\n                <Upload\n                    syncWithRemote={syncWithRemote}\n                    setBannerMessage={setBannerMessage}\n                    acceptedFiles={acceptedFiles}\n                    showCollectionSelector={setCollectionSelectorView.bind(\n                        null,\n                        true\n                    )}\n                    setCollectionSelectorAttributes={\n                        setCollectionSelectorAttributes\n                    }\n                    closeCollectionSelector={setCollectionSelectorView.bind(\n                        null,\n                        false\n                    )}\n                    setLoading={setLoading}\n                    setCollectionNamerAttributes={setCollectionNamerAttributes}\n                    setDialogMessage={setDialogMessage}\n                    setUploadInProgress={setUploadInProgress}\n                    fileRejections={fileRejections}\n                    setFiles={setFiles}\n                    isFirstUpload={collectionsAndTheirLatestFile?.length === 0}\n                />\n                <Sidebar\n                    collections={collections}\n                    setDialogMessage={setDialogMessage}\n                    setLoading={setLoading}\n                />\n                <UploadButton\n                    isFirstFetch={isFirstFetch}\n                    openFileUploader={openFileUploader}\n                />\n                <PhotoFrame\n                    files={files}\n                    setFiles={setFiles}\n                    syncWithRemote={syncWithRemote}\n                    favItemIds={favItemIds}\n                    setSelected={setSelected}\n                    selected={selected}\n                    isFirstLoad={isFirstLoad}\n                    openFileUploader={openFileUploader}\n                    loadingBar={loadingBar}\n                    isInSearchMode={isInSearchMode}\n                    search={search}\n                    setSearchStats={setSearchStats}\n                    deleted={deleted}\n                    setDialogMessage={setDialogMessage}\n                    activeCollection={activeCollection}\n                    isSharedCollection={isSharedCollection(\n                        activeCollection,\n                        collections\n                    )}\n                />\n                {selected.count > 0 &&\n                    selected.collectionID === activeCollection && (\n                        <SelectedFileOptions\n                            addToCollectionHelper={collectionOpsHelper(\n                                COLLECTION_OPS_TYPE.ADD\n                            )}\n                            archiveFilesHelper={() =>\n                                changeFilesVisibilityHelper(\n                                    VISIBILITY_STATE.ARCHIVED\n                                )\n                            }\n                            unArchiveFilesHelper={() =>\n                                changeFilesVisibilityHelper(\n                                    VISIBILITY_STATE.VISIBLE\n                                )\n                            }\n                            moveToCollectionHelper={collectionOpsHelper(\n                                COLLECTION_OPS_TYPE.MOVE\n                            )}\n                            restoreToCollectionHelper={collectionOpsHelper(\n                                COLLECTION_OPS_TYPE.RESTORE\n                            )}\n                            showCreateCollectionModal={\n                                showCreateCollectionModal\n                            }\n                            setDialogMessage={setDialogMessage}\n                            setCollectionSelectorAttributes={\n                                setCollectionSelectorAttributes\n                            }\n                            deleteFileHelper={deleteFileHelper}\n                            removeFromCollectionHelper={() =>\n                                collectionOpsHelper(COLLECTION_OPS_TYPE.REMOVE)(\n                                    getSelectedCollection(\n                                        activeCollection,\n                                        collections\n                                    )\n                                )\n                            }\n                            fixTimeHelper={fixTimeHelper}\n                            downloadHelper={downloadHelper}\n                            count={selected.count}\n                            clearSelection={clearSelection}\n                            activeCollection={activeCollection}\n                            isFavoriteCollection={isFavoriteCollection(\n                                activeCollection,\n                                collections\n                            )}\n                        />\n                    )}\n                {activeCollection === TRASH_SECTION && trash?.length > 0 && (\n                    <DeleteBtn onClick={emptyTrashHandler} />\n                )}\n            </FullScreenDropZone>\n        </GalleryContext.Provider>\n    );\n}\n"],"names":["CollectionType","ENDPOINT","getEndpoint","COLLECTION_SORT_BY","COLLECTION_UPDATION_TIME","COLLECTIONS","getCollectionWithSecrets","collection","masterKey","CryptoWorker","worker","userID","getData","LS_KEYS","id","owner","decryptB64","encryptedKey","keyDecryptionNonce","decryptedKey","keyAttributes","encryptedSecretKey","secretKeyDecryptionNonce","secretKey","boxSealOpen","publicKey","name","decryptToUTF8","encryptedName","nameDecryptionNonce","key","getCollections","token","sinceTime","HTTPService","resp","promises","data","collections","map","isDeleted","collectionWithSecrets","logError","collectionID","Promise","all","filter","getLocalCollections","localForage","getCollectionUpdationTime","syncCollections","localCollections","lastCollectionUpdationTime","getToken","getActualKey","updatedCollections","length","allCollectionsInstances","latestCollectionsInstances","Map","forEach","has","get","updationTime","set","push","Math","max","sortCollections","MODIFICATION_TIME","getCollection","getCollectionsAndTheirLatestFile","files","latestFile","file","collectionsAndTheirLatestFile","getFavItemIds","getFavCollection","favCollection","Set","createAlbum","albumName","existingCollection","createCollection","album","collectionName","type","existingCollections","encryptionKey","generateEncryptionKey","collectionKey","encryptToB64","encryptedData","nonce","encryptUTF8","newCollection","attributes","sharees","postCollection","createdCollection","collectionData","response","addToFavorites","favorites","addToCollection","removeFromFavorites","Error","CustomError","removeFromCollection","encryptWithNewCollectionKey","fileKeysEncryptedWithNewCollection","requestBody","restoreToCollection","moveToCollection","fromCollectionID","toCollection","toCollectionID","newEncryptedKey","request","fileIDs","deleteCollection","syncWithRemote","redirectToAll","setDialogMessage","title","constants","content","close","variant","renameCollection","newCollectionName","collectionRenameRequest","shareCollection","withUserEmail","getPublicKey","boxSeal","shareCollectionRequest","email","unshareCollection","getNonEmptyCollections","nonEmptyCollectionsIds","add","collectionAndTheirLatestFile","sortBy","sort","collectionA","collectionB","moveFavCollectionToFront","LATEST_FILE","CollectionALatestFile","getCollectionLatestFile","CollectionBLatestFile","sortFiles","compareCollectionsLatestFile","NAME","localeCompare","collectionAndItsLatestFile","CloseIcon","props","xmlns","height","viewBox","width","d","defaultProps","CloseButtonWrapper","styled","DropDiv","Overlay","FullScreenDropZone","useState","isDragActive","setIsDragActive","onDragLeave","useEffect","window","addEventListener","event","code","getRootProps","onDragEnter","getInputProps","onDrop","onClick","children","ButtonVariant","getVariantColor","success","danger","secondary","warning","LinkButton","style","color","cursor","marginBottom","ExportStage","ExportNotification","RecordType","ExportType","router","useRouter","isTwoFactorEnabled","setTwoFactorStatus","appContext","useContext","AppContext","show","getTwoFactorStatus","setData","main","warnTwoFactorDisable","staticBackdrop","text","proceed","action","twoFactorDisable","disableTwoFactor","onHide","closeSidebar","setDisappearingFlashMessage","message","FLASH_MESSAGE_TYPE","warnTwoFactorReconfigure","reconfigureTwoFactor","PAGES","MessageDialog","padding","Button","DeadCenter","fill","opacity","getExportRecordFileUID","getExportPendingFiles","allFiles","exportRecord","queuedFiles","unExportedFiles","getFilesUploadedAfterLastExport","exportedFiles","getExportFailedFiles","failedFiles","filesToExport","dedupe","fileSet","Array","EXPORT_RECORD_FILE_NAME","METADATA_FOLDER_NAME","ExportService","resolve","exportInProgress","this","ElectronAPIs","runningInBrowser","selectRootDirectory","stopExport","pauseExport","updateProgress","exportType","sendNotification","IN_PROGRESS","showOnTray","exportDir","folder","getLocalFiles","nonEmptyCollections","getExportRecord","NEW","RETRY_FAILED","fileExporter","dir","UP_TO_DATE","paused","addFilesQueuedRecord","failedFileCount","export_progress","current","total","START","collectionIDMap","collectionFolderPath","sanitizeName","checkExistsAndCreateCollectionDir","entries","index","collectionPath","downloadAndSave","addFileExportRecord","SUCCESS","FAILED","ABORT","PAUSE","retry_export","FINISH","updateExportRecord","fileUID","queuedFilesUID","FailedFileUID","find","x","newData","recordUpdateInProgress","newRecord","setExportRecord","JSON","stringify","recordFile","parse","uid","metadata","retryAsyncFunction","downloadManager","fileStream","fileType","FILE_TYPE","exportMotionPhoto","saveMediaFile","saveMetadataFile","Response","blob","fileBlob","originalName","fileNameWithoutExtension","decodeMotionPhoto","motionPhoto","imageStream","generateStreamFromArrayBuffer","image","imageUID","imageNameTitle","videoStream","video","videoUID","videoNameTitle","saveStreamToDisk","saveFileToDisk","creationTime","floor","modificationTime","timestamp","formatted","formatDate","geoData","latitude","longitude","getGoogleLikeMetadataFile","replaceAll","ComfySpan","ExportInProgress","display","alignItems","flexDirection","exportProgress","marginLeft","exportStage","PAUSED","ProgressBar","now","round","animated","justifyContent","block","resumeExport","cancelExport","ExportFinished","totalFiles","exportStats","failed","borderBottom","formatDateTime","lastExportTime","retryFailed","exportFiles","ExportInit","size","margin","flex","whiteSpace","startExport","FolderIcon","open","Rotate","disabled","InProgressIcon","FolderIconWrapper","ExportFolderPathContainer","ExportModal","INIT","setExportStage","exportFolder","setExportFolder","exportSize","setExportSize","setExportProgress","setExportStats","setLastExportTime","isElectron","exportService","registerStopExportListener","registerPauseExportListener","registerResumeExportListener","registerRetryFailedExportListener","retryFailedExport","exportInfo","stage","lastAttemptTimestamp","progress","INPROGRESS","FINISHED","localFiles","exportedFileCnt","failedFilesCnt","syncedFilesCnt","updateExportProgress","exportFileUIDs","updateExportStage","usage","updateExportFolder","newFolder","newStage","newProgress","preExportRun","selectExportDirectory","sleep","postExportRun","newTime","Date","time","syncExportStatsWithReport","stopRunningExport","pauseRunningExport","pausedStageProgress","updateExportStatsWithOffset","PENDING","ExportDynamicState","loading","setLoading","collectionShare","resetForm","setFieldError","user","value","errorMessage","status","collectionUnshare","sharee","ShareeRow","lineHeight","fontSize","fontWeight","marginTop","initialValues","validationSchema","Yup","shape","required","validateOnChange","validateOnBlur","onSubmit","values","errors","touched","handleChange","handleSubmit","Form","noValidate","as","Col","xs","controlId","placeholder","onChange","isInvalid","Boolean","autoFocus","FormControl","SubmitButton","inline","buttonText","background","Table","striped","bordered","hover","NavigateNext","SCROLL_DIRECTION","COLLECTION_OPS_TYPE","Wrapper","direction","LEFT","scrollDirection","rest","handleCollectionOps","setCollectionSelectorView","selected","setActiveCollection","selectedFiles","getSelectedFiles","ADD","MOVE","REMOVE","RESTORE","getSelectedCollection","isSharedCollection","isFavoriteCollection","MenuLink","MenuItem","ListGroup","collectionRename","selectedCollection","newName","Popover","borderRadius","border","setCollectionNamerAttributes","autoFilledName","selectedCollectionID","callback","startLoadingBar","showCollectionShareModal","SortIcon","TickIcon","TickWrapper","SortByOption","setCollectionSortBy","activeSortBy","Row","SortByOptionCreator","DeleteIcon","AddIcon","Archive","MoveIcon","UnArchive","RemoveIcon","RestoreIcon","ClockIcon","DownloadIcon","SelectionBar","Navbar","SelectionContainer","IconWithMessage","OverlayTrigger","placement","overlay","zIndex","addToCollectionHelper","moveToCollectionHelper","restoreToCollectionHelper","showCreateCollectionModal","removeFromCollectionHelper","fixTimeHelper","setCollectionSelectorAttributes","deleteFileHelper","downloadHelper","count","clearSelection","archiveFilesHelper","unArchiveFilesHelper","activeCollection","showFixCreationTime","setShowFixCreationTime","FIX_CREATION_TIME_VISIBLE_TO_USER_IDS","TRASH_SECTION","showNextModal","fromCollection","ARCHIVE_SECTION","ALL_SECTION","CollectionSort","collectionSortOptions","CollectionSortOptions","rootClose","trigger","OptionIconWrapper","e","stopPropagation","CollectionContainer","IMAGE_CONTAINER_MAX_WIDTH","CollectionBar","Chip","active","Hider","hide","Collections","setSelectedCollectionID","collectionWrapperRef","useRef","collectionChipsRef","reduce","refMap","React","collectionShareModalView","setCollectionShareModalView","scrollObj","setScrollObj","collectionSortBy","updateScrollObj","scrollLeft","scrollWidth","clientWidth","isInSearchMode","scrollIntoView","clickHandler","collectionOptions","CollectionOptions","bind","scrollCollection","scrollBy","renderTooltip","fileCount","collectionFilesCount","Tooltip","paddingBottom","backgroundColor","SectionChip","section","label","SectionChipCreater","ref","onScroll","item","delay","RIGHT","TRASH","TRASH_TIME","DELETED_COLLECTION","getLocalTrash","trash","getLocalDeletedCollections","trashedCollections","cleanTrashCollections","fileTrash","neededTrashCollections","filterCollections","getLastSyncTime","syncTrash","setFiles","collectionMap","lastSyncTime","updateTrash","updatedTrash","currentTrash","diff","trashItem","isRestored","decryptFile","slice","updatedAt","removeDuplicates","getTrashedFiles","hasMore","latestVersionTrashItems","trashedFile","mergeMetadata","isTrashed","deleteBy","emptyTrash","lastUpdatedAt","clearLocalTrash","FIX_STATE","REPLACE_THUMBNAIL_THRESHOLD","getLargeThumbnailFiles","threshold","largeThumbnailFiles","replaceThumbnail","setProgressTracker","largeThumbnailFileIDs","completedWithError","trashFiles","uploadURLs","uploadHttpClient","idx","originalThumbnail","dummyImageFile","globalThis","File","getFileType","fileTypeInfo","generateThumbnail","newThumbnail","thumbnail","uploadThumbnail","pop","newUploadedThumbnail","updateThumbnail","fileKey","updatedThumbnail","uploadURL","encryptThumbnail","encryptedThumbnail","thumbnailObjectKey","objectKey","decryptionHeader","fileID","Message","fixState","NOT_STARTED","FIX_LATER","COMPLETED","NOOP","COMPLETED_WITH_ERRORS","FixLargeThumbnails","setFixState","progressTracker","setLargeThumbnailFiles","fetchLargeThumbnail","updateFixState","isOpen","RUNNING","state","init","startFix","newlyFetchedLargeThumbnailFiles","Sidebar","SetUsage","setUser","subscription","setSubscription","getUserSubscription","setIsOpen","recoverModalView","setRecoveryModalView","twoFactorModalView","setTwoFactorModalView","exportModalView","setExportModalView","fixLargeThumbsView","setFixLargeThumbsView","galleryContext","GalleryContext","initiateEmail","a","document","createElement","href","rel","click","getUserDetails","userDetails","convertToHumanReadable","Divider","onStateChange","itemListElement","outline","textAlign","LogoImage","alt","src","overflow","paddingTop","isSubscriptionActive","isOnFreePlan","expiryTime","isSubscriptionCancelled","showPlanSelectorModal","isSubscribed","storage","EnteSpinner","borderWidth","RecoveryKeyModal","somethingWentWrong","feedbackURL","encodeURIComponent","focus","downloadApp","isExportInProgress","logoutUser","LoadingOverlay","PlayCircleOutline","Check","HoverOverlay","checked","InSelectRangeOverLay","Cont","GAP_BTW_TILES","PreviewCard","imgSrc","setImgSrc","thumbs","updateUrl","forcedEnable","selectable","onSelect","selectOnClick","onHover","onRangeSelect","isRangeSelectActive","isInsSelectRange","isMounted","useLayoutEffect","msrc","DownloadManager","url","thumbImgSrc","onMouseEnter","ms","startLongPress","setStartLongPress","timerId","setTimeout","clearTimeout","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","useLongPress","target","HeartUI","isClick","FavButton","EditIcon","first","second","isInEditMode","pickedTime","timeInputLabel","dateFormat","showTimeSelect","minDate","MIN_EDITED_CREATION_TIME","maxDate","MAX_EDITED_CREATION_TIME","maxTime","getFullYear","getMonth","getDate","ALL_TIME","minTime","fixedHeight","withPortal","LegendContainer","Legend","Pre","renderInfoItem","RenderCreationTime","scheduleUpdate","originalCreationTime","setIsInEditMode","setPickedTime","closeEditMode","saveEdits","unixTimeInMicroSec","getTime","changeFileCreationTime","updatedFile","updatePublicMagicMetadata","updateExistingFilePubMetadata","newDate","getFileTitle","filename","extension","FileNameEditForm","discardEdits","MAX_EDITED_FILE_NAME_LENGTH","bsPrefix","RenderFileName","originalTitle","splitFilenameAndExtension","originalFileName","setFilename","newFilename","newTitle","changeFileName","ExifData","exif","showAll","setShowAll","FormCheck","raw","Make","Model","ImageWidth","ImageHeight","Flash","FocalLength","toString","ApertureValue","ISOSpeedRatings","InfoModal","showInfo","handleCloseInfo","items","photoSwipe","Modal","closeButton","getCurrentIndex","pswpElement","setPhotoSwipe","isFav","setIsFav","setShowInfo","setMetaData","setExif","needUpdate","updateFavButton","isInFav","currItem","openPhotoSwipe","closePhotoSwipe","updateItems","options","arrowKeys","escKey","history","maxSpreadZoom","currentIndex","showHideOpacity","getDoubleTapZoom","isMouseClick","initialZoomLevel","getThumbBoundsFn","ele","getElementById","rect","getBoundingClientRect","pageYScroll","pageYOffset","documentElement","scrollTop","left","y","top","w","Photoswipe","PhotoswipeUIDefault","events","listen","args","unshift","handleClose","updateInfo","call","checkExifAvailable","onClose","getElementsByTagName","pause","favItemIds","onFavClick","invalidateCurrItems","img","querySelector","exifr","then","exifData","strPretty","Object","tagName","tagValue","Uint8Array","toDateString","prettyPrintExif","downloadFileHelper","loadingBar","continuousStart","downloadFile","complete","className","classnames","trim","tabIndex","Number","role","isTrashCollection","isSameDay","baseDate","compareDate","same","month","date","year","getFormattedDate","Intl","DateTimeFormat","format","isPlaybackPossible","t","ITEM_TYPE","ListItem","ListContainer","columns","groups","sum","acc","join","SPACE_BTW_DATES","getTemplateColumns","DateContainer","span","DATE_CONTAINER_HEIGHT","BannerContainer","NothingContainer","PhotoList","filteredData","showBanner","getThumbnail","resetFetching","timeStampListRef","timeStampList","filteredDataCopyRef","filteredDataCopy","listRef","listItemHeight","IMAGE_CONTAINER_MAX_HEIGHT","skipMerge","MIN_COLUMNS","listItemIndex","currentDate","itemType","TILE","itemStartIndex","dateTimeFormat","weekday","day","TIME","mergeTimeStampList","getEmptyListItem","getBannerItem","resetAfterIndex","refreshList","BANNER","banner","photoFrameHeight","getCurrentItemSize","getItemSize","i","newList","newIndex","dates","concat","nextItem","extraRowsToRender","ceil","renderListItem","listItem","ret","splice","itemSize","itemCount","itemKey","overscanCount","Container","EmptyScreen","setSelected","isFirstLoad","openFileUploader","search","setSearchStats","deleted","setOpen","setCurrentIndex","fetching","setFetching","startTime","rangeStart","setRangeStart","currentHover","setCurrentHover","isShiftKeyPressed","setIsShiftKeyPressed","filteredDataRef","handleKeyDown","handleKeyUp","resultCount","timeTaken","fileIndex","filteredDataIdx","findIndex","dataIndex","onThumbnailClick","idSet","innerWidth","h","innerHeight","formatDateRelative","includes","isSameDayAnyYear","location","bbox","fileIsArchived","isSharedFile","html","updateSrcUrl","handleSelect","onHoverOver","handleRangeSelect","leftEnd","rightEnd","getSlideData","instance","updateSize","gettingData","paddingLeft","paddingRight","DIGITS","parseHumanDate","humanDate","chrono","date1","reverse","split","c","searchLocation","searchPhrase","query","limit","results","getHolidaySuggestion","SuggestionType","DATE","suggestion","toLowerCase","getYearSuggestion","parseInt","searchCollection","searchFiles","ownerID","LocationIcon","cx","cy","r","DateIcon","SearchIcon","CollectionIcon","ImageIcon","VideoIcon","isDisabled","SearchButton","SearchStatsContainer","SearchInput","SearchBar","setValue","getAutoCompleteSuggestions","searchedDates","searchedDate","collectionResults","searchResult","COLLECTION","fileResults","IMAGE","VIDEO","locationResults","LOCATION","place","getOptions","debounce","selectedOption","setSearch","getIconByType","LabelWithIcon","Option","components","Control","customStyles","control","isFocused","borderColor","boxShadow","input","menu","option","dropdownIndicator","indicatorSeparator","clearIndicator","singleValue","selectProps","menuIsOpen","wordSpacing","searchStats","isFirstFetch","getValue","loadOptions","isClearable","escapeClearsValue","styles","noOptionsMessage","resetSearch","ImageContainer","AddCollectionButton","Card","CollectionCard","collectionToShow","setCollectionToShow","personalCollectionsOtherThanFrom","CollectionIcons","centered","contentClassName","flexWrap","CollectionNamer","collectionNameInputRef","WarningIcon","Banner","AlertBanner","bannerMessage","ArrowEast","PLAN_PERIOD","PlanIcon","plans","setPlans","YEAR","planPeriod","setPlanPeriod","onPlanSelect","plan","hasPaidSubscription","hasStripeSubscription","reverseString","updateSubscription","closeModal","billingService","stripeID","modalView","planNotListed","isUserSubscribedPlan","planForSubscription","PlanIcons","period","convertBytesToGBs","price","backdrop","prevPeriod","MONTH","minHeight","activateSubscription","cancelSubscription","updatePaymentMethod","ExpandLess","ExpandMore","fileAlreadyInCollection","existingFilesInCollection","newFileMetadata","areFilesSame","existingFile","newFile","segregateFiles","filesWithCollectionToUpload","metadataFiles","mediaFiles","fileWithCollection","startsWith","endsWith","TwoSecondInMillSeconds","FIVE_GB_IN_BYTES","uploader","rawFile","UIService","encryptedFile","fileWithMetadata","FileUploadResults","TOO_LARGE","fileUploadResult","uploadService","SKIPPED","UploadService","hasStaticThumbnail","filedata","backupedFile","uploadFile","UploadHttpClient","uploadedFile","decryptedFile","UPLOADED","fileFormat","exactType","error","handleUploadError","BLOCKED","UNSUPPORTED","UPLOAD_STAGES","UploadManager","progressUpdater","newCollections","filesToBeUploaded","metadataMap","existingFiles","existingFilesCollectionWise","sortFilesIntoCollections","fileWithCollectionToBeUploaded","newCreatedCollections","READING_GOOGLE_METADATA_FILES","seedMetadataMap","uploadMediaFiles","cryptoWorkers","terminate","parseMetadataJSON","parsedMetaDataJSONWithTitle","parsedMetaDataJSON","getMetadataMapKey","UPLOADING","uploadProcesses","cryptoWorker","getDedicatedCryptoWorker","comlink","uploadNextFileInQueue","setLocalFiles","removeUnnecessaryFileProps","queueFilesForUpload","FileList","SectionTitle","Section","SectionInfo","Content","NotUploadSectionHeader","ResultSection","listView","setListView","fileList","fileUploadResultMap","sectionTitle","Collapse","isOpened","sectionInfo","fileName","InProgressSection","fileProgressStatuses","UploadProgress","filesNotUploaded","fileProgress","uploadResult","uploadStage","fileCounter","DESKTOP_APP_DOWNLOAD_URL","uploadToMultipleCollection","uploadToSingleCollection","minWidth","UPLOAD_STRATEGY","Upload","progressView","setProgressView","setUploadStage","finished","setFileCounter","setFileProgress","setUploadResult","percentComplete","setPercentComplete","choiceModalView","setChoiceModalView","suggestedCollectionName","multipleFolders","analysisResult","setAnalysisResult","acceptedFiles","sharedFiles","paths","getCharCount","str","match","path1","path2","firstPath","lastPath","L","firstFileFolder","substr","lastIndexOf","lastFileFolder","charAt","commonPathPrefix","substring","analyseUploadFiles","handleCollectionCreationAndUpload","isFirstUpload","uploadInit","closeCollectionSelector","getCollectionWiseFiles","collectionWiseFiles","filePath","folderPath","folderName","uploadFilesToExistingCollection","uploadFiles","uploadFilesToNewCollections","strategy","SINGLE_COLLECTION","setUploadInProgress","uploadManager","getUserFacingErrorMessage","setBannerMessage","resetSharedFiles","retryFailedFiles","uploadToSingleNewCollection","showCollectionCreateModal","COLLECTION_PER_FOLDER","fileRejections","DeleteBtn","updateCreationTimeWithExif","filesToBeUpdated","fixOption","customTime","correctCreationTime","FIX_OPTIONS","CUSTOM_TIME","getUNIXTime","fileURL","getFileFromURL","fileObject","getRawExif","DATE_TIME_ORIGINAL","DateTimeOriginal","CreateDate","FixCreationTimeRunning","FixCreationTimeFooter","htmlFor","FixCreationTimeOptions","DATE_TIME_DIGITIZED","toUTCString","FixCreationTime","completedWithoutError","nonClosable","console","log","AlertContainer","defaultGalleryContext","createContext","Gallery","setCollections","setCollectionsAndTheirLatestFile","setFavItemIds","setIsFirstLoad","setIsFirstFetch","dialogMessage","dialogView","setDialogView","planModalView","setPlanModalView","collectionSelectorAttributes","collectionSelectorView","collectionNamerAttributes","collectionNamerView","setCollectionNamerView","uploadInProgress","useDropzone","noClick","noKeyboard","setIsInSearchMode","syncInProgress","resync","setDeleted","setCollectionFilesCount","undefined","setTrash","fixCreationTimeView","setFixCreationTimeView","fixCreationTimeAttributes","setFixCreationTimeAttributes","getKey","SESSION_KEYS","setRedirectUrl","asPath","isFirstLogin","justSignedUp","setIsFirstLogin","setDerivativeState","setJustSignedUp","showNavBar","collectionURL","shallow","isReady","checkSubscriptionPurchase","force","silent","checkConnectivity","isTokenValid","ServerErrorCodes","syncFiles","clearKeys","collectionOpsHelper","ops","changeFilesVisibilityHelper","visibility","changeFilesVisibility","updatedFiles","updateMagicMetadata","permanent","deleteFromTrash","emptyTrashHelper","downloadFiles","Provider","getNonTrashedUniqueUserFiles","newSearch","closeBtnClick","showCollectionSelector","VISIBILITY_STATE"],"sourceRoot":""}